#pragma once

// Dumped with Dumper-7!

#ifdef _MSC_VER
	#pragma pack(push, 0x01)
#endif

namespace SDK
{
//---------------------------------------------------------------------------------------------------------------------
// CLASSES
//---------------------------------------------------------------------------------------------------------------------

// 0x360 (0x388 - 0x28)
// Class Engine.Actor
class AActor : public UObject
{
public:
	struct FActorTickFunction                    PrimaryActorTick;                                  // 0x28(0x58)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                        CustomTimeDilation;                                // 0x80(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHidden : 1;                                       // Mask: 0x1, PropSize: 0x10x84(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNetTemporary : 1;                                 // Mask: 0x2, PropSize: 0x10x84(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNetStartup : 1;                                   // Mask: 0x4, PropSize: 0x10x84(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOnlyRelevantToOwner : 1;                          // Mask: 0x8, PropSize: 0x10x84(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAlwaysRelevant : 1;                               // Mask: 0x10, PropSize: 0x10x84(0x1)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bReplicateMovement : 1;                            // Mask: 0x20, PropSize: 0x10x84(0x1)(Edit, Net, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTearOff : 1;                                      // Mask: 0x40, PropSize: 0x10x84(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bExchangedRoles : 1;                               // Mask: 0x80, PropSize: 0x10x84(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_7F : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bNetLoadOnClient : 1;                              // Mask: 0x2, PropSize: 0x10x85(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNetUseOwnerRelevancy : 1;                         // Mask: 0x4, PropSize: 0x10x85(0x1)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bBlockInput : 1;                                   // Mask: 0x8, PropSize: 0x10x85(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_80 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAllowTickBeforeBeginPlay : 1;                     // Mask: 0x20, PropSize: 0x10x85(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_81 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        BitPad_82 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bActorEnableCollision : 1;                         // Mask: 0x2, PropSize: 0x10x86(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_83 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bReplicates : 1;                                   // Mask: 0x8, PropSize: 0x10x86(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_84 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_D0C[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  NetDriverName;                                     // 0x88(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ENetRole                          RemoteRole;                                        // 0x90(0x1)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_D0D[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class AActor*                                Owner;                                             // 0x98(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRepMovement                          ReplicatedMovement;                                // 0xA0(0x34)(Edit, Net, DisableEditOnInstance, RepNotify, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                        Pad_D0E[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRepAttachment                        AttachmentReplication;                             // 0xD8(0x40)(Net, Transient, RepNotify, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	enum class ENetRole                          Role;                                              // 0x118(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENetDormancy                      NetDormancy;                                       // 0x119(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAutoReceiveInput                 AutoReceiveInput;                                  // 0x11A(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D0F[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        InputPriority;                                     // 0x11C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputComponent*                       InputComponent;                                    // 0x120(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EInputConsumeOptions              InputConsumeOption;                                // 0x128(0x1)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D10[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        NetCullDistanceSquared;                            // 0x12C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NetTag;                                            // 0x130(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D11[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        NetUpdateFrequency;                                // 0x138(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinNetUpdateFrequency;                             // 0x13C(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetPriority;                                       // 0x140(0x4)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D12[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bAutoDestroyWhenFinished : 1;                      // Mask: 0x1, PropSize: 0x10x148(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCanBeDamaged : 1;                                 // Mask: 0x2, PropSize: 0x10x148(0x1)(Edit, BlueprintVisible, Net, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bActorIsBeingDestroyed : 1;                        // Mask: 0x4, PropSize: 0x10x148(0x1)(Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bCollideWhenPlacing : 1;                           // Mask: 0x8, PropSize: 0x10x148(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFindCameraComponentWhenViewTarget : 1;            // Mask: 0x10, PropSize: 0x10x148(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRelevantForNetworkReplays : 1;                    // Mask: 0x20, PropSize: 0x10x148(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGenerateOverlapEventsDuringLevelStreaming : 1;    // Mask: 0x40, PropSize: 0x10x148(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCanBeInCluster : 1;                               // Mask: 0x80, PropSize: 0x10x148(0x1)(Edit, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ESpawnActorCollisionHandlingMethod SpawnCollisionHandlingMethod;                      // 0x149(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D13[0x6];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class APawn*                                 Instigator;                                        // 0x150(0x8)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                        Children;                                          // 0x158(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class USceneComponent*                       RootComponent;                                     // 0x168(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AMatineeActor*>                 ControllingMatineeActors;                          // 0x170(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	float                                        InitialLifeSpan;                                   // 0x180(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_D14[0xC];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          Layers;                                            // 0x190(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                 ParentComponentActor;                              // 0x1A0(0x8)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UChildActorComponent>   ParentComponent;                                   // 0x1A8(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bAllowReceiveTickEventOnDedicatedServer : 1;       // Mask: 0x1, PropSize: 0x10x1B0(0x1)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_85 : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bActorSeamlessTraveled : 1;                        // Mask: 0x10, PropSize: 0x10x1B0(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoresOriginShifting : 1;                        // Mask: 0x20, PropSize: 0x10x1B0(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableAutoLODGeneration : 1;                      // Mask: 0x40, PropSize: 0x10x1B0(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_86 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_D15[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          Tags;                                              // 0x1B8(0x10)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint64                                       HiddenEditorViews;                                 // 0x1C8(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnTakeAnyDamage;                                   // 0x1D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnTakePointDamage;                                 // 0x1E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnActorBeginOverlap;                               // 0x1F0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnActorEndOverlap;                                 // 0x200(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnBeginCursorOver;                                 // 0x210(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnEndCursorOver;                                   // 0x220(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnClicked;                                         // 0x230(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnReleased;                                        // 0x240(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnInputTouchBegin;                                 // 0x250(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnInputTouchEnd;                                   // 0x260(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnInputTouchEnter;                                 // 0x270(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnInputTouchLeave;                                 // 0x280(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnActorHit;                                        // 0x290(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnDestroyed;                                       // 0x2A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnEndPlay;                                         // 0x2B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_D16[0xA0];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UActorComponent*>               BlueprintCreatedComponents;                        // 0x360(0x10)(ExportObject, ZeroConstructor, NonTransactional, ContainsInstancedReference, TextExportTransient, NativeAccessSpecifierPublic)
	TArray<class UActorComponent*>               InstanceComponents;                                // 0x370(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        Pad_D17[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Actor");
		return Clss;
	}

	bool WasRecentlyRendered(float Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor* InParentActor, class FName InSocketName);
	void SetTickGroup(enum class ETickingGroup NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class AActor* NewOwner);
	void SetNetDormancy(enum class ENetDormancy NewDormancy);
	void SetLifeSpan(float InLifespan);
	void SetActorTickInterval(float TickInterval);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, struct FHitResult& HitInfo);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, struct FHitResult& Hit);
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased(const struct FKey& ButtonReleased);
	void ReceiveActorOnInputTouchLeave(enum class ETouchIndex FingerIndex);
	void ReceiveActorOnInputTouchEnter(enum class ETouchIndex FingerIndex);
	void ReceiveActorOnInputTouchEnd(enum class ETouchIndex FingerIndex);
	void ReceiveActorOnInputTouchBegin(enum class ETouchIndex FingerIndex);
	void ReceiveActorOnClicked(const struct FKey& ButtonPressed);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, class FName Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void K2_SetActorRelativeTransform(struct FTransform& NewRelativeTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule);
	void K2_DestroyComponent(class UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class USceneComponent* Parent, class FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void K2_AttachToActor(class AActor* ParentActor, class FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AActor* InParentActor, class FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, class FName InSocketName, enum class EAttachLocation AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorLocalTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	bool IsOverlappingActor(class AActor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AActor* OtherActor);
	enum class ENetRole GetRemoteRole();
	class UChildActorComponent* GetParentComponent();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(TArray<class AActor*>* OverlappingActors, TSubclassOf<class AActor> ClassFilter);
	float GetLifeSpan();
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float GetInputAxisValue(class FName InputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float GetHorizontalDotProductTo(class AActor* OtherActor);
	float GetHorizontalDistanceTo(class AActor* OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AActor* OtherActor);
	float GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(TSubclassOf<class UActorComponent> ComponentClass, class FName Tag);
	TArray<class UActorComponent*> GetComponentsByClass(TSubclassOf<class UActorComponent> ComponentClass);
	class UActorComponent* GetComponentByClass(TSubclassOf<class UActorComponent> ComponentClass);
	class FName GetAttachParentSocketName();
	class AActor* GetAttachParentActor();
	void GetAttachedActors(TArray<class AActor*>* OutActors);
	void GetAllChildActors(TArray<class AActor*>* ChildActors, bool bIncludeDescendants);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController* PlayerController);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* AddComponent(class FName TemplateName, bool bManualAttachment, struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool ActorHasTag(class FName Tag);
};

// 0x0 (0x28 - 0x28)
// Class Engine.BlueprintFunctionLibrary
class UBlueprintFunctionLibrary : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlueprintFunctionLibrary");
		return Clss;
	}

	struct FStringAssetReference MakeStringAssetReference(const class FString& AssetLongPathname);
};

// 0x0 (0x28 - 0x28)
// Class Engine.DataAsset
class UDataAsset : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DataAsset");
		return Clss;
	}

};

// 0xC8 (0xF0 - 0x28)
// Class Engine.ActorComponent
class UActorComponent : public UObject
{
public:
	uint8                                        Pad_D19[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FActorComponentTickFunction           PrimaryComponentTick;                              // 0x30(0x58)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                          ComponentTags;                                     // 0x88(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x98(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                        BitPad_87 : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bReplicates : 1;                                   // Mask: 0x8, PropSize: 0x10xA8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bNetAddressable : 1;                               // Mask: 0x10, PropSize: 0x10xA8(0x1)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_88 : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        BitPad_89 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bCreatedByConstructionScript : 1;                  // Mask: 0x80, PropSize: 0x10xA9(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInstanceComponent : 1;                            // Mask: 0x1, PropSize: 0x10xAA(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoActivate : 1;                                 // Mask: 0x2, PropSize: 0x10xAA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsActive : 1;                                     // Mask: 0x4, PropSize: 0x10xAA(0x1)(Net, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEditableWhenInherited : 1;                        // Mask: 0x8, PropSize: 0x10xAA(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_8A : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bCanEverAffectNavigation : 1;                      // Mask: 0x20, PropSize: 0x10xAA(0x1)(Edit, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_8B : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIsEditorOnly : 1;                                 // Mask: 0x1, PropSize: 0x10xAB(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_8C : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_D1A[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EComponentCreationMethod          CreationMethod;                                    // 0xAD(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D1B[0xA];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSimpleMemberReference>        UCSModifiedProperties;                             // 0xB8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	UMulticastDelegateProperty_                  OnComponentActivated;                              // 0xC8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnComponentDeactivated;                            // 0xD8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_D1C[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActorComponent");
		return Clss;
	}

	void ToggleActive();
	void SetTickGroup(enum class ETickingGroup NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetIsReplicated(bool ShouldReplicate);
	void SetComponentTickInterval(float TickInterval);
	void SetComponentTickEnabled(bool bEnabled);
	void SetAutoActivate(bool bNewAutoActivate);
	void SetActive(bool bNewActive, bool bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(enum class EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject* Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(class FName Tag);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void Activate(bool bReset);
};

// 0x1A0 (0x290 - 0xF0)
// Class Engine.SceneComponent
class USceneComponent : public UActorComponent
{
public:
	class USceneComponent*                       AttachParent;                                      // 0xF0(0x8)(ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class USceneComponent*>               AttachChildren;                                    // 0xF8(0x10)(ExportObject, Net, ZeroConstructor, Transient, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class USceneComponent*>               ClientAttachedChildren;                            // 0x108(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class FName                                  AttachSocketName;                                  // 0x118(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_D48[0x1C];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_8D : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bWorldToComponentUpdated : 1;                      // Mask: 0x2, PropSize: 0x10x13C(0x1)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bAbsoluteLocation : 1;                             // Mask: 0x4, PropSize: 0x10x13C(0x1)(Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAbsoluteRotation : 1;                             // Mask: 0x8, PropSize: 0x10x13C(0x1)(Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAbsoluteScale : 1;                                // Mask: 0x10, PropSize: 0x10x13C(0x1)(Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bVisible : 1;                                      // Mask: 0x20, PropSize: 0x10x13C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHiddenInGame : 1;                                 // Mask: 0x40, PropSize: 0x10x13C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldUpdatePhysicsVolume : 1;                    // Mask: 0x80, PropSize: 0x10x13C(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bBoundsChangeTriggersStreamingDataRebuild : 1;     // Mask: 0x1, PropSize: 0x10x13D(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseAttachParentBound : 1;                         // Mask: 0x2, PropSize: 0x10x13D(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_8E : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAbsoluteTranslation : 1;                          // Mask: 0x40, PropSize: 0x10x13D(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_8F : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EComponentMobility                Mobility;                                          // 0x13E(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDetailMode                       DetailMode;                                        // 0x13F(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               ComponentVelocity;                                 // 0x140(0xC)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class APhysicsVolume>         PhysicsVolume;                                     // 0x14C(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                               RelativeScale3D;                                   // 0x154(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData, RepNotify, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D49[0x50];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               RelativeLocation;                                  // 0x1B0(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              RelativeRotation;                                  // 0x1BC(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_D4A[0x38];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	UMulticastDelegateProperty_                  PhysicsVolumeChangedDelegate;                      // 0x200(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_D4B[0x80];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SceneComponent");
		return Clss;
	}

	void ToggleVisibility(bool bPropagateToChildren);
	bool SnapTo(class USceneComponent* InParent, class FName InSocketName);
	void SetWorldScale3D(const struct FVector& NewScale);
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
	void SetRelativeScale3D(const struct FVector& NewScale3D);
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	void ResetRelativeTransform();
	void OnRep_Visibility(bool OldValue);
	void OnRep_Transform();
	void OnRep_AttachSocketName();
	void OnRep_AttachParent();
	void OnRep_AttachChildren();
	void K2_SetWorldTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetRelativeTransform(struct FTransform& NewTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	struct FTransform K2_GetComponentToWorld();
	struct FVector K2_GetComponentScale();
	struct FRotator K2_GetComponentRotation();
	struct FVector K2_GetComponentLocation();
	void K2_DetachFromComponent(enum class EDetachmentRule LocationRule, enum class EDetachmentRule RotationRule, enum class EDetachmentRule ScaleRule, bool bCallModify);
	bool K2_AttachToComponent(class USceneComponent* Parent, class FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	bool K2_AttachTo(class USceneComponent* InParent, class FName InSocketName, enum class EAttachLocation AttachType, bool bWeldSimulatedBodies);
	void K2_AddWorldTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddLocalTransform(struct FTransform& DeltaTransform, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	void K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, struct FHitResult* SweepHitResult, bool bTeleport);
	bool IsVisible();
	bool IsSimulatingPhysics(class FName BoneName);
	bool IsAnySimulatingPhysics();
	struct FVector GetUpVector();
	struct FTransform GetSocketTransform(class FName InSocketName, enum class ERelativeTransformSpace TransformSpace);
	struct FRotator GetSocketRotation(class FName InSocketName);
	struct FQuat GetSocketQuaternion(class FName InSocketName);
	struct FVector GetSocketLocation(class FName InSocketName);
	struct FVector GetRightVector();
	struct FTransform GetRelativeTransform();
	class APhysicsVolume* GetPhysicsVolume();
	void GetParentComponents(TArray<class USceneComponent*>* Parents);
	int32 GetNumChildrenComponents();
	struct FVector GetForwardVector();
	struct FVector GetComponentVelocity();
	void GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
	class USceneComponent* GetChildComponent(int32 ChildIndex);
	class FName GetAttachSocketName();
	class USceneComponent* GetAttachParent();
	TArray<class FName> GetAllSocketNames();
	bool DoesSocketExist(class FName InSocketName);
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);
};

// 0x3E0 (0x670 - 0x290)
// Class Engine.PrimitiveComponent
class UPrimitiveComponent : public USceneComponent
{
public:
	uint8                                        Pad_D74[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinDrawDistance;                                   // 0x298(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LDMaxDrawDistance;                                 // 0x29C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CachedMaxDrawDistance;                             // 0x2A0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESceneDepthPriorityGroup          DepthPriorityGroup;                                // 0x2A4(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESceneDepthPriorityGroup          ViewOwnerDepthPriorityGroup;                       // 0x2A5(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EIndirectLightingCacheQuality     IndirectLightingCacheQuality;                      // 0x2A6(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_90 : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAlwaysCreatePhysicsState : 1;                     // Mask: 0x8, PropSize: 0x10x2A7(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGenerateOverlapEvents : 1;                        // Mask: 0x10, PropSize: 0x10x2A7(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMultiBodyOverlap : 1;                             // Mask: 0x20, PropSize: 0x10x2A7(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCheckAsyncSceneOnMove : 1;                        // Mask: 0x40, PropSize: 0x10x2A7(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTraceComplexOnMove : 1;                           // Mask: 0x80, PropSize: 0x10x2A7(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bReturnMaterialOnMove : 1;                         // Mask: 0x1, PropSize: 0x10x2A8(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseViewOwnerDepthPriorityGroup : 1;               // Mask: 0x2, PropSize: 0x10x2A8(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowCullDistanceVolume : 1;                      // Mask: 0x4, PropSize: 0x10x2A8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasMotionBlurVelocityMeshes : 1;                  // Mask: 0x8, PropSize: 0x10x2A8(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bVisibleInReflectionCaptures : 1;                  // Mask: 0x10, PropSize: 0x10x2A8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRenderInMainPass : 1;                             // Mask: 0x20, PropSize: 0x10x2A8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRenderInMono : 1;                                 // Mask: 0x40, PropSize: 0x10x2A8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bReceivesDecals : 1;                               // Mask: 0x80, PropSize: 0x10x2A8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOwnerNoSee : 1;                                   // Mask: 0x1, PropSize: 0x10x2A9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOnlyOwnerSee : 1;                                 // Mask: 0x2, PropSize: 0x10x2A9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTreatAsBackgroundForOcclusion : 1;                // Mask: 0x4, PropSize: 0x10x2A9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseAsOccluder : 1;                                // Mask: 0x8, PropSize: 0x10x2A9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSelectable : 1;                                   // Mask: 0x10, PropSize: 0x10x2A9(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceMipStreaming : 1;                            // Mask: 0x20, PropSize: 0x10x2A9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasPerInstanceHitProxies : 1;                     // Mask: 0x40, PropSize: 0x10x2A9(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        CastShadow : 1;                                    // Mask: 0x80, PropSize: 0x10x2A9(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAffectDynamicIndirectLighting : 1;                // Mask: 0x1, PropSize: 0x10x2AA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAffectDistanceFieldLighting : 1;                  // Mask: 0x2, PropSize: 0x10x2AA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastDynamicShadow : 1;                            // Mask: 0x4, PropSize: 0x10x2AA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastStaticShadow : 1;                             // Mask: 0x8, PropSize: 0x10x2AA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastVolumetricTranslucentShadow : 1;              // Mask: 0x10, PropSize: 0x10x2AA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSelfShadowOnly : 1;                               // Mask: 0x20, PropSize: 0x10x2AA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastFarShadow : 1;                                // Mask: 0x40, PropSize: 0x10x2AA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastInsetShadow : 1;                              // Mask: 0x80, PropSize: 0x10x2AA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastCinematicShadow : 1;                          // Mask: 0x1, PropSize: 0x10x2AB(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastHiddenShadow : 1;                             // Mask: 0x2, PropSize: 0x10x2AB(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastShadowAsTwoSided : 1;                         // Mask: 0x4, PropSize: 0x10x2AB(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLightAsIfStatic : 1;                              // Mask: 0x8, PropSize: 0x10x2AB(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLightAttachmentsAsGroup : 1;                      // Mask: 0x10, PropSize: 0x10x2AB(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bReceiveCombinedCSMAndStaticShadowsFromStationaryLights : 1; // Mask: 0x20, PropSize: 0x10x2AB(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSingleSampleShadowFromStationaryLights : 1;       // Mask: 0x40, PropSize: 0x10x2AB(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreRadialImpulse : 1;                          // Mask: 0x80, PropSize: 0x10x2AB(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreRadialForce : 1;                            // Mask: 0x1, PropSize: 0x10x2AC(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        AlwaysLoadOnClient : 1;                            // Mask: 0x2, PropSize: 0x10x2AC(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        AlwaysLoadOnServer : 1;                            // Mask: 0x4, PropSize: 0x10x2AC(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseEditorCompositing : 1;                         // Mask: 0x8, PropSize: 0x10x2AC(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRenderCustomDepth : 1;                            // Mask: 0x10, PropSize: 0x10x2AC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_91 : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EHasCustomNavigableGeometry       bHasCustomNavigableGeometry;                       // 0x2AD(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECanBeCharacterBase               CanBeCharacterBase;                                // 0x2AE(0x1)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_D75[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ECanBeCharacterBase               CanCharacterStepUpOn;                              // 0x2B0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightingChannels                     LightingChannels;                                  // 0x2B1(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                        Pad_D76[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        CustomDepthStencilValue;                           // 0x2B4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        TranslucencySortPriority;                          // 0x2B8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        VisibilityId;                                      // 0x2BC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D77[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LpvBiasMultiplier;                                 // 0x2C4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D78[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BoundsScale;                                       // 0x2D0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LastSubmitTime;                                    // 0x2D4(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LastRenderTime;                                    // 0x2D8(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LastRenderTimeOnScreen;                            // 0x2DC(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                        MoveIgnoreActors;                                  // 0x2E0(0x10)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>           MoveIgnoreComponents;                              // 0x2F0(0x10)(ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_D79[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBodyInstance                         BodyInstance;                                      // 0x310(0x220)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnComponentHit;                                    // 0x530(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnComponentBeginOverlap;                           // 0x540(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnComponentEndOverlap;                             // 0x550(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnComponentWake;                                   // 0x560(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnComponentSleep;                                  // 0x570(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnBeginCursorOver;                                 // 0x580(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnEndCursorOver;                                   // 0x590(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnClicked;                                         // 0x5A0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnReleased;                                        // 0x5B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnInputTouchBegin;                                 // 0x5C0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnInputTouchEnd;                                   // 0x5D0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnInputTouchEnter;                                 // 0x5E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnInputTouchLeave;                                 // 0x5F0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_D7A[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPrimitiveComponent*                   LODParentPrimitive;                                // 0x610(0x8)(ExportObject, ZeroConstructor, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;                          // 0x618(0x58)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PrimitiveComponent");
		return Clss;
	}

	void WakeRigidBody(class FName BoneName);
	void WakeAllRigidBodies();
	void SetWalkableSlopeOverride(struct FWalkableSlopeOverride& NewOverride);
	void SetTranslucentSortPriority(int32 NewTranslucentSortPriority);
	void SetSimulatePhysics(bool bSimulate);
	void SetRenderInMono(bool bValue);
	void SetRenderInMainPass(bool bValue);
	void SetRenderCustomDepth(bool bValue);
	void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, class FName BoneName);
	void SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, class FName BoneName);
	void SetPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent, class FName BoneName);
	void SetOwnerNoSee(bool bNewOwnerNoSee);
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
	void SetMaterialByName(class FName MaterialSlotName, class UMaterialInterface* Material);
	void SetMaterial(int32 ElementIndex, class UMaterialInterface* Material);
	void SetMassScale(class FName BoneName, float InMassScale);
	void SetMassOverrideInKg(class FName BoneName, float MassInKg, bool bOverrideMass);
	void SetLockedAxis(enum class EDOFMode LockedAxis);
	void SetLinearDamping(float InDamping);
	void SetEnableGravity(bool bGravityEnabled);
	void SetCustomDepthStencilValue(int32 Value);
	void SetCullDistance(float NewCullDistance);
	void SetConstraintMode(enum class EDOFMode ConstraintMode);
	void SetCollisionResponseToChannel(enum class ECollisionChannel Channel, enum class ECollisionResponse NewResponse);
	void SetCollisionResponseToAllChannels(enum class ECollisionResponse NewResponse);
	void SetCollisionProfileName(class FName InCollisionProfileName);
	void SetCollisionObjectType(enum class ECollisionChannel Channel);
	void SetCollisionEnabled(enum class ECollisionEnabled NewType);
	void SetCenterOfMass(const struct FVector& CenterOfMassOffset, class FName BoneName);
	void SetCastShadow(bool NewCastShadow);
	void SetBoundsScale(float NewBoundsScale);
	void SetAngularDamping(float InDamping);
	void SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent);
	void SetAllMassScale(float InMassScale);
	struct FVector ScaleByMomentOfInertia(const struct FVector& InputVector, class FName BoneName);
	void PutRigidBodyToSleep(class FName BoneName);
	bool K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, class FName* BoneName, struct FHitResult* OutHit);
	bool K2_IsQueryCollisionEnabled();
	bool K2_IsPhysicsCollisionEnabled();
	bool K2_IsCollisionEnabled();
	bool IsOverlappingComponent(class UPrimitiveComponent* OtherComp);
	bool IsOverlappingActor(class AActor* Other);
	bool IsGravityEnabled();
	bool IsAnyRigidBodyAwake();
	void IgnoreComponentWhenMoving(class UPrimitiveComponent* Component, bool bShouldIgnore);
	void IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore);
	struct FWalkableSlopeOverride GetWalkableSlopeOverride();
	struct FVector GetPhysicsLinearVelocityAtPoint(const struct FVector& Point, class FName BoneName);
	struct FVector GetPhysicsLinearVelocity(class FName BoneName);
	struct FVector GetPhysicsAngularVelocity(class FName BoneName);
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* InOverlappingComponents);
	void GetOverlappingActors(TArray<class AActor*>* OverlappingActors, TSubclassOf<class AActor> ClassFilter);
	TArray<struct FOverlapInfo> GetOverlapInfos();
	int32 GetNumMaterials();
	class UMaterialInterface* GetMaterial(int32 ElementIndex);
	float GetMassScale(class FName BoneName);
	float GetMass();
	float GetLinearDamping();
	struct FVector GetInertiaTensor(class FName BoneName);
	enum class ECollisionResponse GetCollisionResponseToChannel(enum class ECollisionChannel Channel);
	class FName GetCollisionProfileName();
	enum class ECollisionChannel GetCollisionObjectType();
	enum class ECollisionEnabled GetCollisionEnabled();
	float GetClosestPointOnCollision(struct FVector& Point, struct FVector* OutPointOnBody, class FName BoneName);
	struct FVector GetCenterOfMass(class FName BoneName);
	float GetAngularDamping();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int32 ElementIndex, class UMaterialInterface* SourceMaterial);
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int32 ElementIndex, class UMaterialInterface* Parent);
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int32 ElementIndex);
	TArray<class UPrimitiveComponent*> CopyArrayOfMoveIgnoreComponents();
	TArray<class AActor*> CopyArrayOfMoveIgnoreActors();
	void ClearMoveIgnoreComponents();
	void ClearMoveIgnoreActors();
	bool CanCharacterStepUp(class APawn* Pawn);
	void AddTorque(const struct FVector& Torque, class FName BoneName, bool bAccelChange);
	void AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bVelChange);
	void AddRadialForce(const struct FVector& Origin, float Radius, float Strength, enum class ERadialImpulseFalloff Falloff, bool bAccelChange);
	void AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, class FName BoneName);
	void AddImpulse(const struct FVector& Impulse, class FName BoneName, bool bVelChange);
	void AddForceAtLocation(const struct FVector& Force, const struct FVector& Location, class FName BoneName);
	void AddForce(const struct FVector& Force, class FName BoneName, bool bAccelChange);
	void AddAngularImpulse(const struct FVector& Impulse, class FName BoneName, bool bVelChange);
};

// 0x0 (0x28 - 0x28)
// Class Engine.PrimaryDataAsset
class UPrimaryDataAsset : public UDataAsset
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PrimaryDataAsset");
		return Clss;
	}

};

// 0x0 (0x388 - 0x388)
// Class Engine.Info
class AInfo : public AActor
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Info");
		return Clss;
	}

};

// 0x1A8 (0x530 - 0x388)
// Class Engine.WorldSettings
class AWorldSettings : public AInfo
{
public:
	uint8                                        Pad_D7B[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bEnableWorldBoundsChecks : 1;                      // Mask: 0x1, PropSize: 0x10x390(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableNavigationSystem : 1;                       // Mask: 0x2, PropSize: 0x10x390(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableAISystem : 1;                               // Mask: 0x4, PropSize: 0x10x390(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableWorldComposition : 1;                       // Mask: 0x8, PropSize: 0x10x390(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseClientSideLevelStreamingVolumes : 1;           // Mask: 0x10, PropSize: 0x10x390(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableWorldOriginRebasing : 1;                    // Mask: 0x20, PropSize: 0x10x390(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bWorldGravitySet : 1;                              // Mask: 0x40, PropSize: 0x10x390(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGlobalGravitySet : 1;                             // Mask: 0x80, PropSize: 0x10x390(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D7C[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        KillZ;                                             // 0x394(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>               KillZDamageType;                                   // 0x398(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WorldGravityZ;                                     // 0x3A0(0x4)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GlobalGravityZ;                                    // 0x3A4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ADefaultPhysicsVolume>     DefaultPhysicsVolumeClass;                         // 0x3A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPhysicsCollisionHandler>  PhysicsCollisionHandlerClass;                      // 0x3B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameModeBase>             DefaultGameMode;                                   // 0x3B8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameNetworkManager>       GameNetworkManagerClass;                           // 0x3C0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PackedLightAndShadowMapTextureSize;                // 0x3C8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMinimizeBSPSections : 1;                          // Mask: 0x1, PropSize: 0x10x3CC(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_92 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_D7D[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               DefaultColorScale;                                 // 0x3D0(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DefaultMaxDistanceFieldOcclusionDistance;          // 0x3DC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GlobalDistanceFieldViewDistance;                   // 0x3E0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DynamicIndirectShadowsSelfShadowingIntensity;      // 0x3E4(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPrecomputeVisibility : 1;                         // Mask: 0x1, PropSize: 0x10x3E8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPlaceCellsOnlyAlongCameraTracks : 1;              // Mask: 0x2, PropSize: 0x10x3E8(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_93 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_D7E[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        VisibilityCellSize;                                // 0x3EC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EVisibilityAggressiveness         VisibilityAggressiveness;                          // 0x3F0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D7F[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bForceNoPrecomputedLighting : 1;                   // Mask: 0x1, PropSize: 0x10x3F4(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_94 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_D80[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLightmassWorldInfoSettings           LightmassSettings;                                 // 0x3F8(0x44)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_D81[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FReverbSettings                       DefaultReverbSettings;                             // 0x440(0x18)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FInteriorSettings                     DefaultAmbientZoneSettings;                        // 0x458(0x24)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_D82[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundMix*                             DefaultBaseSoundMix;                               // 0x480(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WorldToMeters;                                     // 0x488(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MonoCullingDistance;                               // 0x48C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBookMark*                             BookMarks;                                         // 0x490(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D83[0x48];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeDilation;                                      // 0x4E0(0x4)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MatineeTimeDilation;                               // 0x4E4(0x4)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DemoPlayTimeDilation;                              // 0x4E8(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinGlobalTimeDilation;                             // 0x4EC(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxGlobalTimeDilation;                             // 0x4F0(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinUndilatedFrameTime;                             // 0x4F4(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxUndilatedFrameTime;                             // 0x4F8(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D84[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerState*                          Pauser;                                            // 0x500(0x8)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHighPriorityLoading : 1;                          // Mask: 0x1, PropSize: 0x10x508(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHighPriorityLoadingLocal : 1;                     // Mask: 0x2, PropSize: 0x10x508(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_95 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_D85[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FNetViewer>                    ReplicationViewers;                                // 0x510(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x520(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldSettings");
		return Clss;
	}

	void OnRep_WorldGravityZ();
};

// 0x108 (0x778 - 0x670)
// Class Engine.MeshComponent
class UMeshComponent : public UPrimitiveComponent
{
public:
	TArray<class UMaterialInterface*>            OverrideMaterials;                                 // 0x670(0x10)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                        Pad_D8A[0xF8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MeshComponent");
		return Clss;
	}

	void SetVectorParameterValueOnMaterials(class FName ParameterName, const struct FVector& ParameterValue);
	void SetScalarParameterValueOnMaterials(class FName ParameterName, float ParameterValue);
	bool IsMaterialSlotNameValid(class FName MaterialSlotName);
	TArray<class FName> GetMaterialSlotNames();
	TArray<class UMaterialInterface*> GetMaterials();
	int32 GetMaterialIndex(class FName MaterialSlotName);
};

// 0x68 (0x7E0 - 0x778)
// Class Engine.StaticMeshComponent
class UStaticMeshComponent : public UMeshComponent
{
public:
	int32                                        ForcedLodModel;                                    // 0x778(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PreviousLODLevel;                                  // 0x77C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MinLOD;                                            // 0x780(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SubDivisionStepSize;                               // 0x784(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                           StaticMesh;                                        // 0x788(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                WireframeColorOverride;                            // 0x790(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideWireframeColor : 1;                       // Mask: 0x1, PropSize: 0x10x794(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideMinLOD : 1;                               // Mask: 0x2, PropSize: 0x10x794(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideNavigationExport : 1;                     // Mask: 0x4, PropSize: 0x10x794(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceNavigationObstacle : 1;                      // Mask: 0x8, PropSize: 0x10x794(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisallowMeshPaintPerInstance : 1;                 // Mask: 0x10, PropSize: 0x10x794(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreInstanceForTextureStreaming : 1;            // Mask: 0x20, PropSize: 0x10x794(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideLightMapRes : 1;                          // Mask: 0x40, PropSize: 0x10x794(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastDistanceFieldIndirectShadow : 1;              // Mask: 0x80, PropSize: 0x10x794(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideDistanceFieldSelfShadowBias : 1;          // Mask: 0x1, PropSize: 0x10x795(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseSubDivisions : 1;                              // Mask: 0x2, PropSize: 0x10x795(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseDefaultCollision : 1;                          // Mask: 0x4, PropSize: 0x10x795(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_96 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_D8C[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        OverriddenLightMapRes;                             // 0x798(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceFieldIndirectShadowMinVisibility;          // 0x79C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceFieldSelfShadowBias;                       // 0x7A0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StreamingDistanceMultiplier;                       // 0x7A4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStaticMeshComponentLODInfo>   LODData;                                           // 0x7A8(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FStreamingTextureBuildInfo>    StreamingTextureData;                              // 0x7B8(0x10)(ZeroConstructor, NonTransactional, NativeAccessSpecifierPublic)
	struct FLightmassPrimitiveSettings           LightmassSettings;                                 // 0x7C8(0x18)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StaticMeshComponent");
		return Clss;
	}

	bool SetStaticMesh(class UStaticMesh* NewMesh);
	void SetForcedLodModel(int32 NewForcedLodModel);
	void SetDistanceFieldSelfShadowBias(float NewValue);
	void OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);
	void GetLocalBounds(struct FVector* Min, struct FVector* Max);
};

// 0x60 (0x3E8 - 0x388)
// Class Engine.Pawn
class APawn : public AActor
{
public:
	uint8                                        Pad_D90[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseControllerRotationPitch : 1;                   // Mask: 0x1, PropSize: 0x10x390(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseControllerRotationYaw : 1;                     // Mask: 0x2, PropSize: 0x10x390(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseControllerRotationRoll : 1;                    // Mask: 0x4, PropSize: 0x10x390(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCanAffectNavigationGeneration : 1;                // Mask: 0x8, PropSize: 0x10x390(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_97 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_D91[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BaseEyeHeight;                                     // 0x394(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAutoReceiveInput                 AutoPossessPlayer;                                 // 0x398(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAutoPossessAI                    AutoPossessAI;                                     // 0x399(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D92[0x6];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class AController>               AIControllerClass;                                 // 0x3A0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                          PlayerState;                                       // 0x3A8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        RemoteViewPitch;                                   // 0x3B0(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D93[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class AController*                           LastHitBy;                                         // 0x3B8(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                           Controller;                                        // 0x3C0(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_D94[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               ControlInputVector;                                // 0x3D0(0xC)(Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               LastControlInputVector;                            // 0x3DC(0xC)(Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Pawn");
		return Clss;
	}

	void SpawnDefaultController();
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);
	void ReceiveUnpossessed(class AController* OldController);
	void ReceivePossessed(class AController* NewController);
	void PawnMakeNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker);
	void OnRep_PlayerState();
	void OnRep_Controller();
	void LaunchPawn(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	struct FVector K2_GetMovementInputVector();
	bool IsPlayerControlled();
	bool IsMoveInputIgnored();
	bool IsLocallyControlled();
	bool IsControlled();
	struct FVector GetPendingMovementInputVector();
	struct FVector GetNavAgentLocation();
	class UPawnMovementComponent* GetMovementComponent();
	class AActor* GetMovementBaseActor(class APawn* Pawn);
	struct FVector GetLastMovementInputVector();
	struct FRotator GetControlRotation();
	class AController* GetController();
	struct FRotator GetBaseAimRotation();
	void DetachFromControllerPendingDestroy();
	struct FVector ConsumeMovementInputVector();
	void AddMovementInput(const struct FVector& WorldDirection, float ScaleValue, bool bForce);
	void AddControllerYawInput(float Val);
	void AddControllerRollInput(float Val);
	void AddControllerPitchInput(float Val);
};

// 0x3B8 (0x7A0 - 0x3E8)
// Class Engine.Character
class ACharacter : public APawn
{
public:
	class USkeletalMeshComponent*                Mesh;                                              // 0x3E8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCharacterMovementComponent*           CharacterMovement;                                 // 0x3F0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCapsuleComponent*                     CapsuleComponent;                                  // 0x3F8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FBasedMovementInfo                    BasedMovement;                                     // 0x400(0x30)(NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FBasedMovementInfo                    ReplicatedBasedMovement;                           // 0x430(0x30)(Net, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                        AnimRootMotionTranslationScale;                    // 0x460(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               BaseTranslationOffset;                             // 0x464(0xC)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FQuat                                 BaseRotationOffset;                                // 0x470(0x10)(IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                        ReplicatedServerLastTransformUpdateTimeStamp;      // 0x480(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        ReplicatedMovementMode;                            // 0x484(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bInBaseReplication;                                // 0x485(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_DB3[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CrouchedEyeHeight;                                 // 0x488(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsCrouched : 1;                                   // Mask: 0x1, PropSize: 0x10x48C(0x1)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPressedJump : 1;                                  // Mask: 0x2, PropSize: 0x10x48C(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClientUpdating : 1;                               // Mask: 0x4, PropSize: 0x10x48C(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClientWasFalling : 1;                             // Mask: 0x8, PropSize: 0x10x48C(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClientResimulateRootMotion : 1;                   // Mask: 0x10, PropSize: 0x10x48C(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClientResimulateRootMotionSources : 1;            // Mask: 0x20, PropSize: 0x10x48C(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSimGravityDisabled : 1;                           // Mask: 0x40, PropSize: 0x10x48C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClientCheckEncroachmentOnNetUpdate : 1;           // Mask: 0x80, PropSize: 0x10x48C(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bServerMoveIgnoreRootMotion : 1;                   // Mask: 0x1, PropSize: 0x10x48D(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_98 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_DB4[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        JumpKeyHoldTime;                                   // 0x490(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        JumpMaxHoldTime;                                   // 0x494(0x4)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        JumpMaxCount;                                      // 0x498(0x4)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        JumpCurrentCount;                                  // 0x49C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_99 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bWasJumping : 1;                                   // Mask: 0x2, PropSize: 0x10x4A0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_9A : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_DB5[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	UMulticastDelegateProperty_                  OnReachedJumpApex;                                 // 0x4A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_DB6[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	UMulticastDelegateProperty_                  MovementModeChangedDelegate;                       // 0x4C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnCharacterMovementUpdated;                        // 0x4D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FRootMotionSourceGroup                SavedRootMotion;                                   // 0x4E8(0x100)(Transient, NativeAccessSpecifierPublic)
	uint8                                        Pad_DB7[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRootMotionMovementParams             ClientRootMotionParams;                            // 0x5F0(0x40)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSimulatedRootMotionReplicatedMove> RootMotionRepMoves;                                // 0x630(0x10)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRepRootMotionMontage                 RepRootMotion;                                     // 0x640(0x160)(Net, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Character");
		return Clss;
	}

	void UnCrouch(bool bClientSimulation);
	void StopJumping();
	void StopAnimMontage(class UAnimMontage* AnimMontage);
	void SetReplicateMovement(bool bInReplicateMovement);
	void ServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize10& OldAccel, uint8 OldMoveFlags);
	void ServerMoveNoBase(float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, uint8 ClientMovementMode);
	void ServerMoveDualNoBase(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, uint8 ClientMovementMode);
	void ServerMoveDualHybridRootMotion(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, class UPrimitiveComponent* ClientMovementBase, class FName ClientBaseBoneName, uint8 ClientMovementMode);
	void ServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, uint8 PendingFlags, uint32 View0, float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, uint8 NewFlags, uint8 ClientRoll, uint32 View, class UPrimitiveComponent* ClientMovementBase, class FName ClientBaseBoneName, uint8 ClientMovementMode);
	void ServerMove(float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, uint8 CompressedMoveFlags, uint8 ClientRoll, uint32 View, class UPrimitiveComponent* ClientMovementBase, class FName ClientBaseBoneName, uint8 ClientMovementMode);
	float PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, class FName StartSectionName);
	void OnWalkingOffLedge(struct FVector& PreviousFloorImpactNormal, struct FVector& PreviousFloorContactNormal, struct FVector& PreviousLocation, float TimeDelta);
	void OnRep_RootMotion();
	void OnRep_ReplicatedBasedMovement();
	void OnRep_IsCrouched();
	void OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void OnLanded(struct FHitResult& Hit);
	void OnJumped();
	void LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void K2_UpdateCustomMovement(float DeltaTime);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnMovementModeChanged(enum class EMovementMode PrevMovementMode, enum class EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void Jump();
	bool IsPlayingRootMotion();
	bool IsPlayingNetworkedRootMotionMontage();
	bool IsJumpProvidingForce();
	class UAnimMontage* GetCurrentMontage();
	struct FVector GetBaseTranslationOffset();
	struct FRotator GetBaseRotationOffsetRotator();
	float GetAnimRootMotionTranslationScale();
	void Crouch(bool bClientSimulation);
	void ClientVeryShortAdjustPosition(float TimeStamp, const struct FVector& NewLoc, class UPrimitiveComponent* NewBase, class FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode);
	void ClientCheatWalk();
	void ClientCheatGhost();
	void ClientCheatFly();
	void ClientAdjustRootMotionSourcePosition(float TimeStamp, const struct FRootMotionSourceGroup& ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, class FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode);
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, class FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode);
	void ClientAdjustPosition(float TimeStamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, class FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, uint8 ServerMovementMode);
	void ClientAckGoodMove(float TimeStamp);
	bool CanJumpInternal();
	bool CanJump();
};

// 0x68 (0x3F0 - 0x388)
// Class Engine.Controller
class AController : public AActor
{
public:
	uint8                                        Pad_DBB[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class APawn*                                 Pawn;                                              // 0x390(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_DBC[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class ACharacter*                            Character;                                         // 0x3A0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class APlayerState*                          PlayerState;                                       // 0x3A8(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                       TransformComponent;                                // 0x3B0(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              ControlRotation;                                   // 0x3B8(0xC)(IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        bAttachToPawn : 1;                                 // Mask: 0x1, PropSize: 0x10x3C4(0x1)(Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bIsPlayerController : 1;                           // Mask: 0x2, PropSize: 0x10x3C4(0x1)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_9B : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_DBD[0x13];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  StateName;                                         // 0x3D8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnInstigatedAnyDamage;                             // 0x3E0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Controller");
		return Clss;
	}

	void UnPossess();
	void StopMovement();
	void SetInitialLocationAndRotation(struct FVector& NewLocation, struct FRotator& NewRotation);
	void SetIgnoreMoveInput(bool bNewMoveInput);
	void SetIgnoreLookInput(bool bNewLookInput);
	void SetControlRotation(struct FRotator& NewRotation);
	void ResetIgnoreMoveInput();
	void ResetIgnoreLookInput();
	void ResetIgnoreInputFlags();
	void ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser);
	void Possess(class APawn* InPawn);
	void OnRep_PlayerState();
	void OnRep_Pawn();
	bool LineOfSightTo(class AActor* Other, const struct FVector& ViewPoint, bool bAlternateChecks);
	class APawn* K2_GetPawn();
	bool IsPlayerController();
	bool IsMoveInputIgnored();
	bool IsLookInputIgnored();
	bool IsLocalPlayerController();
	bool IsLocalController();
	class AActor* GetViewTarget();
	struct FRotator GetDesiredRotation();
	struct FRotator GetControlRotation();
	void ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera);
	void ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	class APlayerController* CastToPlayerController();
};

// 0x20 (0x48 - 0x28)
// Class Engine.AISystemBase
class UAISystemBase : public UObject
{
public:
	struct FStringClassReference                 AISystemClassName;                                 // 0x28(0x10)(Config, GlobalConfig, NoClear, NativeAccessSpecifierPrivate)
	class FName                                  AISystemModuleName;                                // 0x38(0x8)(ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bInstantiateAISystemOnClient;                      // 0x40(0x1)(ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_DBE[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AISystemBase");
		return Clss;
	}

};

// 0x330 (0x358 - 0x28)
// Class Engine.AnimInstance
class UAnimInstance : public UObject
{
public:
	float                                        DeltaTime;                                         // 0x28(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_DD3[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeleton*                             CurrentSkeleton;                                   // 0x30(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERootMotionMode                   RootMotionMode;                                    // 0x38(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRunUpdatesInWorkerThreads;                        // 0x39(0x1)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCanUseParallelUpdateAnimation;                    // 0x3A(0x1)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseMultiThreadedAnimationUpdate;                  // 0x3B(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bWarnAboutBlueprintUsage;                          // 0x3C(0x1)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_DD4[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	UMulticastDelegateProperty_                  OnMontageBlendingOut;                              // 0x40(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnMontageStarted;                                  // 0x50(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnMontageEnded;                                    // 0x60(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnAllMontageInstancesEnded;                        // 0x70(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_DD5[0x60];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bQueueMontageEvents;                               // 0xE0(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_DD6[0x9F];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FAnimNotifyEvent>              ActiveAnimNotifyState;                             // 0x180(0x10)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_DD7[0x1C8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimInstance");
		return Clss;
	}

	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);
	class APawn* TryGetPawnOwner();
	void StopSlotAnimation(float InBlendOutTime, class FName SlotNodeName);
	void SnapshotPose(struct FPoseSnapshot& Snapshot);
	void SetRootMotionMode(enum class ERootMotionMode Value);
	void SetMorphTarget(class FName MorphTargetName, float Value);
	void SavePoseSnapshot(class FName SnapshotName);
	class UAnimMontage* PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* Asset, class FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);
	float PlaySlotAnimation(class UAnimSequenceBase* Asset, class FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount);
	void Montage_Stop(float InBlendOutTime, class UAnimMontage* Montage);
	void Montage_SetPosition(class UAnimMontage* Montage, float NewPosition);
	void Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate);
	void Montage_SetNextSection(class FName SectionNameToChange, class FName NextSection, class UAnimMontage* Montage);
	void Montage_Resume(class UAnimMontage* Montage);
	float Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate, enum class EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt);
	void Montage_Pause(class UAnimMontage* Montage);
	void Montage_JumpToSectionsEnd(class FName SectionName, class UAnimMontage* Montage);
	void Montage_JumpToSection(class FName SectionName, class UAnimMontage* Montage);
	bool Montage_IsPlaying(class UAnimMontage* Montage);
	bool Montage_IsActive(class UAnimMontage* Montage);
	float Montage_GetPosition(class UAnimMontage* Montage);
	float Montage_GetPlayRate(class UAnimMontage* Montage);
	bool Montage_GetIsStopped(class UAnimMontage* Montage);
	class FName Montage_GetCurrentSection(class UAnimMontage* Montage);
	float Montage_GetBlendTime(class UAnimMontage* Montage);
	void LockAIResources(bool bLockMovement, bool LockAILogic);
	bool IsSyncGroupBetweenMarkers(class FName InSyncGroupName, class FName PreviousMarker, class FName NextMarker, bool bRespectMarkerOrder);
	bool IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, class FName SlotNodeName);
	bool IsAnyMontagePlaying();
	bool HasMarkerBeenHitThisFrame(class FName SyncGroup, class FName MarkerName);
	bool GetTimeToClosestMarker(class FName SyncGroup, class FName MarkerName, float* OutMarkerTime);
	struct FMarkerSyncAnimPosition GetSyncGroupPosition(class FName InSyncGroupName);
	float GetStateWeight(int32 MachineIndex, int32 StateIndex);
	float GetRelevantAnimTimeRemainingFraction(int32 MachineIndex, int32 StateIndex);
	float GetRelevantAnimTimeRemaining(int32 MachineIndex, int32 StateIndex);
	float GetRelevantAnimTimeFraction(int32 MachineIndex, int32 StateIndex);
	float GetRelevantAnimTime(int32 MachineIndex, int32 StateIndex);
	float GetRelevantAnimLength(int32 MachineIndex, int32 StateIndex);
	class USkeletalMeshComponent* GetOwningComponent();
	class AActor* GetOwningActor();
	float GetInstanceTransitionTimeElapsedFraction(int32 MachineIndex, int32 TransitionIndex);
	float GetInstanceTransitionTimeElapsed(int32 MachineIndex, int32 TransitionIndex);
	float GetInstanceTransitionCrossfadeDuration(int32 MachineIndex, int32 TransitionIndex);
	float GetInstanceStateWeight(int32 MachineIndex, int32 StateIndex);
	float GetInstanceMachineWeight(int32 MachineIndex);
	float GetInstanceCurrentStateElapsedTime(int32 MachineIndex);
	float GetInstanceAssetPlayerTimeFromEndFraction(int32 AssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFromEnd(int32 AssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFraction(int32 AssetPlayerIndex);
	float GetInstanceAssetPlayerTime(int32 AssetPlayerIndex);
	float GetInstanceAssetPlayerLength(int32 AssetPlayerIndex);
	float GetCurveValue(class FName CurveName);
	class FName GetCurrentStateName(int32 MachineIndex);
	float GetCurrentStateElapsedTime(int32 MachineIndex);
	class UAnimMontage* GetCurrentActiveMontage();
	float GetAnimAssetPlayerTimeFromEndFraction(class UAnimationAsset* AnimAsset, float CurrentTime);
	float GetAnimAssetPlayerTimeFromEnd(class UAnimationAsset* AnimAsset, float CurrentTime);
	float GetAnimAssetPlayerTimeFraction(class UAnimationAsset* AnimAsset, float CurrentTime);
	float GetAnimAssetPlayerLength(class UAnimationAsset* AnimAsset);
	void ClearMorphTargets();
	float CalculateDirection(struct FVector& Velocity, struct FRotator& BaseRotation);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintPostEvaluateAnimation();
	void BlueprintInitializeAnimation();
};

// 0x0 (0x28 - 0x28)
// Class Engine.BlueprintAsyncActionBase
class UBlueprintAsyncActionBase : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlueprintAsyncActionBase");
		return Clss;
	}

	void Activate();
};

// 0xC60 (0xC88 - 0x28)
// Class Engine.Engine
class UEngine : public UObject
{
public:
	uint8                                        Pad_DD8[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UFont*                                 TinyFont;                                          // 0x30(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FStringAssetReference                 TinyFontName;                                      // 0x38(0x10)(Edit, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                 SmallFont;                                         // 0x48(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FStringAssetReference                 SmallFontName;                                     // 0x50(0x10)(Edit, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                 MediumFont;                                        // 0x60(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FStringAssetReference                 MediumFontName;                                    // 0x68(0x10)(Edit, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                 LargeFont;                                         // 0x78(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FStringAssetReference                 LargeFontName;                                     // 0x80(0x10)(Edit, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                 SubtitleFont;                                      // 0x90(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FStringAssetReference                 SubtitleFontName;                                  // 0x98(0x10)(Edit, Config, GlobalConfig, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFont*>                         AdditionalFonts;                                   // 0xA8(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_DD9[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        AdditionalFontNames;                               // 0xC0(0x10)(Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay, NativeAccessSpecifierPublic)
	TSubclassOf<class UConsole>                  ConsoleClass;                                      // 0xD0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringClassReference                 ConsoleClassName;                                  // 0xD8(0x10)(Edit, Config, GlobalConfig, NoClear, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameViewportClient>       GameViewportClientClass;                           // 0xE8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringClassReference                 GameViewportClientClassName;                       // 0xF0(0x10)(Edit, Config, GlobalConfig, NoClear, NativeAccessSpecifierPublic)
	TSubclassOf<class ULocalPlayer>              LocalPlayerClass;                                  // 0x100(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringClassReference                 LocalPlayerClassName;                              // 0x108(0x10)(Edit, Config, GlobalConfig, NoClear, NativeAccessSpecifierPublic)
	TSubclassOf<class AWorldSettings>            WorldSettingsClass;                                // 0x118(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringClassReference                 WorldSettingsClassName;                            // 0x120(0x10)(Edit, Config, GlobalConfig, NoClear, NativeAccessSpecifierPublic)
	struct FStringClassReference                 NavigationSystemClassName;                         // 0x130(0x10)(Config, GlobalConfig, NoClear, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationSystem>         NavigationSystemClass;                             // 0x140(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringClassReference                 AvoidanceManagerClassName;                         // 0x148(0x10)(Config, GlobalConfig, NoClear, NativeAccessSpecifierPublic)
	TSubclassOf<class UAvoidanceManager>         AvoidanceManagerClass;                             // 0x158(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UPhysicsCollisionHandler>  PhysicsCollisionHandlerClass;                      // 0x160(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringClassReference                 PhysicsCollisionHandlerClassName;                  // 0x168(0x10)(Edit, Config, GlobalConfig, NoClear, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FStringClassReference                 GameUserSettingsClassName;                         // 0x178(0x10)(Config, GlobalConfig, NoClear, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameUserSettings>         GameUserSettingsClass;                             // 0x188(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringClassReference                 AIControllerClassName;                             // 0x190(0x10)(Config, GlobalConfig, NoClear, NativeAccessSpecifierPublic)
	class UGameUserSettings*                     GameUserSettings;                                  // 0x1A0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ALevelScriptActor>         LevelScriptActorClass;                             // 0x1A8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringClassReference                 LevelScriptActorClassName;                         // 0x1B0(0x10)(Edit, Config, GlobalConfig, NoClear, NativeAccessSpecifierPublic)
	struct FStringClassReference                 DefaultBlueprintBaseClassName;                     // 0x1C0(0x10)(Edit, Config, GlobalConfig, NoClear, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FStringClassReference                 GameSingletonClassName;                            // 0x1D0(0x10)(Edit, Config, GlobalConfig, NoClear, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UObject*                               GameSingleton;                                     // 0x1E0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringClassReference                 AssetManagerClassName;                             // 0x1E8(0x10)(Edit, Config, GlobalConfig, NoClear, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UAssetManager*                         AssetManager;                                      // 0x1F8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                PlayOnConsoleSaveDir;                              // 0x200(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            DefaultTexture;                                    // 0x210(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                 DefaultTextureName;                                // 0x218(0x10)(Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                              DefaultDiffuseTexture;                             // 0x228(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                 DefaultDiffuseTextureName;                         // 0x230(0x10)(Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            DefaultBSPVertexTexture;                           // 0x240(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                 DefaultBSPVertexTextureName;                       // 0x248(0x10)(Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            HighFrequencyNoiseTexture;                         // 0x258(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                 HighFrequencyNoiseTextureName;                     // 0x260(0x10)(Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            DefaultBokehTexture;                               // 0x270(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                 DefaultBokehTextureName;                           // 0x278(0x10)(Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             WireframeMaterial;                                 // 0x288(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                WireframeMaterialName;                             // 0x290(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             DebugMeshMaterial;                                 // 0x2A0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                 DebugMeshMaterialName;                             // 0x2A8(0x10)(Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             LevelColorationLitMaterial;                        // 0x2B8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                LevelColorationLitMaterialName;                    // 0x2C0(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             LevelColorationUnlitMaterial;                      // 0x2D0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                LevelColorationUnlitMaterialName;                  // 0x2D8(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             LightingTexelDensityMaterial;                      // 0x2E8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                LightingTexelDensityName;                          // 0x2F0(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             ShadedLevelColorationLitMaterial;                  // 0x300(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                ShadedLevelColorationLitMaterialName;              // 0x308(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             ShadedLevelColorationUnlitMaterial;                // 0x318(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                ShadedLevelColorationUnlitMaterialName;            // 0x320(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             RemoveSurfaceMaterial;                             // 0x330(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                 RemoveSurfaceMaterialName;                         // 0x338(0x10)(Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             VertexColorMaterial;                               // 0x348(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                VertexColorMaterialName;                           // 0x350(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             VertexColorViewModeMaterial_ColorOnly;             // 0x360(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                VertexColorViewModeMaterialName_ColorOnly;         // 0x368(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             VertexColorViewModeMaterial_AlphaAsColor;          // 0x378(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                VertexColorViewModeMaterialName_AlphaAsColor;      // 0x380(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             VertexColorViewModeMaterial_RedOnly;               // 0x390(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                VertexColorViewModeMaterialName_RedOnly;           // 0x398(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             VertexColorViewModeMaterial_GreenOnly;             // 0x3A8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                VertexColorViewModeMaterialName_GreenOnly;         // 0x3B0(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             VertexColorViewModeMaterial_BlueOnly;              // 0x3C0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                VertexColorViewModeMaterialName_BlueOnly;          // 0x3C8(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             ConstraintLimitMaterial;                           // 0x3D8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialX;                          // 0x3E0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialXAxis;                      // 0x3E8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialY;                          // 0x3F0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialYAxis;                      // 0x3F8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialZ;                          // 0x400(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialZAxis;                      // 0x408(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*              ConstraintLimitMaterialPrismatic;                  // 0x410(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             InvalidLightmapSettingsMaterial;                   // 0x418(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                 InvalidLightmapSettingsMaterialName;               // 0x420(0x10)(Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             PreviewShadowsIndicatorMaterial;                   // 0x430(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                 PreviewShadowsIndicatorMaterialName;               // 0x438(0x10)(Edit, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                             ArrowMaterial;                                     // 0x448(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                 ArrowMaterialName;                                 // 0x450(0x10)(Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          LightingOnlyBrightness;                            // 0x460(0x10)(Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                  ShaderComplexityColors;                            // 0x470(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                  QuadComplexityColors;                              // 0x480(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                  LightComplexityColors;                             // 0x490(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                  StationaryLightOverlapColors;                      // 0x4A0(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                  LODColorationColors;                               // 0x4B0(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                  HLODColorationColors;                              // 0x4C0(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                  StreamingAccuracyColors;                           // 0x4D0(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	float                                        MaxPixelShaderAdditiveComplexityCount;             // 0x4E0(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxES2PixelShaderAdditiveComplexityCount;          // 0x4E4(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinLightMapDensity;                                // 0x4E8(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        IdealLightMapDensity;                              // 0x4EC(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxLightMapDensity;                                // 0x4F0(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRenderLightMapDensityGrayscale : 1;               // Mask: 0x1, PropSize: 0x10x4F4(0x1)(Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_9C : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_DDA[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RenderLightMapDensityGrayscaleScale;               // 0x4F8(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RenderLightMapDensityColorScale;                   // 0x4FC(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          LightMapDensityVertexMappedColor;                  // 0x500(0x10)(Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          LightMapDensitySelectedColor;                      // 0x510(0x10)(Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStatColorMapping>             StatColorMappings;                                 // 0x520(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                     DefaultPhysMaterial;                               // 0x530(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                 DefaultPhysMaterialName;                           // 0x538(0x10)(Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameNameRedirect>             ActiveGameNameRedirects;                           // 0x548(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FClassRedirect>                ActiveClassRedirects;                              // 0x558(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FPluginRedirect>               ActivePluginRedirects;                             // 0x568(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FStructRedirect>               ActiveStructRedirects;                             // 0x578(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	class UTexture2D*                            PreIntegratedSkinBRDFTexture;                      // 0x588(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                 PreIntegratedSkinBRDFTextureName;                  // 0x590(0x10)(Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            MiniFontTexture;                                   // 0x5A0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                 MiniFontTextureName;                               // 0x5A8(0x10)(Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                              WeightMapPlaceholderTexture;                       // 0x5B8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                 WeightMapPlaceholderTextureName;                   // 0x5C0(0x10)(Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            LightMapDensityTexture;                            // 0x5D0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                 LightMapDensityTextureName;                        // 0x5D8(0x10)(Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_DDB[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UGameViewportClient*                   GameViewport;                                      // 0x5F0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                        DeferredCommands;                                  // 0x5F8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        TickCycles;                                        // 0x608(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        GameCycles;                                        // 0x60C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ClientCycles;                                      // 0x610(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NearClipPlane;                                     // 0x614(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHardwareSurveyEnabled : 1;                        // Mask: 0x1, PropSize: 0x10x618(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSubtitlesEnabled : 1;                             // Mask: 0x2, PropSize: 0x10x618(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSubtitlesForcedOff : 1;                           // Mask: 0x4, PropSize: 0x10x618(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_9D : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_DDC[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaximumLoopIterationCount;                         // 0x61C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCanBlueprintsTickByDefault : 1;                   // Mask: 0x1, PropSize: 0x10x620(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOptimizeAnimBlueprintMemberVariableAccess : 1;    // Mask: 0x2, PropSize: 0x10x620(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowMultiThreadedAnimationUpdate : 1;            // Mask: 0x4, PropSize: 0x10x620(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableEditorPSysRealtimeLOD : 1;                  // Mask: 0x8, PropSize: 0x10x620(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_9E : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bSmoothFrameRate : 1;                              // Mask: 0x20, PropSize: 0x10x620(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseFixedFrameRate : 1;                            // Mask: 0x40, PropSize: 0x10x620(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_9F : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_DDD[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FixedFrameRate;                                    // 0x624(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatRange                           SmoothedFrameRateRange;                            // 0x628(0x10)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCheckForMultiplePawnsSpawnedInAFrame : 1;         // Mask: 0x1, PropSize: 0x10x638(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_A0 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_DDE[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumPawnsAllowedToBeSpawnedInAFrame;                // 0x63C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldGenerateLowQualityLightmaps : 1;            // Mask: 0x1, PropSize: 0x10x640(0x1)(Config, GlobalConfig, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_A1 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_DDF[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                C_WorldBox;                                        // 0x644(0x4)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_BrushWire;                                       // 0x648(0x4)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_AddWire;                                         // 0x64C(0x4)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_SubtractWire;                                    // 0x650(0x4)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_SemiSolidWire;                                   // 0x654(0x4)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_NonSolidWire;                                    // 0x658(0x4)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_WireBackground;                                  // 0x65C(0x4)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_ScaleBoxHi;                                      // 0x660(0x4)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_VolumeCollision;                                 // 0x664(0x4)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_BSPCollision;                                    // 0x668(0x4)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_OrthoBackground;                                 // 0x66C(0x4)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_Volume;                                          // 0x670(0x4)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                C_BrushShape;                                      // 0x674(0x4)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StreamingDistanceFactor;                           // 0x678(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETransitionType                   TransitionType;                                    // 0x67C(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_DE0[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                TransitionDescription;                             // 0x680(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                TransitionGameMode;                                // 0x690(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MeshLODRange;                                      // 0x6A0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowMatureLanguage : 1;                          // Mask: 0x1, PropSize: 0x10x6A4(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_A2 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_DE1[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CameraRotationThreshold;                           // 0x6A8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraTranslationThreshold;                        // 0x6AC(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PrimitiveProbablyVisibleTime;                      // 0x6B0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxOcclusionPixelsFraction;                        // 0x6B4(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPauseOnLossOfFocus : 1;                           // Mask: 0x1, PropSize: 0x10x6B8(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_A3 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_DE2[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxParticleResize;                                 // 0x6BC(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxParticleResizeWarn;                             // 0x6C0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_DE3[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FDropNoteInfo>                 PendingDroppedNotes;                               // 0x6C8(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FRigidBodyErrorCorrection             PhysicErrorCorrection;                             // 0x6D8(0x1C)(Config, NoDestructor, NativeAccessSpecifierPublic)
	float                                        NetClientTicksPerSecond;                           // 0x6F4(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DisplayGamma;                                      // 0x6F8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinDesiredFrameRate;                               // 0x6FC(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          DefaultSelectedMaterialColor;                      // 0x700(0x10)(Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                          SelectedMaterialColor;                             // 0x710(0x10)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                          SelectionOutlineColor;                             // 0x720(0x10)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                          SubduedSelectionOutlineColor;                      // 0x730(0x10)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                          SelectedMaterialColorOverride;                     // 0x740(0x10)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bIsOverridingSelectedColor;                        // 0x750(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_DE4[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bEnableOnScreenDebugMessages : 1;                  // Mask: 0x1, PropSize: 0x10x754(0x1)(Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableOnScreenDebugMessagesDisplay : 1;           // Mask: 0x2, PropSize: 0x10x754(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSuppressMapWarnings : 1;                          // Mask: 0x4, PropSize: 0x10x754(0x1)(Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableAILogging : 1;                             // Mask: 0x8, PropSize: 0x10x754(0x1)(Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_A4 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_DE5[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       bEnableVisualLogRecordingOnStart;                  // 0x758(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_DE6[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ScreenSaverInhibitorSemaphore;                     // 0x760(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bLockReadOnlyLevels : 1;                           // Mask: 0x1, PropSize: 0x10x764(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_A5 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_DE7[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                ParticleEventManagerClassPath;                     // 0x768(0x10)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_DE8[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SelectionHighlightIntensity;                       // 0x788(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SelectionMeshSectionHighlightIntensity;            // 0x78C(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BSPSelectionHighlightIntensity;                    // 0x790(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HoverHighlightIntensity;                           // 0x794(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SelectionHighlightIntensityBillboards;             // 0x798(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_DE9[0x3D4];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FNetDriverDefinition>          NetDriverDefinitions;                              // 0xB70(0x10)(ZeroConstructor, Transient, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                        ServerActors;                                      // 0xB80(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                        RuntimeServerActors;                               // 0xB90(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bStartedLoadMapMovie : 1;                          // Mask: 0x1, PropSize: 0x10xBA0(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_A6 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_DEA[0x17];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NextWorldContextHandle;                            // 0xBB8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_DEB[0xCC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Engine");
		return Clss;
	}

};

// 0x20 (0x48 - 0x28)
// Class Engine.Player
class UPlayer : public UObject
{
public:
	uint8                                        Pad_DEC[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerController*                     PlayerController;                                  // 0x30(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CurrentNetSpeed;                                   // 0x38(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ConfiguredInternetSpeed;                           // 0x3C(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ConfiguredLanSpeed;                                // 0x40(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_DED[0x4];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Player");
		return Clss;
	}

};

// 0x180 (0x1C8 - 0x48)
// Class Engine.LocalPlayer
class ULocalPlayer : public UPlayer
{
public:
	uint8                                        Pad_DEE[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UGameViewportClient*                   ViewportClient;                                    // 0x58(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_DEF[0x1C];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAspectRatioAxisConstraint        AspectRatioAxisConstraint;                         // 0x7C(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_DF0[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class APlayerController>         PendingLevelPlayerControllerClass;                 // 0x80(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSentSplitJoin : 1;                                // Mask: 0x1, PropSize: 0x10x88(0x1)(Edit, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_A7 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_DF1[0x7F];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ControllerId;                                      // 0x108(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_DF2[0xBC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LocalPlayer");
		return Clss;
	}

};

// 0xA0 (0x428 - 0x388)
// Class Engine.GameModeBase
class AGameModeBase : public AInfo
{
public:
	class FString                                OptionsString;                                     // 0x388(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameSession>              GameSessionClass;                                  // 0x398(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameStateBase>            GameStateClass;                                    // 0x3A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APlayerController>         PlayerControllerClass;                             // 0x3A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APlayerState>              PlayerStateClass;                                  // 0x3B0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AHUD>                      HUDClass;                                          // 0x3B8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APawn>                     DefaultPawnClass;                                  // 0x3C0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASpectatorPawn>            SpectatorClass;                                    // 0x3C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APlayerController>         ReplaySpectatorPlayerControllerClass;              // 0x3D0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AServerStatReplicator>     ServerStatReplicatorClass;                         // 0x3D8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameSession*                          GameSession;                                       // 0x3E0(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameStateBase*                        GameState;                                         // 0x3E8(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AServerStatReplicator*                 ServerStatReplicator;                              // 0x3F0(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  DefaultPlayerName;                                 // 0x3F8(0x18)(Edit, NativeAccessSpecifierPublic)
	uint8                                        bUseSeamlessTravel : 1;                            // Mask: 0x1, PropSize: 0x10x410(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStartPlayersAsSpectators : 1;                     // Mask: 0x2, PropSize: 0x10x410(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bPauseable : 1;                                    // Mask: 0x4, PropSize: 0x10x410(0x1)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_DFC[0x17];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameModeBase");
		return Clss;
	}

	void StartPlay();
	class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot);
	class APawn* SpawnDefaultPawnAtTransform(class AController* NewPlayer, struct FTransform& SpawnTransform);
	bool ShouldReset(class AActor* ActorToReset);
	void ReturnToMainMenuHost();
	void RestartPlayerAtTransform(class AController* NewPlayer, struct FTransform& SpawnTransform);
	void RestartPlayerAtPlayerStart(class AController* NewPlayer, class AActor* StartSpot);
	void RestartPlayer(class AController* NewPlayer);
	void ResetLevel();
	bool PlayerCanRestart(class APlayerController* Player);
	bool MustSpectate(class APlayerController* NewPlayerController);
	void K2_PostLogin(class APlayerController* NewPlayer);
	void K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC);
	void K2_OnRestartPlayer(class AController* NewPlayer);
	void K2_OnLogout(class AController* ExitingController);
	void K2_OnChangeName(class AController* Other, const class FString& NewName, bool bNameChange);
	class AActor* K2_FindPlayerStart(class AController* Player, const class FString& IncomingName);
	void InitStartSpot(class AActor* StartSpot, class AController* NewPlayer);
	void InitializeHUDForPlayer(class APlayerController* NewPlayer);
	bool HasMatchStarted();
	void HandleStartingNewPlayer(class APlayerController* NewPlayer);
	int32 GetNumSpectators();
	int32 GetNumPlayers();
	class UClass* GetDefaultPawnClassForController(class AController* InController);
	class AActor* FindPlayerStart(class AController* Player, const class FString& IncomingName);
	class AActor* ChoosePlayerStart(class AController* Player);
	void ChangeName(class AController* Controller, const class FString& NewName, bool bNameChange);
	bool CanSpectate(class APlayerController* Viewer, class APlayerState* ViewTarget);
};

// 0x48 (0x470 - 0x428)
// Class Engine.GameMode
class AGameMode : public AGameModeBase
{
public:
	class FName                                  MatchState;                                        // 0x428(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bDelayedStart : 1;                                 // Mask: 0x1, PropSize: 0x10x430(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_A8 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_DFD[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumSpectators;                                     // 0x434(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumPlayers;                                        // 0x438(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumBots;                                           // 0x43C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinRespawnDelay;                                   // 0x440(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumTravellingPlayers;                              // 0x444(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULocalMessage>             EngineMessageClass;                                // 0x448(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerState*>                  InactivePlayerArray;                               // 0x450(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        InactivePlayerStateLifeSpan;                       // 0x460(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxInactivePlayers;                                // 0x464(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bHandleDedicatedServerReplays;                     // 0x468(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_DFE[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameMode");
		return Clss;
	}

	void StartMatch();
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);
	void Say(const class FString& Msg);
	void RestartGame();
	bool ReadyToStartMatch();
	bool ReadyToEndMatch();
	void K2_OnSetMatchState(class FName NewState);
	bool IsMatchInProgress();
	bool HasMatchEnded();
	class FName GetMatchState();
	void EndMatch();
	void AbortMatch();
};

// 0x10 (0x38 - 0x28)
// Class Engine.AnimNotify
class UAnimNotify : public UObject
{
public:
	uint8                                        Pad_E00[0x10];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotify");
		return Clss;
	}

	bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	class FString GetNotifyName();
};

// 0x20 (0x58 - 0x38)
// Class Engine.AnimNotify_PlaySound
class UAnimNotify_PlaySound : public UAnimNotify
{
public:
	class USoundBase*                            Sound;                                             // 0x38(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumeMultiplier;                                  // 0x40(0x4)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PitchMultiplier;                                   // 0x44(0x4)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFollow : 1;                                       // Mask: 0x1, PropSize: 0x10x48(0x1)(Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_A9 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E01[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  AttachName;                                        // 0x50(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotify_PlaySound");
		return Clss;
	}

};

// 0x48 (0x80 - 0x38)
// Class Engine.AnimNotify_PlayParticleEffect
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{
public:
	class UParticleSystem*                       PSTemplate;                                        // 0x38(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LocationOffset;                                    // 0x40(0xC)(Edit, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              RotationOffset;                                    // 0x4C(0xC)(Edit, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_E02[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        Attached : 1;                                      // Mask: 0x1, PropSize: 0x10x70(0x1)(Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_AA : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E03[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  SocketName;                                        // 0x78(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotify_PlayParticleEffect");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.AnimNotifyState
class UAnimNotifyState : public UObject
{
public:
	uint8                                        Pad_E07[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotifyState");
		return Clss;
	}

	bool Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime);
	bool Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	bool Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration);
	class FString GetNotifyName();
};

// 0x388 (0x3B0 - 0x28)
// Class Engine.AssetManager
class UAssetManager : public UObject
{
public:
	uint8                                        Pad_E08[0x270];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UObject*>                       ObjectReferenceList;                               // 0x298(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                         bIsGlobalAsyncScanEnvironment;                     // 0x2A8(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShouldKeepHardRefs;                               // 0x2A9(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShouldGuessTypeAndName;                           // 0x2AA(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShouldUseSynchronousLoad;                         // 0x2AB(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsBulkScanning;                                   // 0x2AC(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsManagementDatabaseCurrent;                      // 0x2AD(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUpdateManagementDatabaseAfterScan;                // 0x2AE(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E09[0x101];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AssetManager");
		return Clss;
	}

};

// 0x48 (0x138 - 0xF0)
// Class Engine.MovementComponent
class UMovementComponent : public UActorComponent
{
public:
	class USceneComponent*                       UpdatedComponent;                                  // 0xF0(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                   UpdatedPrimitive;                                  // 0xF8(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E0C[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               Velocity;                                          // 0x104(0xC)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bConstrainToPlane : 1;                             // Mask: 0x1, PropSize: 0x10x110(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSnapToPlaneAtStart : 1;                           // Mask: 0x2, PropSize: 0x10x110(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_AB : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E0D[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EPlaneConstraintAxisSetting       PlaneConstraintAxisSetting;                        // 0x114(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_E0E[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               PlaneConstraintNormal;                             // 0x118(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               PlaneConstraintOrigin;                             // 0x124(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bUpdateOnlyIfRendered : 1;                         // Mask: 0x1, PropSize: 0x10x130(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoUpdateTickRegistration : 1;                   // Mask: 0x2, PropSize: 0x10x130(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTickBeforeOwner : 1;                              // Mask: 0x4, PropSize: 0x10x130(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoRegisterUpdatedComponent : 1;                 // Mask: 0x8, PropSize: 0x10x130(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E0F[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MovementComponent");
		return Clss;
	}

	void StopMovementImmediately();
	void SnapUpdatedComponentToPlane();
	void SetUpdatedComponent(class USceneComponent* NewUpdatedComponent);
	void SetPlaneConstraintOrigin(const struct FVector& PlaneOrigin);
	void SetPlaneConstraintNormal(const struct FVector& PlaneNormal);
	void SetPlaneConstraintFromVectors(const struct FVector& Forward, const struct FVector& Up);
	void SetPlaneConstraintEnabled(bool bEnabled);
	void SetPlaneConstraintAxisSetting(enum class EPlaneConstraintAxisSetting NewAxisSetting);
	void PhysicsVolumeChanged(class APhysicsVolume* NewVolume);
	bool K2_MoveUpdatedComponent(const struct FVector& Delta, const struct FRotator& NewRotation, struct FHitResult* OutHit, bool bSweep, bool bTeleport);
	float K2_GetModifiedMaxSpeed();
	float K2_GetMaxSpeedModifier();
	bool IsExceedingMaxSpeed(float MaxSpeed);
	struct FVector GetPlaneConstraintOrigin();
	struct FVector GetPlaneConstraintNormal();
	enum class EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting();
	class APhysicsVolume* GetPhysicsVolume();
	float GetMaxSpeed();
	float GetGravityZ();
	struct FVector ConstrainNormalToPlane(const struct FVector& Normal);
	struct FVector ConstrainLocationToPlane(const struct FVector& Location);
	struct FVector ConstrainDirectionToPlane(const struct FVector& Direction);
};

// 0x38 (0x170 - 0x138)
// Class Engine.NavMovementComponent
class UNavMovementComponent : public UMovementComponent
{
public:
	struct FNavAgentProperties                   NavAgentProps;                                     // 0x138(0x20)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FixedPathBrakingDistance;                          // 0x158(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bUpdateNavAgentWithOwnersCollision : 1;            // Mask: 0x1, PropSize: 0x10x15C(0x1)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bUseAccelerationForPaths : 1;                      // Mask: 0x2, PropSize: 0x10x15C(0x1)(Edit, Config, GlobalConfig, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bUseFixedBrakingDistanceForPaths : 1;              // Mask: 0x4, PropSize: 0x10x15C(0x1)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_AC : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E10[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FMovementProperties                   MovementState;                                     // 0x160(0x4)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_E11[0xC];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavMovementComponent");
		return Clss;
	}

	void StopMovementKeepPathing();
	void StopActiveMovement();
	bool IsSwimming();
	bool IsMovingOnGround();
	bool IsFlying();
	bool IsFalling();
	bool IsCrouching();
};

// 0x8 (0x178 - 0x170)
// Class Engine.PawnMovementComponent
class UPawnMovementComponent : public UNavMovementComponent
{
public:
	class APawn*                                 PawnOwner;                                         // 0x170(0x8)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PawnMovementComponent");
		return Clss;
	}

	struct FVector K2_GetInputVector();
	bool IsMoveInputIgnored();
	struct FVector GetPendingInputVector();
	class APawn* GetPawnOwner();
	struct FVector GetLastInputVector();
	struct FVector ConsumeInputVector();
	void AddInputVector(const struct FVector& WorldVector, bool bForce);
};

// 0x4F8 (0x880 - 0x388)
// Class Engine.CameraActor
class ACameraActor : public AActor
{
public:
	enum class EAutoReceiveInput                 AutoActivateForPlayer;                             // 0x388(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_E13[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UCameraComponent*                      CameraComponent;                                   // 0x390(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                       SceneComponent;                                    // 0x398(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E14[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bConstrainAspectRatio : 1;                         // Mask: 0x1, PropSize: 0x10x3A8(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_AD : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E15[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AspectRatio;                                       // 0x3AC(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        FOVAngle;                                          // 0x3B0(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        PostProcessBlendWeight;                            // 0x3B4(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_E16[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  PostProcessSettings;                               // 0x3C0(0x4C0)(Deprecated, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CameraActor");
		return Clss;
	}

	int32 GetAutoActivatePlayerIndex();
};

// 0x2D8 (0x6C8 - 0x3F0)
// Class Engine.PlayerController
class APlayerController : public AController
{
public:
	class UPlayer*                               Player;                                            // 0x3F0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E4D[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class APawn*                                 AcknowledgedPawn;                                  // 0x400(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterpTrackInstDirector*              ControllingDirTrackInst;                           // 0x408(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E4E[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class AHUD*                                  MyHUD;                                             // 0x418(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerCameraManager*                  PlayerCameraManager;                               // 0x420(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APlayerCameraManager>      PlayerCameraManagerClass;                          // 0x428(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAutoManageActiveCameraTarget;                     // 0x430(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E4F[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRotator                              TargetViewRotation;                                // 0x434(0xC)(Net, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_E50[0xC];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SmoothTargetViewRotationSpeed;                     // 0x44C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                        HiddenActors;                                      // 0x450(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        LastSpectatorStateSynchTime;                       // 0x460(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LastSpectatorSyncLocation;                         // 0x464(0xC)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              LastSpectatorSyncRotation;                         // 0x470(0xC)(Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                        ClientCap;                                         // 0x47C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCheatManager*                         CheatManager;                                      // 0x480(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCheatManager>             CheatClass;                                        // 0x488(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerInput*                          PlayerInput;                                       // 0x490(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActiveForceFeedbackEffect>    ActiveForceFeedbackEffects;                        // 0x498(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                        Pad_E51[0x90];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_AE : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bPlayerIsWaiting : 1;                              // Mask: 0x8, PropSize: 0x10x538(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_AF : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E52[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        NetPlayerIndex;                                    // 0x53C(0x1)(ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E53[0x3B];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UNetConnection*                        PendingSwapConnection;                             // 0x578(0x8)(ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetConnection*                        NetConnection;                                     // 0x580(0x8)(ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E54[0xC];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InputYawScale;                                     // 0x594(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InputPitchScale;                                   // 0x598(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InputRollScale;                                    // 0x59C(0x4)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowMouseCursor : 1;                              // Mask: 0x1, PropSize: 0x10x5A0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableClickEvents : 1;                            // Mask: 0x2, PropSize: 0x10x5A0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableTouchEvents : 1;                            // Mask: 0x4, PropSize: 0x10x5A0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableMouseOverEvents : 1;                        // Mask: 0x8, PropSize: 0x10x5A0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableTouchOverEvents : 1;                        // Mask: 0x10, PropSize: 0x10x5A0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceFeedbackEnabled : 1;                         // Mask: 0x20, PropSize: 0x10x5A0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_B0 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E55[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ForceFeedbackScale;                                // 0x5A4(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                          ClickEventKeys;                                    // 0x5A8(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	enum class EMouseCursor                      DefaultMouseCursor;                                // 0x5B8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMouseCursor                      CurrentMouseCursor;                                // 0x5B9(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECollisionChannel                 DefaultClickTraceChannel;                          // 0x5BA(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECollisionChannel                 CurrentClickTraceChannel;                          // 0x5BB(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HitResultTraceDistance;                            // 0x5BC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E56[0x80];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UInputComponent*                       InactiveStateInputComponent;                       // 0x640(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E57[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTouchInterface*                       CurrentTouchInterface;                             // 0x660(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E58[0x40];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ASpectatorPawn*                        SpectatorPawn;                                     // 0x6A8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                               SpawnLocation;                                     // 0x6B0(0xC)(Net, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E59[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsLocalPlayerController;                          // 0x6C0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_E5A[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint16                                       SeamlessTravelCount;                               // 0x6C2(0x2)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                       LastCompletedSeamlessTravelCount;                  // 0x6C4(0x2)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E5B[0x2];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlayerController");
		return Clss;
	}

	bool WasInputKeyJustReleased(const struct FKey& Key);
	bool WasInputKeyJustPressed(const struct FKey& Key);
	void ToggleSpeaking(bool bInSpeaking);
	void SwitchLevel(const class FString& URL);
	void StopHapticEffect(enum class EControllerHand Hand);
	void StartFire(uint8 FireModeNum);
	void SetVirtualJoystickVisibility(bool bVisible);
	void SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, enum class EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing);
	void SetName(const class FString& S);
	void SetMouseLocation(int32 X, int32 Y);
	void SetHapticsByValue(float Frequency, float Amplitude, enum class EControllerHand Hand);
	void SetControllerLightColor(const struct FColor& Color);
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	void SetAudioListenerOverride(class USceneComponent* AttachToComponent, const struct FVector& Location, const struct FRotator& Rotation);
	void ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams);
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void ServerVerifyViewTarget();
	void ServerUpdateMultipleLevelsVisibility(TArray<struct FUpdateLevelVisibilityLevelInfo>& LevelVisibilities);
	void ServerUpdateLevelVisibility(class FName PackageName, bool bIsVisible);
	void ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int32 CamPitchAndYaw);
	void ServerUnmutePlayer(const struct FUniqueNetIdRepl& PlayerID);
	void ServerToggleAILogging();
	void ServerShortTimeout();
	void ServerSetSpectatorWaiting(bool bWaiting);
	void ServerSetSpectatorLocation(const struct FVector& NewLoc, const struct FRotator& NewRot);
	void ServerRestartPlayer();
	void ServerPause();
	void ServerNotifyLoadedWorld(class FName WorldPackageName);
	void ServerMutePlayer(const struct FUniqueNetIdRepl& PlayerID);
	void ServerCheckClientPossessionReliable();
	void ServerCheckClientPossession();
	void ServerChangeName(const class FString& S);
	void ServerCamera(class FName NewMode);
	void ServerAcknowledgePossession(class APawn* P);
	void SendToConsole(const class FString& Command);
	void RestartLevel();
	bool ProjectWorldLocationToScreen(const struct FVector& WorldLocation, struct FVector2D* ScreenLocation, bool bPlayerViewportRelative);
	void PlayHapticEffect(class UHapticFeedbackEffect_Base* HapticEffect, enum class EControllerHand Hand, float Scale, bool bLoop);
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, enum class EDynamicForceFeedbackAction Action, const struct FLatentActionInfo& LatentInfo);
	void Pause();
	void OnServerStartedVisualLogger(bool bIsLogging);
	void LocalTravel(const class FString& URL);
	bool IsInputKeyDown(const struct FKey& Key);
	void GetViewportSize(int32* SizeX, int32* SizeY);
	class ASpectatorPawn* GetSpectatorPawn();
	bool GetMousePosition(float* LocationX, float* LocationY);
	struct FVector GetInputVectorKeyState(const struct FKey& Key);
	void GetInputTouchState(enum class ETouchIndex FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	void GetInputMouseDelta(float* DeltaX, float* DeltaY);
	void GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration);
	float GetInputKeyTimeDown(const struct FKey& Key);
	void GetInputAnalogStickState(enum class EControllerAnalogStick WhichStick, float* StickX, float* StickY);
	float GetInputAnalogKeyState(const struct FKey& Key);
	class AHUD* GetHUD();
	bool GetHitResultUnderFingerForObjects(enum class ETouchIndex FingerIndex, TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderFingerByChannel(enum class ETouchIndex FingerIndex, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderFinger(enum class ETouchIndex FingerIndex, enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursorForObjects(TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursorByChannel(enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursor(enum class ECollisionChannel TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	struct FVector GetFocalLocation();
	void FOV(float NewFOV);
	void EnableCheats();
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection);
	bool DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection);
	void ConsoleKey(const struct FKey& Key);
	void ClientWasKicked(class FText& KickReason);
	void ClientVoiceHandshakeComplete();
	void ClientUpdateMultipleLevelsStreamingStatus(TArray<struct FUpdateLevelStreamingLevelStatus>& LevelStatuses);
	void ClientUpdateLevelStreamingStatus(class FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int32 LODIndex);
	void ClientUnmutePlayer(const struct FUniqueNetIdRepl& PlayerID);
	void ClientTravelInternal(const class FString& URL, enum class ETravelType TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientTravel(const class FString& URL, enum class ETravelType TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientTeamMessage(class APlayerState* SenderPlayerState, const class FString& S, class FName Type, float MsgLifeTime);
	void ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, class FName Tag);
	void ClientStopCameraShake(TSubclassOf<class UCameraShake> Shake, bool bImmediately);
	void ClientStopCameraAnim(class UCameraAnim* AnimToStop);
	void ClientStartOnlineSession();
	void ClientSpawnCameraLensEffect(TSubclassOf<class AEmitterCameraLensEffectBase> LensEffectEmitterClass);
	void ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams);
	void ClientSetSpectatorWaiting(bool bWaiting);
	void ClientSetHUD(TSubclassOf<class AHUD> NewHUDClass);
	void ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int32 CinematicTextureGroups);
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
	void ClientSetCameraMode(class FName NewCamMode);
	void ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio);
	void ClientSetBlockOnAsyncLoading();
	void ClientReturnToMainMenuWithTextReason(class FText& ReturnReason);
	void ClientReturnToMainMenu(const class FString& ReturnReason);
	void ClientRetryClientRestart(class APawn* NewPawn);
	void ClientRestart(class APawn* NewPawn);
	void ClientReset();
	void ClientRepObjRef(class UObject* Object);
	void ClientReceiveLocalizedMessage(TSubclassOf<class ULocalMessage> MESSAGE, int32 Switch, class APlayerState* RelatedPlayerState_1, class APlayerState* RelatedPlayerState_2, class UObject* OptionalObject);
	void ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int32 CinematicTextureGroups);
	void ClientPrepareMapChange(class FName LevelName, bool bFirst, bool bLast);
	void ClientPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, class FName Tag);
	void ClientPlayCameraShake(TSubclassOf<class UCameraShake> Shake, float Scale, enum class ECameraAnimPlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, enum class ECameraAnimPlaySpace Space, const struct FRotator& CustomPlaySpace);
	void ClientMutePlayer(const struct FUniqueNetIdRepl& PlayerID);
	void ClientMessage(const class FString& S, class FName Type, float MsgLifeTime);
	void ClientIgnoreMoveInput(bool bIgnore);
	void ClientIgnoreLookInput(bool bIgnore);
	void ClientGotoState(class FName NewState);
	void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);
	void ClientForceGarbageCollection();
	void ClientFlushLevelStreaming();
	void ClientEndOnlineSession();
	void ClientEnableNetworkVoice(bool bEnable);
	void ClientCommitMapChange();
	void ClientClearCameraLensEffects();
	void ClientCapBandwidth(int32 Cap);
	void ClientCancelPendingMapChange();
	void ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation);
	void ClearAudioListenerOverride();
	void Camera(class FName NewMode);
	void AddYawInput(float Val);
	void AddRollInput(float Val);
	void AddPitchInput(float Val);
	void ActivateTouchInterface(class UTouchInterface* NewTouchInterface);
};

// 0x50 (0x78 - 0x28)
// Class Engine.CheatManager
class UCheatManager : public UObject
{
public:
	class ADebugCameraController*                DebugCameraControllerRef;                          // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ADebugCameraController>    DebugCameraControllerClass;                        // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E5C[0x40];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CheatManager");
		return Clss;
	}

	void Walk();
	void ViewSelf();
	void ViewPlayer(const class FString& S);
	void ViewClass(TSubclassOf<class AActor> DesiredClass);
	void ViewActor(class FName ActorName);
	void ToggleServerStatReplicatorUpdateStatNet();
	void ToggleServerStatReplicatorClientOverwrite();
	void ToggleDebugCamera();
	void ToggleAILogging();
	void TestCollisionDistance();
	void Teleport();
	void Summon(const class FString& ClassName);
	void StreamLevelOut(class FName PackageName);
	void StreamLevelIn(class FName PackageName);
	void SpawnServerStatReplicator();
	void Slomo(float NewTimeDilation);
	void SetWorldOrigin();
	void SetNavDrawDistance(float DrawDistance);
	void SetMouseSensitivityToDefault();
	void ServerToggleAILogging();
	void ReceiveInitCheatManager();
	void ReceiveEndPlay();
	void RebuildNavigation();
	void PlayersOnly();
	void OnlyLoadLevel(class FName PackageName);
	void LogLoc();
	void InvertMouse();
	void God();
	void Ghost();
	void FreezeFrame(float Delay);
	void Fly();
	void FlushLog();
	void EnableDebugCamera();
	void DumpVoiceMutingState();
	void DumpPartyState();
	void DumpOnlineSessionState();
	void DumpChatState();
	void DisableDebugCamera();
	void DestroyTarget();
	void DestroyServerStatReplicator();
	void DestroyPawns(TSubclassOf<class APawn> AClass);
	void DestroyAllPawnsExceptTarget();
	void DestroyAll(TSubclassOf<class AActor> AClass);
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);
	void DebugCapsuleSweepPawn();
	void DebugCapsuleSweepComplex(bool bTraceComplex);
	void DebugCapsuleSweepClear();
	void DebugCapsuleSweepChannel(enum class ECollisionChannel Channel);
	void DebugCapsuleSweepCapture();
	void DebugCapsuleSweep();
	void DamageTarget(float DamageAmount);
	void CheatScript(const class FString& ScriptName);
	void ChangeSize(float F);
	void BugItStringCreator(const struct FVector& ViewLocation, const struct FRotator& ViewRotation, class FString* GoString, class FString* LocString);
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);
	void BugIt(const class FString& ScreenShotDescription);
};

// 0x8 (0x30 - 0x28)
// Class Engine.ScriptViewportClient
class UScriptViewportClient : public UObject
{
public:
	uint8                                        Pad_E5D[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ScriptViewportClient");
		return Clss;
	}

};

// 0x540 (0x570 - 0x30)
// Class Engine.GameViewportClient
class UGameViewportClient : public UScriptViewportClient
{
public:
	uint8                                        Pad_E5E[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UConsole*                              ViewportConsole;                                   // 0x38(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDebugDisplayProperty>         DebugProperties;                                   // 0x40(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_E5F[0x30];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UWorld*                                World;                                             // 0x80(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameInstance*                         GameInstance;                                      // 0x88(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E60[0x4E0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameViewportClient");
		return Clss;
	}

	void SSSwapControllers();
	void ShowTitleSafeArea();
	void SetConsoleTarget(int32 PlayerIndex);
};

// 0x108 (0x130 - 0x28)
// Class Engine.Console
class UConsole : public UObject
{
public:
	uint8                                        Pad_E61[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ULocalPlayer*                          ConsoleTargetPlayer;                               // 0x38(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            DefaultTexture_Black;                              // 0x40(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            DefaultTexture_White;                              // 0x48(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E62[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        HistoryBuffer;                                     // 0x68(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                        Pad_E63[0xB8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Console");
		return Clss;
	}

};

// 0x40 (0x3C8 - 0x388)
// Class Engine.GameStateBase
class AGameStateBase : public AInfo
{
public:
	TSubclassOf<class AGameModeBase>             GameModeClass;                                     // 0x388(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameModeBase*                         AuthorityGameMode;                                 // 0x390(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASpectatorPawn>            SpectatorClass;                                    // 0x398(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerState*>                  PlayerArray;                                       // 0x3A0(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                         bReplicatedHasBegunPlay;                           // 0x3B0(0x1)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E66[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ReplicatedWorldTimeSeconds;                        // 0x3B4(0x4)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ServerWorldTimeSecondsDelta;                       // 0x3B8(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ServerWorldTimeSecondsUpdateFrequency;             // 0x3BC(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E67[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameStateBase");
		return Clss;
	}

	void OnRep_SpectatorClass();
	void OnRep_ReplicatedWorldTimeSeconds();
	void OnRep_ReplicatedHasBegunPlay();
	void OnRep_GameModeClass();
	bool HasMatchStarted();
	bool HasBegunPlay();
	float GetServerWorldTimeSeconds();
	float GetPlayerStartTime(class AController* Controller);
	float GetPlayerRespawnDelay(class AController* Controller);
};

// 0x20 (0x3E8 - 0x3C8)
// Class Engine.GameState
class AGameState : public AGameStateBase
{
public:
	class FName                                  MatchState;                                        // 0x3C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                  PreviousMatchState;                                // 0x3D0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        ElapsedTime;                                       // 0x3D8(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E68[0xC];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameState");
		return Clss;
	}

	void OnRep_MatchState();
	void OnRep_ElapsedTime();
};

// 0x10 (0x38 - 0x28)
// Class Engine.DeveloperSettings
class UDeveloperSettings : public UObject
{
public:
	uint8                                        Pad_E69[0x10];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DeveloperSettings");
		return Clss;
	}

};

// 0x30 (0x120 - 0xF0)
// Class Engine.NavRelevantComponent
class UNavRelevantComponent : public UActorComponent
{
public:
	uint8                                        Pad_E6A[0x24];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bAttachToOwnersRoot : 1;                           // Mask: 0x1, PropSize: 0x10x114(0x1)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_B1 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E6B[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UObject*                               CachedNavParent;                                   // 0x118(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavRelevantComponent");
		return Clss;
	}

	void SetNavigationRelevancy(bool bRelevant);
};

// 0x110 (0x230 - 0x120)
// Class Engine.NavLinkCustomComponent
class UNavLinkCustomComponent : public UNavRelevantComponent
{
public:
	uint8                                        Pad_E6C[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       NavLinkUserId;                                     // 0x128(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E6D[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UNavArea>                  EnabledAreaClass;                                  // 0x130(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UNavArea>                  DisabledAreaClass;                                 // 0x138(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               LinkRelativeStart;                                 // 0x140(0xC)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               LinkRelativeEnd;                                   // 0x14C(0xC)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ENavLinkDirection                 LinkDirection;                                     // 0x158(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E6E[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bLinkEnabled : 1;                                  // Mask: 0x1, PropSize: 0x10x15C(0x1)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bNotifyWhenEnabled : 1;                            // Mask: 0x2, PropSize: 0x10x15C(0x1)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bNotifyWhenDisabled : 1;                           // Mask: 0x4, PropSize: 0x10x15C(0x1)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bCreateBoxObstacle : 1;                            // Mask: 0x8, PropSize: 0x10x15C(0x1)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_B2 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E6F[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               ObstacleOffset;                                    // 0x160(0xC)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               ObstacleExtent;                                    // 0x16C(0xC)(Edit, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UNavArea>                  ObstacleAreaClass;                                 // 0x178(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        BroadcastRadius;                                   // 0x180(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        BroadcastInterval;                                 // 0x184(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ECollisionChannel                 BroadcastChannel;                                  // 0x188(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E70[0xA7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavLinkCustomComponent");
		return Clss;
	}

};

// 0x50 (0x3D8 - 0x388)
// Class Engine.Emitter
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*              ParticleSystemComponent;                           // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDestroyOnSystemFinish : 1;                        // Mask: 0x1, PropSize: 0x10x390(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPostUpdateTickGroup : 1;                          // Mask: 0x2, PropSize: 0x10x390(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCurrentlyActive : 1;                              // Mask: 0x4, PropSize: 0x10x390(0x1)(Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_B3 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E73[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	UMulticastDelegateProperty_                  OnParticleSpawn;                                   // 0x398(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnParticleBurst;                                   // 0x3A8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnParticleDeath;                                   // 0x3B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnParticleCollide;                                 // 0x3C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Emitter");
		return Clss;
	}

	void ToggleActive();
	void SetVectorParameter(class FName ParameterName, const struct FVector& Param);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void SetMaterialParameter(class FName ParameterName, class UMaterialInterface* Param);
	void SetFloatParameter(class FName ParameterName, float Param);
	void SetColorParameter(class FName ParameterName, const struct FLinearColor& Param);
	void SetActorParameter(class FName ParameterName, class AActor* Param);
	void OnRep_bCurrentlyActive();
	void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
	bool IsActive();
	void Deactivate();
	void Activate();
};

// 0x68 (0x440 - 0x3D8)
// Class Engine.EmitterCameraLensEffectBase
class AEmitterCameraLensEffectBase : public AEmitter
{
public:
	class UParticleSystem*                       PS_CameraEffect;                                   // 0x3D8(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                       PS_CameraEffectNonExtremeContent;                  // 0x3E0(0x8)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerCameraManager*                  BaseCamera;                                        // 0x3E8(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTransform                            RelativeTransform;                                 // 0x3F0(0x30)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                        BaseFOV;                                           // 0x420(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowMultipleInstances : 1;                       // Mask: 0x1, PropSize: 0x10x424(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bResetWhenRetriggered : 1;                         // Mask: 0x2, PropSize: 0x10x424(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_B4 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E74[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSubclassOf<class AEmitterCameraLensEffectBase>> EmittersToTreatAsSame;                             // 0x428(0x10)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                        DistFromCamera;                                    // 0x438(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_E75[0x4];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EmitterCameraLensEffectBase");
		return Clss;
	}

};

// 0x58 (0xCE0 - 0xC88)
// Class Engine.GameEngine
class UGameEngine : public UEngine
{
public:
	float                                        MaxDeltaTime;                                      // 0xC88(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ServerFlushLogInterval;                            // 0xC8C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameInstance*                         GameInstance;                                      // 0xC90(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E76[0x48];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameEngine");
		return Clss;
	}

};

// 0xC0 (0xE8 - 0x28)
// Class Engine.GameInstance
class UGameInstance : public UObject
{
public:
	uint8                                        Pad_E77[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ULocalPlayer*>                  LocalPlayers;                                      // 0x38(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UOnlineSession*                        OnlineSession;                                     // 0x48(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E78[0x98];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameInstance");
		return Clss;
	}

	void ReceiveShutdown();
	void ReceiveInit();
	void HandleTravelError(enum class ETravelFailure FailureType);
	void HandleNetworkError(enum class ENetworkFailure FailureType, bool bIsServer);
	void DebugRemovePlayer(int32 ControllerId);
	void DebugCreatePlayer(int32 ControllerId);
};

// 0x370 (0x398 - 0x28)
// Class Engine.PlayerInput
class UPlayerInput : public UObject
{
public:
	uint8                                        Pad_E79[0xF8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FKeyBind>                      DebugExecBindings;                                 // 0x120(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                        Pad_E7A[0x30];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          InvertedAxis;                                      // 0x160(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                        Pad_E7B[0x228];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlayerInput");
		return Clss;
	}

	void SetMouseSensitivity(float Sensitivity);
	void SetBind(class FName BindName, const class FString& Command);
	void InvertAxisKey(const struct FKey& AxisKey);
	void InvertAxis(class FName AxisName);
	void ClearSmoothing();
};

// 0x38 (0x3C0 - 0x388)
// Class Engine.Brush
class ABrush : public AActor
{
public:
	enum class EBrushType                        BrushType;                                         // 0x388(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E7C[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                BrushColor;                                        // 0x38C(0x4)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PolyFlags;                                         // 0x390(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bColored : 1;                                      // Mask: 0x1, PropSize: 0x10x394(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSolidWhenSelected : 1;                            // Mask: 0x2, PropSize: 0x10x394(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPlaceableFromClassBrowser : 1;                    // Mask: 0x4, PropSize: 0x10x394(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNotForClientOrServer : 1;                         // Mask: 0x8, PropSize: 0x10x394(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_B5 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E7D[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UModel*                                Brush;                                             // 0x398(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBrushComponent*                       BrushComponent;                                    // 0x3A0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInManipulation : 1;                               // Mask: 0x1, PropSize: 0x10x3A8(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_B6 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E7E[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FGeomSelection>                SavedSelections;                                   // 0x3B0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Brush");
		return Clss;
	}

};

// 0x0 (0x3C0 - 0x3C0)
// Class Engine.Volume
class AVolume : public ABrush
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Volume");
		return Clss;
	}

};

// 0x18 (0x3A0 - 0x388)
// Class Engine.GameSession
class AGameSession : public AInfo
{
public:
	int32                                        MaxSpectators;                                     // 0x388(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxPlayers;                                        // 0x38C(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxPartySize;                                      // 0x390(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        MaxSplitscreensPerConnection;                      // 0x394(0x1)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRequiresPushToTalk;                               // 0x395(0x1)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E7F[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  SessionName;                                       // 0x398(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameSession");
		return Clss;
	}

};

// 0xE0 (0x108 - 0x28)
// Class Engine.GameUserSettings
class UGameUserSettings : public UObject
{
public:
	bool                                         bUseVSync;                                         // 0x28(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E81[0x4F];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       ResolutionSizeX;                                   // 0x78(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                       ResolutionSizeY;                                   // 0x7C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                       LastUserConfirmedResolutionSizeX;                  // 0x80(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                       LastUserConfirmedResolutionSizeY;                  // 0x84(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        WindowPosX;                                        // 0x88(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        WindowPosY;                                        // 0x8C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        FullscreenMode;                                    // 0x90(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        LastConfirmedFullscreenMode;                       // 0x94(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        PreferredFullscreenMode;                           // 0x98(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                       Version;                                           // 0x9C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        AudioQualityLevel;                                 // 0xA0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        FrameRateLimit;                                    // 0xA4(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E82[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        DesiredScreenWidth;                                // 0xAC(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUseDesiredScreenHeight;                           // 0xB0(0x1)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E83[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        DesiredScreenHeight;                               // 0xB4(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LastRecommendedScreenWidth;                        // 0xB8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LastRecommendedScreenHeight;                       // 0xBC(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LastCPUBenchmarkResult;                            // 0xC0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LastGPUBenchmarkResult;                            // 0xC4(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<float>                                LastCPUBenchmarkSteps;                             // 0xC8(0x10)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                LastGPUBenchmarkSteps;                             // 0xD8(0x10)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	float                                        LastGPUBenchmarkMultiplier;                        // 0xE8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bUseHDRDisplayOutput;                              // 0xEC(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E84[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        HDRDisplayOutputNits;                              // 0xF0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E85[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	UMulticastDelegateProperty_                  OnGameUserSettingsUINeedsUpdate;                   // 0xF8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameUserSettings");
		return Clss;
	}

	void ValidateSettings();
	bool SupportsHDRDisplayOutput();
	void SetVSyncEnabled(bool bEnable);
	void SetVisualEffectQuality(int32 Value);
	void SetViewDistanceQuality(int32 Value);
	void SetToDefaults();
	void SetTextureQuality(int32 Value);
	void SetShadowQuality(int32 Value);
	void SetScreenResolution(const struct FIntPoint& Resolution);
	void SetResolutionScaleValueEx(float NewScaleValue);
	void SetResolutionScaleValue(int32 NewScaleValue);
	void SetResolutionScaleNormalized(float NewScaleNormalized);
	void SetPostProcessingQuality(int32 Value);
	void SetOverallScalabilityLevel(int32 Value);
	void SetFullscreenMode(enum class EWindowMode InFullscreenMode);
	void SetFrameRateLimit(float NewLimit);
	void SetFoliageQuality(int32 Value);
	void SetBenchmarkFallbackValues();
	void SetAudioQualityLevel(int32 QualityLevel);
	void SetAntiAliasingQuality(int32 Value);
	void SaveSettings();
	void RunHardwareBenchmark(int32 WorkScale, float CPUMultiplier, float GPUMultiplier);
	void RevertVideoMode();
	void ResetToCurrentSettings();
	void LoadSettings(bool bForceReload);
	bool IsVSyncEnabled();
	bool IsVSyncDirty();
	bool IsScreenResolutionDirty();
	bool IsFullscreenModeDirty();
	bool IsDirty();
	int32 GetVisualEffectQuality();
	int32 GetViewDistanceQuality();
	int32 GetTextureQuality();
	int32 GetShadowQuality();
	struct FIntPoint GetScreenResolution();
	void GetResolutionScaleInformationEx(float* CurrentScaleNormalized, float* CurrentScaleValue, float* MinScaleValue, float* MaxScaleValue);
	void GetResolutionScaleInformation(float* CurrentScaleNormalized, int32* CurrentScaleValue, int32* MinScaleValue, int32* MaxScaleValue);
	enum class EWindowMode GetPreferredFullscreenMode();
	int32 GetPostProcessingQuality();
	int32 GetOverallScalabilityLevel();
	struct FIntPoint GetLastConfirmedScreenResolution();
	enum class EWindowMode GetLastConfirmedFullscreenMode();
	class UGameUserSettings* GetGameUserSettings();
	enum class EWindowMode GetFullscreenMode();
	float GetFrameRateLimit();
	int32 GetFoliageQuality();
	struct FIntPoint GetDesktopResolution();
	struct FIntPoint GetDefaultWindowPosition();
	enum class EWindowMode GetDefaultWindowMode();
	float GetDefaultResolutionScale();
	struct FIntPoint GetDefaultResolution();
	int32 GetAudioQualityLevel();
	int32 GetAntiAliasingQuality();
	void EnableHDRDisplayOutput(bool bEnable, int32 DisplayNits);
	void ConfirmVideoMode();
	void ApplySettings(bool bCheckForCommandLineOverrides);
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);
	void ApplyNonResolutionSettings();
	void ApplyHardwareBenchmarkResults();
};

// 0x60 (0x88 - 0x28)
// Class Engine.DataTable
class UDataTable : public UObject
{
public:
	class UScriptStruct*                         RowStruct;                                         // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E86[0x50];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bStripFromClientBuilds;                            // 0x80(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E87[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DataTable");
		return Clss;
	}

};

// 0x1A0 (0x528 - 0x388)
// Class Engine.NavigationData
class ANavigationData : public AActor
{
public:
	class UPrimitiveComponent*                   RenderingComp;                                     // 0x388(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNavDataConfig                        NavDataConfig;                                     // 0x390(0x50)(Protected, NativeAccessSpecifierProtected)
	uint8                                        bEnableDrawing : 1;                                // Mask: 0x1, PropSize: 0x10x3E0(0x1)(Edit, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bForceRebuildOnLoad : 1;                           // Mask: 0x2, PropSize: 0x10x3E0(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bCanBeMainNavData : 1;                             // Mask: 0x4, PropSize: 0x10x3E0(0x1)(Edit, Config, EditConst, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bCanSpawnOnRebuild : 1;                            // Mask: 0x8, PropSize: 0x10x3E0(0x1)(Edit, Config, EditConst, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bRebuildAtRuntime : 1;                             // Mask: 0x10, PropSize: 0x10x3E0(0x1)(Config, Deprecated, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_B7 : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_E88[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ERuntimeGenerationType            RuntimeGeneration;                                 // 0x3E4(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E89[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ObservedPathsTickInterval;                         // 0x3E8(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                       DataVersion;                                       // 0x3EC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_E8A[0xD0];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSupportedAreaData>            SupportedAreas;                                    // 0x4C0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_E8B[0x58];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavigationData");
		return Clss;
	}

};

// 0x978 (0x9A0 - 0x28)
// Class Engine.World
class UWorld : public UObject
{
public:
	uint8                                        Pad_E8C[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class ULevel*                                PersistentLevel;                                   // 0x30(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetDriver*                            NetDriver;                                         // 0x38(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULineBatchComponent*                   LineBatcher;                                       // 0x40(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULineBatchComponent*                   PersistentLineBatcher;                             // 0x48(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULineBatchComponent*                   ForegroundLineBatcher;                             // 0x50(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGameNetworkManager*                   NetworkManager;                                    // 0x58(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsCollisionHandler*              PhysicsCollisionHandler;                           // 0x60(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                       ExtraReferencedObjects;                            // 0x68(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UObject*>                       PerModuleDataObjects;                              // 0x78(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class ULevelStreaming*>               StreamingLevels;                                   // 0x88(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class FString                                StreamingLevelsPrefix;                             // 0x98(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevel*                                CurrentLevelPendingVisibility;                     // 0xA8(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevel*                                CurrentLevelPendingInvisibility;                   // 0xB0(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDemoNetDriver*                        DemoNetDriver;                                     // 0xB8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AParticleEventManager*                 MyParticleEventManager;                            // 0xC0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APhysicsVolume*                        DefaultPhysicsVolume;                              // 0xC8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_E8D[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UNavigationSystem*                     NavigationSystem;                                  // 0xE8(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGameModeBase*                         AuthorityGameMode;                                 // 0xF0(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGameStateBase*                        GameState;                                         // 0xF8(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAISystemBase*                         AISystem;                                          // 0x100(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAvoidanceManager*                     AvoidanceManager;                                  // 0x108(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class ULevel*>                        Levels;                                            // 0x110(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FLevelCollection>              LevelCollections;                                  // 0x120(0x10)(ZeroConstructor, Transient, NonTransactional, NativeAccessSpecifierPrivate)
	uint8                                        Pad_E8E[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class ULevel*                                CurrentLevel;                                      // 0x138(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGameInstance*                         OwningGameInstance;                                // 0x140(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UMaterialParameterCollectionInstance*> ParameterCollectionInstances;                      // 0x148(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UCanvas*                               CanvasForRenderingToTarget;                        // 0x158(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCanvas*                               CanvasForDrawMaterialToRenderTarget;               // 0x160(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_E8F[0x7D8];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UWorldComposition*                     WorldComposition;                                  // 0x940(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E90[0x4A];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bAreConstraintsDirty : 1;                          // Mask: 0x1, PropSize: 0x10x992(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_E91[0xD];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("World");
		return Clss;
	}

};

// 0x438 (0x460 - 0x28)
// Class Engine.NavigationSystem
class UNavigationSystem : public UBlueprintFunctionLibrary
{
public:
	class ANavigationData*                       MainNavData;                                       // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavigationData*                       AbstractNavData;                                   // 0x30(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoCreateNavigationData : 1;                     // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bAllowClientSideNavigation : 1;                    // Mask: 0x2, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bSupportRebuilding : 1;                            // Mask: 0x4, PropSize: 0x10x38(0x1)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bInitialBuildingLocked : 1;                        // Mask: 0x8, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_B8 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bSkipAgentHeightCheckWhenPickingNavData : 1;       // Mask: 0x20, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_B9 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_EA0[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ENavDataGatheringModeConfig       DataGatheringMode;                                 // 0x3C(0x1)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_EA1[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bGenerateNavigationOnlyAroundNavigationInvokers : 1; // Mask: 0x1, PropSize: 0x10x40(0x1)(Edit, Config, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_BA : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_EA2[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ActiveTilesUpdateInterval;                         // 0x44(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FNavDataConfig>                SupportedAgents;                                   // 0x48(0x10)(Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	float                                        DirtyAreasUpdateFreq;                              // 0x58(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EA3[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ANavigationData*>               NavDataSet;                                        // 0x60(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ANavigationData*>               NavDataRegistrationQueue;                          // 0x70(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                        Pad_EA4[0x60];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	UMulticastDelegateProperty_                  OnNavDataRegisteredEvent;                          // 0xE0(0x10)(ZeroConstructor, Transient, InstancedReference, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnNavigationGenerationFinishedDelegate;            // 0xF0(0x10)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_EA5[0x124];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EFNavigationSystemRunMode         OperationMode;                                     // 0x224(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_EA6[0x23B];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavigationSystem");
		return Clss;
	}

	void UnregisterNavigationInvoker(class AActor* Invoker);
	void SimpleMoveToLocation(class AController* Controller, struct FVector& Goal);
	void SimpleMoveToActor(class AController* Controller, class AActor* Goal);
	void SetMaxSimultaneousTileGenerationJobsCount(int32 MaxNumberOfJobs);
	void SetGeometryGatheringMode(enum class ENavDataGatheringModeConfig NewMode);
	void ResetMaxSimultaneousTileGenerationJobsCount();
	void RegisterNavigationInvoker(class AActor* Invoker, float TileGenerationRadius, float TileRemovalRadius);
	struct FVector ProjectPointToNavigation(class UObject* WorldContext, struct FVector& Point, class ANavigationData* NavData, TSubclassOf<class UNavigationQueryFilter> FilterClass, const struct FVector& QueryExtent);
	void OnNavigationBoundsUpdated(class ANavMeshBoundsVolume* NavVolume);
	bool NavigationRaycast(class UObject* WorldContext, struct FVector& RayStart, struct FVector& RayEnd, struct FVector* HitLocation, TSubclassOf<class UNavigationQueryFilter> FilterClass, class AController* Querier);
	bool IsNavigationBeingBuiltOrLocked(class UObject* WorldContext);
	bool IsNavigationBeingBuilt(class UObject* WorldContext);
	struct FVector GetRandomReachablePointInRadius(class UObject* WorldContext, struct FVector& Origin, float Radius, class ANavigationData* NavData, TSubclassOf<class UNavigationQueryFilter> FilterClass);
	struct FVector GetRandomPointInNavigableRadius(class UObject* WorldContext, struct FVector& Origin, float Radius, class ANavigationData* NavData, TSubclassOf<class UNavigationQueryFilter> FilterClass);
	enum class ENavigationQueryResult GetPathLength(class UObject* WorldContext, struct FVector& PathStart, struct FVector& PathEnd, float* PathLength, class ANavigationData* NavData, TSubclassOf<class UNavigationQueryFilter> FilterClass);
	enum class ENavigationQueryResult GetPathCost(class UObject* WorldContext, struct FVector& PathStart, struct FVector& PathEnd, float* PathCost, class ANavigationData* NavData, TSubclassOf<class UNavigationQueryFilter> FilterClass);
	class UNavigationSystem* GetNavigationSystem(class UObject* WorldContext);
	class UNavigationPath* FindPathToLocationSynchronously(class UObject* WorldContext, struct FVector& PathStart, struct FVector& PathEnd, class AActor* PathfindingContext, TSubclassOf<class UNavigationQueryFilter> FilterClass);
	class UNavigationPath* FindPathToActorSynchronously(class UObject* WorldContext, struct FVector& PathStart, class AActor* GoalActor, float TetherDistance, class AActor* PathfindingContext, TSubclassOf<class UNavigationQueryFilter> FilterClass);
};

// 0x50 (0x3D8 - 0x388)
// Class Engine.NavLinkProxy
class ANavLinkProxy : public AActor
{
public:
	uint8                                        Pad_EA8[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FNavigationLink>               PointLinks;                                        // 0x398(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNavigationSegmentLink>        SegmentLinks;                                      // 0x3A8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UNavLinkCustomComponent*               SmartLinkComp;                                     // 0x3B8(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSmartLinkIsRelevant;                              // 0x3C0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EA9[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	UMulticastDelegateProperty_                  OnSmartLinkReached;                                // 0x3C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavLinkProxy");
		return Clss;
	}

	void SetSmartLinkEnabled(bool bEnabled);
	void ResumePathFollowing(class AActor* Agent);
	void ReceiveSmartLinkReached(class AActor* Agent, struct FVector& Destination);
	bool IsSmartLinkEnabled();
	bool HasMovingAgents();
};

// 0x8 (0x390 - 0x388)
// Class Engine.LevelScriptActor
class ALevelScriptActor : public AActor
{
public:
	uint8                                        bInputEnabled : 1;                                 // Mask: 0x1, PropSize: 0x10x388(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_EAB[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelScriptActor");
		return Clss;
	}

	void WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	bool RemoteEvent(class FName EventName);
	void LevelReset();
};

// 0x18 (0x40 - 0x28)
// Class Engine.NavArea
class UNavArea : public UObject
{
public:
	float                                        DefaultCost;                                       // 0x28(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FixedAreaEnteringCost;                             // 0x2C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                DrawColor;                                         // 0x30(0x4)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNavAgentSelector                     SupportedAgents;                                   // 0x34(0x4)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        bSupportsAgent0 : 1;                               // Mask: 0x1, PropSize: 0x10x38(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportsAgent1 : 1;                               // Mask: 0x2, PropSize: 0x10x38(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportsAgent2 : 1;                               // Mask: 0x4, PropSize: 0x10x38(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportsAgent3 : 1;                               // Mask: 0x8, PropSize: 0x10x38(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportsAgent4 : 1;                               // Mask: 0x10, PropSize: 0x10x38(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportsAgent5 : 1;                               // Mask: 0x20, PropSize: 0x10x38(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportsAgent6 : 1;                               // Mask: 0x40, PropSize: 0x10x38(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportsAgent7 : 1;                               // Mask: 0x80, PropSize: 0x10x38(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportsAgent8 : 1;                               // Mask: 0x1, PropSize: 0x10x39(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportsAgent9 : 1;                               // Mask: 0x2, PropSize: 0x10x39(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportsAgent10 : 1;                              // Mask: 0x4, PropSize: 0x10x39(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportsAgent11 : 1;                              // Mask: 0x8, PropSize: 0x10x39(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportsAgent12 : 1;                              // Mask: 0x10, PropSize: 0x10x39(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportsAgent13 : 1;                              // Mask: 0x20, PropSize: 0x10x39(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportsAgent14 : 1;                              // Mask: 0x40, PropSize: 0x10x39(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportsAgent15 : 1;                              // Mask: 0x80, PropSize: 0x10x39(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EAC[0x6];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavArea");
		return Clss;
	}

};

// 0x0 (0x40 - 0x40)
// Class Engine.NavAreaMeta
class UNavAreaMeta : public UNavArea
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavAreaMeta");
		return Clss;
	}

};

// 0x5B0 (0x728 - 0x178)
// Class Engine.CharacterMovementComponent
class UCharacterMovementComponent : public UPawnMovementComponent
{
public:
	uint8                                        Pad_EB2[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class ACharacter*                            CharacterOwner;                                    // 0x188(0x8)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        GravityScale;                                      // 0x190(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxStepHeight;                                     // 0x194(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        JumpZVelocity;                                     // 0x198(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        JumpOffJumpZFactor;                                // 0x19C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WalkableFloorAngle;                                // 0x1A0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        WalkableFloorZ;                                    // 0x1A4(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	enum class EMovementMode                     MovementMode;                                      // 0x1A8(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        CustomMovementMode;                                // 0x1A9(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EB3[0x26];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GroundFriction;                                    // 0x1D0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxWalkSpeed;                                      // 0x1D4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxWalkSpeedCrouched;                              // 0x1D8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxSwimSpeed;                                      // 0x1DC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxFlySpeed;                                       // 0x1E0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxCustomMovementSpeed;                            // 0x1E4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxAcceleration;                                   // 0x1E8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinAnalogWalkSpeed;                                // 0x1EC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BrakingFrictionFactor;                             // 0x1F0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BrakingFriction;                                   // 0x1F4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseSeparateBrakingFriction : 1;                   // Mask: 0x1, PropSize: 0x10x1F8(0x1)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_BB : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_EB4[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BrakingDecelerationWalking;                        // 0x1FC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BrakingDecelerationFalling;                        // 0x200(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BrakingDecelerationSwimming;                       // 0x204(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BrakingDecelerationFlying;                         // 0x208(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AirControl;                                        // 0x20C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AirControlBoostMultiplier;                         // 0x210(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AirControlBoostVelocityThreshold;                  // 0x214(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FallingLateralFriction;                            // 0x218(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CrouchedHalfHeight;                                // 0x21C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Buoyancy;                                          // 0x220(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PerchRadiusThreshold;                              // 0x224(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PerchAdditionalHeight;                             // 0x228(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              RotationRate;                                      // 0x22C(0xC)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        bUseControllerDesiredRotation : 1;                 // Mask: 0x1, PropSize: 0x10x238(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOrientRotationToMovement : 1;                     // Mask: 0x2, PropSize: 0x10x238(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMovementInProgress : 1;                           // Mask: 0x4, PropSize: 0x10x238(0x1)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bEnableScopedMovementUpdates : 1;                  // Mask: 0x8, PropSize: 0x10x238(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceMaxAccel : 1;                                // Mask: 0x10, PropSize: 0x10x238(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRunPhysicsWithNoController : 1;                   // Mask: 0x20, PropSize: 0x10x238(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceNextFloorCheck : 1;                          // Mask: 0x40, PropSize: 0x10x238(0x1)(Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShrinkProxyCapsule : 1;                           // Mask: 0x80, PropSize: 0x10x238(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCanWalkOffLedges : 1;                             // Mask: 0x1, PropSize: 0x10x239(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCanWalkOffLedgesWhenCrouching : 1;                // Mask: 0x2, PropSize: 0x10x239(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_BC : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bDeferUpdateMoveComponent : 1;                     // Mask: 0x10, PropSize: 0x10x239(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_BD : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_EB5[0x6];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class USceneComponent*                       DeferredUpdatedMoveComponent;                      // 0x240(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxOutOfWaterStepHeight;                           // 0x248(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OutofWaterZ;                                       // 0x24C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Mass;                                              // 0x250(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnablePhysicsInteraction;                         // 0x254(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTouchForceScaledToMass;                           // 0x255(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPushForceScaledToMass;                            // 0x256(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPushForceUsingZOffset;                            // 0x257(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bScalePushForceToVelocity;                         // 0x258(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EB6[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        StandingDownwardForceScale;                        // 0x25C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InitialPushForceFactor;                            // 0x260(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PushForceFactor;                                   // 0x264(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PushForcePointZOffsetFactor;                       // 0x268(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TouchForceFactor;                                  // 0x26C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinTouchForce;                                     // 0x270(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxTouchForce;                                     // 0x274(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RepulsionForce;                                    // 0x278(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceBraking : 1;                                 // Mask: 0x1, PropSize: 0x10x27C(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_BE : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_EB7[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CrouchedSpeedMultiplier;                           // 0x280(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        UpperImpactNormalScale;                            // 0x284(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               Acceleration;                                      // 0x288(0xC)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               LastUpdateLocation;                                // 0x294(0xC)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FQuat                                 LastUpdateRotation;                                // 0x2A0(0x10)(IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                               LastUpdateVelocity;                                // 0x2B0(0xC)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ServerLastTransformUpdateTimeStamp;                // 0x2BC(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ServerLastClientGoodMoveAckTime;                   // 0x2C0(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        ServerLastClientAdjustmentTime;                    // 0x2C4(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               PendingImpulseToApply;                             // 0x2C8(0xC)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               PendingForceToApply;                               // 0x2D4(0xC)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AnalogInputModifier;                               // 0x2E0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_EB8[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxSimulationTimeStep;                             // 0x2EC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxSimulationIterations;                           // 0x2F0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDepenetrationWithGeometry;                      // 0x2F4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDepenetrationWithGeometryAsProxy;               // 0x2F8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDepenetrationWithPawn;                          // 0x2FC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDepenetrationWithPawnAsProxy;                   // 0x300(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetworkSimulatedSmoothLocationTime;                // 0x304(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetworkSimulatedSmoothRotationTime;                // 0x308(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ListenServerNetworkSimulatedSmoothLocationTime;    // 0x30C(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ListenServerNetworkSimulatedSmoothRotationTime;    // 0x310(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetworkMaxSmoothUpdateDistance;                    // 0x314(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetworkNoSmoothUpdateDistance;                     // 0x318(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENetworkSmoothingMode             NetworkSmoothingMode;                              // 0x31C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EB9[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        NetworkMinTimeBetweenClientAckGoodMoves;           // 0x320(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetworkMinTimeBetweenClientAdjustments;            // 0x324(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetworkMinTimeBetweenClientAdjustmentsLargeCorrection; // 0x328(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NetworkLargeClientCorrectionDistance;              // 0x32C(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LedgeCheckThreshold;                               // 0x330(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        JumpOutOfWaterPitch;                               // 0x334(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFindFloorResult                      CurrentFloor;                                      // 0x338(0x98)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	enum class EMovementMode                     DefaultLandMovementMode;                           // 0x3D0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMovementMode                     DefaultWaterMovementMode;                          // 0x3D1(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMovementMode                     GroundMovementMode;                                // 0x3D2(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_EBA[0x1];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bMaintainHorizontalGroundVelocity : 1;             // Mask: 0x1, PropSize: 0x10x3D4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bImpartBaseVelocityX : 1;                          // Mask: 0x2, PropSize: 0x10x3D4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bImpartBaseVelocityY : 1;                          // Mask: 0x4, PropSize: 0x10x3D4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bImpartBaseVelocityZ : 1;                          // Mask: 0x8, PropSize: 0x10x3D4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bImpartBaseAngularVelocity : 1;                    // Mask: 0x10, PropSize: 0x10x3D4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bJustTeleported : 1;                               // Mask: 0x20, PropSize: 0x10x3D4(0x1)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNetworkUpdateReceived : 1;                        // Mask: 0x40, PropSize: 0x10x3D4(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNetworkMovementModeChanged : 1;                   // Mask: 0x80, PropSize: 0x10x3D4(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreClientMovementErrorChecksAndCorrection : 1; // Mask: 0x1, PropSize: 0x10x3D5(0x1)(Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNotifyApex : 1;                                   // Mask: 0x2, PropSize: 0x10x3D5(0x1)(Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCheatFlying : 1;                                  // Mask: 0x4, PropSize: 0x10x3D5(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bWantsToCrouch : 1;                                // Mask: 0x8, PropSize: 0x10x3D5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCrouchMaintainsBaseLocation : 1;                  // Mask: 0x10, PropSize: 0x10x3D5(0x1)(Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreBaseRotation : 1;                           // Mask: 0x20, PropSize: 0x10x3D5(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFastAttachedMove : 1;                             // Mask: 0x40, PropSize: 0x10x3D5(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAlwaysCheckFloor : 1;                             // Mask: 0x80, PropSize: 0x10x3D5(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseFlatBaseForFloorChecks : 1;                    // Mask: 0x1, PropSize: 0x10x3D6(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPerformingJumpOff : 1;                            // Mask: 0x2, PropSize: 0x10x3D6(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bWantsToLeaveNavWalking : 1;                       // Mask: 0x4, PropSize: 0x10x3D6(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseRVOAvoidance : 1;                              // Mask: 0x8, PropSize: 0x10x3D6(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRequestedMoveUseAcceleration : 1;                 // Mask: 0x10, PropSize: 0x10x3D6(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_BF : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bHasRequestedVelocity : 1;                         // Mask: 0x40, PropSize: 0x10x3D6(0x1)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bRequestedMoveWithMaxSpeed : 1;                    // Mask: 0x80, PropSize: 0x10x3D6(0x1)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bWasAvoidanceUpdated : 1;                          // Mask: 0x1, PropSize: 0x10x3D7(0x1)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_C0 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bProjectNavMeshWalking : 1;                        // Mask: 0x8, PropSize: 0x10x3D7(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bProjectNavMeshOnBothWorldChannels : 1;            // Mask: 0x10, PropSize: 0x10x3D7(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_C1 : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_EBB[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AvoidanceConsiderationRadius;                      // 0x3E8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               RequestedVelocity;                                 // 0x3EC(0xC)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        AvoidanceUID;                                      // 0x3F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNavAvoidanceMask                     AvoidanceGroup;                                    // 0x3FC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FNavAvoidanceMask                     GroupsToAvoid;                                     // 0x400(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FNavAvoidanceMask                     GroupsToIgnore;                                    // 0x404(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                        AvoidanceWeight;                                   // 0x408(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               PendingLaunchVelocity;                             // 0x40C(0xC)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EBC[0xA0];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        NavMeshProjectionInterval;                         // 0x4B8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NavMeshProjectionTimer;                            // 0x4BC(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NavMeshProjectionInterpSpeed;                      // 0x4C0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NavMeshProjectionHeightScaleUp;                    // 0x4C4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NavMeshProjectionHeightScaleDown;                  // 0x4C8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NavWalkingFloorDistTolerance;                      // 0x4CC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;                           // 0x4D0(0x58)(NativeAccessSpecifierPublic)
	uint8                                        Pad_EBD[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinTimeBetweenTimeStampResets;                     // 0x538(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EBE[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRootMotionSourceGroup                CurrentRootMotion;                                 // 0x540(0x100)(Transient, NativeAccessSpecifierPublic)
	uint8                                        Pad_EBF[0x90];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRootMotionMovementParams             RootMotionParams;                                  // 0x6D0(0x40)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               AnimRootMotionVelocity;                            // 0x710(0xC)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bWasSimulatingRootMotion;                          // 0x71C(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EC0[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bAllowPhysicsRotationDuringAnimRootMotion : 1;     // Mask: 0x1, PropSize: 0x10x720(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EC1[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CharacterMovementComponent");
		return Clss;
	}

	void SetWalkableFloorZ(float InWalkableFloorZ);
	void SetWalkableFloorAngle(float InWalkableFloorAngle);
	void SetMovementMode(enum class EMovementMode NewMovementMode, uint8 NewCustomMode);
	void SetGroupsToIgnoreMask(struct FNavAvoidanceMask& GroupMask);
	void SetGroupsToIgnore(int32 GroupFlags);
	void SetGroupsToAvoidMask(struct FNavAvoidanceMask& GroupMask);
	void SetGroupsToAvoid(int32 GroupFlags);
	void SetAvoidanceGroupMask(struct FNavAvoidanceMask& GroupMask);
	void SetAvoidanceGroup(int32 GroupFlags);
	void SetAvoidanceEnabled(bool bEnable);
	float K2_GetWalkableFloorZ();
	float K2_GetWalkableFloorAngle();
	float K2_GetModifiedMaxAcceleration();
	void K2_FindFloor(const struct FVector& CapsuleLocation, struct FFindFloorResult* FloorResult);
	void K2_ComputeFloorDist(const struct FVector& CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FFindFloorResult* FloorResult);
	bool IsWalking();
	bool IsWalkable(struct FHitResult& Hit);
	float GetValidPerchRadius();
	float GetPerchRadiusThreshold();
	class UPrimitiveComponent* GetMovementBase();
	float GetMinAnalogSpeed();
	float GetMaxJumpHeight();
	float GetMaxBrakingDeceleration();
	float GetMaxAcceleration();
	struct FVector GetImpartedMovementBaseVelocity();
	struct FVector GetCurrentAcceleration();
	class ACharacter* GetCharacterOwner();
	float GetAnalogInputModifier();
	void DisableMovement();
	void CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult);
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);
	void AddImpulse(const struct FVector& Impulse, bool bVelocityChange);
	void AddForce(const struct FVector& Force);
};

// 0x20 (0x48 - 0x28)
// Class Engine.NavigationQueryFilter
class UNavigationQueryFilter : public UObject
{
public:
	TArray<struct FNavigationFilterArea>         Areas;                                             // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FNavigationFilterFlags                IncludeFlags;                                      // 0x38(0x4)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FNavigationFilterFlags                ExcludeFlags;                                      // 0x3C(0x4)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_EC2[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavigationQueryFilter");
		return Clss;
	}

};

// 0x20 (0x690 - 0x670)
// Class Engine.ShapeComponent
class UShapeComponent : public UPrimitiveComponent
{
public:
	struct FColor                                ShapeColor;                                        // 0x670(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EC3[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UBodySetup*                            ShapeBodySetup;                                    // 0x678(0x8)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawOnlyIfSelected : 1;                           // Mask: 0x1, PropSize: 0x10x680(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldCollideWhenPlacing : 1;                     // Mask: 0x2, PropSize: 0x10x680(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDynamicObstacle : 1;                              // Mask: 0x4, PropSize: 0x10x680(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_C2 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_EC4[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UNavArea>                  AreaClass;                                         // 0x688(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ShapeComponent");
		return Clss;
	}

};

// 0x10 (0x6A0 - 0x690)
// Class Engine.BoxComponent
class UBoxComponent : public UShapeComponent
{
public:
	struct FVector                               BoxExtent;                                         // 0x690(0xC)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_EC6[0x4];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BoxComponent");
		return Clss;
	}

	void SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps);
	struct FVector GetUnscaledBoxExtent();
	struct FVector GetScaledBoxExtent();
};

// 0x28 (0x50 - 0x28)
// Class Engine.NavLinkDefinition
class UNavLinkDefinition : public UObject
{
public:
	TArray<struct FNavigationLink>               Links;                                             // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNavigationSegmentLink>        SegmentLinks;                                      // 0x38(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_EC7[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavLinkDefinition");
		return Clss;
	}

};

// 0x100 (0x628 - 0x528)
// Class Engine.RecastNavMesh
class ARecastNavMesh : public ANavigationData
{
public:
	uint8                                        bDrawTriangleEdges : 1;                            // Mask: 0x1, PropSize: 0x10x528(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawPolyEdges : 1;                                // Mask: 0x2, PropSize: 0x10x528(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawFilledPolys : 1;                              // Mask: 0x4, PropSize: 0x10x528(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawNavMeshEdges : 1;                             // Mask: 0x8, PropSize: 0x10x528(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawTileBounds : 1;                               // Mask: 0x10, PropSize: 0x10x528(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawPathCollidingGeometry : 1;                    // Mask: 0x20, PropSize: 0x10x528(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawTileLabels : 1;                               // Mask: 0x40, PropSize: 0x10x528(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawPolygonLabels : 1;                            // Mask: 0x80, PropSize: 0x10x528(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawDefaultPolygonCost : 1;                       // Mask: 0x1, PropSize: 0x10x529(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawLabelsOnPathNodes : 1;                        // Mask: 0x2, PropSize: 0x10x529(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawNavLinks : 1;                                 // Mask: 0x4, PropSize: 0x10x529(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawFailedNavLinks : 1;                           // Mask: 0x8, PropSize: 0x10x529(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawClusters : 1;                                 // Mask: 0x10, PropSize: 0x10x529(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawOctree : 1;                                   // Mask: 0x20, PropSize: 0x10x529(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDistinctlyDrawTilesBeingBuilt : 1;                // Mask: 0x40, PropSize: 0x10x529(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawNavMesh : 1;                                  // Mask: 0x80, PropSize: 0x10x529(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EC8[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DrawOffset;                                        // 0x52C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFixedTilePoolSize : 1;                            // Mask: 0x1, PropSize: 0x10x530(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_C3 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_EC9[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TilePoolSize;                                      // 0x534(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TileSizeUU;                                        // 0x538(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CellSize;                                          // 0x53C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CellHeight;                                        // 0x540(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AgentRadius;                                       // 0x544(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AgentHeight;                                       // 0x548(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AgentMaxHeight;                                    // 0x54C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AgentMaxSlope;                                     // 0x550(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AgentMaxStepHeight;                                // 0x554(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinRegionArea;                                     // 0x558(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MergeRegionSize;                                   // 0x55C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxSimplificationError;                            // 0x560(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxSimultaneousTileGenerationJobsCount;            // 0x564(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        TileNumberHardLimit;                               // 0x568(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PolyRefTileBits;                                   // 0x56C(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PolyRefNavPolyBits;                                // 0x570(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PolyRefSaltBits;                                   // 0x574(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DefaultDrawDistance;                               // 0x578(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DefaultMaxSearchNodes;                             // 0x57C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DefaultMaxHierarchicalSearchNodes;                 // 0x580(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERecastPartitioning               RegionPartitioning;                                // 0x584(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERecastPartitioning               LayerPartitioning;                                 // 0x585(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_ECA[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        RegionChunkSplits;                                 // 0x588(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        LayerChunkSplits;                                  // 0x58C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSortNavigationAreasByCost : 1;                    // Mask: 0x1, PropSize: 0x10x590(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPerformVoxelFiltering : 1;                        // Mask: 0x2, PropSize: 0x10x590(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMarkLowHeightAreas : 1;                           // Mask: 0x4, PropSize: 0x10x590(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFilterLowSpanSequences : 1;                       // Mask: 0x8, PropSize: 0x10x590(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFilterLowSpanFromTileCache : 1;                   // Mask: 0x10, PropSize: 0x10x590(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDoFullyAsyncNavDataGathering : 1;                 // Mask: 0x20, PropSize: 0x10x590(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseBetterOffsetsFromCorners : 1;                  // Mask: 0x40, PropSize: 0x10x590(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStoreEmptyTileLayers : 1;                         // Mask: 0x80, PropSize: 0x10x590(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseVirtualFilters : 1;                            // Mask: 0x1, PropSize: 0x10x591(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowNavLinkAsPathEnd : 1;                        // Mask: 0x2, PropSize: 0x10x591(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseVoxelCache : 1;                                // Mask: 0x4, PropSize: 0x10x591(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_C4 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_ECB[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TileSetUpdateInterval;                             // 0x594(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        HeuristicScale;                                    // 0x598(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VerticalDeviationFromGroundCompensation;           // 0x59C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_ECC[0x88];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RecastNavMesh");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.LocalMessage
class ULocalMessage : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LocalMessage");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.OnlineSession
class UOnlineSession : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("OnlineSession");
		return Clss;
	}

};

// 0x28 (0x3B0 - 0x388)
// Class Engine.NavigationObjectBase
class ANavigationObjectBase : public AActor
{
public:
	uint8                                        Pad_ECD[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UCapsuleComponent*                     CapsuleComponent;                                  // 0x390(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBillboardComponent*                   GoodSprite;                                        // 0x398(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBillboardComponent*                   BadSprite;                                         // 0x3A0(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsPIEPlayerStart : 1;                             // Mask: 0x1, PropSize: 0x10x3A8(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_ECE[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavigationObjectBase");
		return Clss;
	}

};

// 0xB8 (0x440 - 0x388)
// Class Engine.PlayerState
class APlayerState : public AInfo
{
public:
	float                                        Score;                                             // 0x388(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Ping;                                              // 0x38C(0x1)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_ECF[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                PlayerName;                                        // 0x390(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_ED0[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        PlayerID;                                          // 0x3B0(0x4)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsSpectator : 1;                                  // Mask: 0x1, PropSize: 0x10x3B4(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOnlySpectator : 1;                                // Mask: 0x2, PropSize: 0x10x3B4(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsABot : 1;                                       // Mask: 0x4, PropSize: 0x10x3B4(0x1)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_C5 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bIsInactive : 1;                                   // Mask: 0x10, PropSize: 0x10x3B4(0x1)(Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFromPreviousLevel : 1;                            // Mask: 0x20, PropSize: 0x10x3B4(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_C6 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_ED1[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        StartTime;                                         // 0x3B8(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_ED2[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class ULocalMessage>             EngineMessageClass;                                // 0x3C0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_ED3[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                SavedNetworkAddress;                               // 0x3D0(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                      UniqueId;                                          // 0x3E0(0x18)(Net, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_ED4[0x20];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                PlayerNamePrivate;                                 // 0x418(0x10)(Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_ED5[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bShouldUpdateReplicatedPing;                       // 0x438(0x1)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_ED6[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlayerState");
		return Clss;
	}

	void ReceiveOverrideWith(class APlayerState* OldPlayerState);
	void ReceiveCopyProperties(class APlayerState* NewPlayerState);
	void OnRep_UniqueId();
	void OnRep_Score();
	void OnRep_PlayerName();
	void OnRep_PlayerId();
	void OnRep_bIsInactive();
	class FString GetPlayerName();
};

// 0x1640 (0x19C8 - 0x388)
// Class Engine.PlayerCameraManager
class APlayerCameraManager : public AActor
{
public:
	class APlayerController*                     PCOwner;                                           // 0x388(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                       TransformComponent;                                // 0x390(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EE3[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultFOV;                                        // 0x3A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EE4[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultOrthoWidth;                                 // 0x3A8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EE5[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultAspectRatio;                                // 0x3B0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EE6[0x4C];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FCameraCacheEntry                     CameraCache;                                       // 0x400(0x520)(Transient, NativeAccessSpecifierPublic)
	struct FCameraCacheEntry                     LastFrameCameraCache;                              // 0x920(0x520)(Transient, NativeAccessSpecifierPublic)
	struct FTViewTarget                          ViewTarget;                                        // 0xE40(0x530)(Transient, NativeAccessSpecifierPublic)
	struct FTViewTarget                          PendingViewTarget;                                 // 0x1370(0x530)(Transient, NativeAccessSpecifierPublic)
	uint8                                        Pad_EE7[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UCameraModifier*>               ModifierList;                                      // 0x18B8(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UCameraModifier>>   DefaultModifiers;                                  // 0x18C8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                        FreeCamDistance;                                   // 0x18D8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               FreeCamOffset;                                     // 0x18DC(0xC)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               ViewTargetOffset;                                  // 0x18E8(0xC)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EE8[0x14];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AEmitterCameraLensEffectBase*>  CameraLensEffects;                                 // 0x1908(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UCameraModifier_CameraShake*           CachedCameraShakeMod;                              // 0x1918(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraAnimInst*                       AnimInstPool;                                      // 0x1920(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_EE9[0x38];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FPostProcessSettings>          PostProcessBlendCache;                             // 0x1960(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_EEA[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UCameraAnimInst*>               ActiveAnims;                                       // 0x1980(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UCameraAnimInst*>               FreeAnims;                                         // 0x1990(0x10)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class ACameraActor*                          AnimCameraActor;                                   // 0x19A0(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bIsOrthographic : 1;                               // Mask: 0x1, PropSize: 0x10x19A8(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_C7 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bUseClientSideCameraUpdates : 1;                   // Mask: 0x40, PropSize: 0x10x19A8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_C8 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_EEB[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ViewPitchMin;                                      // 0x19AC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ViewPitchMax;                                      // 0x19B0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ViewYawMin;                                        // 0x19B4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ViewYawMax;                                        // 0x19B8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ViewRollMin;                                       // 0x19BC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ViewRollMax;                                       // 0x19C0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EEC[0x4];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlayerCameraManager");
		return Clss;
	}

	void StopCameraShake(class UCameraShake* ShakeInstance, bool bImmediately);
	void StopCameraFade();
	void StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate);
	void StopAllInstancesOfCameraShake(TSubclassOf<class UCameraShake> Shake, bool bImmediately);
	void StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate);
	void StopAllCameraShakes(bool bImmediately);
	void StopAllCameraAnims(bool bImmediate);
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, const struct FLinearColor& Color, bool bShouldFadeAudio, bool bHoldWhenFinished);
	void SetManualCameraFade(float InFadeAmount, const struct FLinearColor& Color, bool bInFadeAudio);
	bool RemoveCameraModifier(class UCameraModifier* ModifierToRemove);
	void RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter);
	class UCameraShake* PlayCameraShake(TSubclassOf<class UCameraShake> ShakeClass, float Scale, enum class ECameraAnimPlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);
	class UCameraAnimInst* PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, enum class ECameraAnimPlaySpace PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void PhotographyCameraModify(const struct FVector& NewCameraLocation, const struct FVector& PreviousCameraLocation, const struct FVector& OriginalCameraLocation, struct FVector* ResultCameraLocation);
	void OnPhotographySessionStart();
	void OnPhotographySessionEnd();
	void OnPhotographyMultiPartCaptureStart();
	void OnPhotographyMultiPartCaptureEnd();
	class APlayerController* GetOwningPlayerController();
	float GetFOVAngle();
	struct FRotator GetCameraRotation();
	struct FVector GetCameraLocation();
	class UCameraModifier* FindCameraModifierByClass(TSubclassOf<class UCameraModifier> ModifierClass);
	void ClearCameraLensEffects();
	bool BlueprintUpdateCamera(class AActor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV);
	class UCameraModifier* AddNewCameraModifier(TSubclassOf<class UCameraModifier> ModifierClass);
	class AEmitterCameraLensEffectBase* AddCameraLensEffect(TSubclassOf<class AEmitterCameraLensEffectBase> LensEffectEmitterClass);
};

// 0x540 (0x7D0 - 0x290)
// Class Engine.CameraComponent
class UCameraComponent : public USceneComponent
{
public:
	float                                        FieldOfView;                                       // 0x290(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OrthoWidth;                                        // 0x294(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OrthoNearClipPlane;                                // 0x298(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OrthoFarClipPlane;                                 // 0x29C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AspectRatio;                                       // 0x2A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bConstrainAspectRatio : 1;                         // Mask: 0x1, PropSize: 0x10x2A4(0x1)(Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseFieldOfViewForLOD : 1;                         // Mask: 0x2, PropSize: 0x10x2A4(0x1)(Edit, BlueprintVisible, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLockToHmd : 1;                                    // Mask: 0x4, PropSize: 0x10x2A4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsePawnControlRotation : 1;                       // Mask: 0x8, PropSize: 0x10x2A4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_C9 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_EEF[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ECameraProjectionMode             ProjectionMode;                                    // 0x2A8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EF0[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PostProcessBlendWeight;                            // 0x2AC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPostProcessSettings                  PostProcessSettings;                               // 0x2B0(0x4C0)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	uint8                                        Pad_EF1[0x58];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseControllerViewRotation : 1;                    // Mask: 0x1, PropSize: 0x10x7C8(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EF2[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CameraComponent");
		return Clss;
	}

	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);
	void SetProjectionMode(enum class ECameraProjectionMode InProjectionMode);
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);
	void SetOrthoWidth(float InOrthoWidth);
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);
	void SetFieldOfView(float InFieldOfView);
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);
	void SetAspectRatio(float InAspectRatio);
	void GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView);
	void AddOrUpdateBlendable(UInterfaceProperty_ InBlendableObject, float InWeight);
};

// 0x88 (0x410 - 0x388)
// Class Engine.SkeletalMeshActor
class ASkeletalMeshActor : public AActor
{
public:
	uint8                                        Pad_EF3[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bShouldDoAnimNotifies : 1;                         // Mask: 0x1, PropSize: 0x10x390(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bWakeOnLevelStart : 1;                             // Mask: 0x2, PropSize: 0x10x390(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_CA : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_EF4[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMeshComponent*                SkeletalMeshComponent;                             // 0x398(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                         ReplicatedMesh;                                    // 0x3A0(0x8)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                         ReplicatedPhysAsset;                               // 0x3A8(0x8)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                    ReplicatedMaterial0;                               // 0x3B0(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                    ReplicatedMaterial1;                               // 0x3B8(0x8)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_EF5[0x50];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkeletalMeshActor");
		return Clss;
	}

	void OnRep_ReplicatedPhysAsset();
	void OnRep_ReplicatedMesh();
	void OnRep_ReplicatedMaterial1();
	void OnRep_ReplicatedMaterial0();
};

// 0x8 (0x3B8 - 0x3B0)
// Class Engine.PlayerStart
class APlayerStart : public ANavigationObjectBase
{
public:
	class FName                                  PlayerStartTag;                                    // 0x3B0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlayerStart");
		return Clss;
	}

};

// 0x178 (0x8F0 - 0x778)
// Class Engine.SkinnedMeshComponent
class USkinnedMeshComponent : public UMeshComponent
{
public:
	class USkeletalMesh*                         SkeletalMesh;                                      // 0x778(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USkinnedMeshComponent>  MasterPoseComponent;                               // 0x780(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F00[0x54];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseBoundsFromMasterPoseComponent : 1;             // Mask: 0x1, PropSize: 0x10x7DC(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_CB : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F01[0x23];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPhysicsAsset*                         PhysicsAssetOverride;                              // 0x800(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ForcedLodModel;                                    // 0x808(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MinLodModel;                                       // 0x80C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F02[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSkelMeshComponentLODInfo>     LODInfo;                                           // 0x820(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	float                                        StreamingDistanceMultiplier;                       // 0x830(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                WireframeColor;                                    // 0x834(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceWireframe : 1;                               // Mask: 0x1, PropSize: 0x10x838(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisplayBones : 1;                                 // Mask: 0x2, PropSize: 0x10x838(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableMorphTarget : 1;                           // Mask: 0x4, PropSize: 0x10x838(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHideSkin : 1;                                     // Mask: 0x8, PropSize: 0x10x838(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_CC : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F03[0x17];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bPerBoneMotionBlur : 1;                            // Mask: 0x1, PropSize: 0x10x850(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bComponentUseFixedSkelBounds : 1;                  // Mask: 0x2, PropSize: 0x10x850(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bConsiderAllBodiesForBounds : 1;                   // Mask: 0x4, PropSize: 0x10x850(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_CD : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F04[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EMeshComponentUpdateFlag          MeshComponentUpdateFlag;                           // 0x854(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F05[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bForceMeshObjectUpdate : 1;                        // Mask: 0x1, PropSize: 0x10x858(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bCanHighlightSelectedSections : 1;                 // Mask: 0x2, PropSize: 0x10x858(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRecentlyRendered : 1;                             // Mask: 0x4, PropSize: 0x10x858(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_CE : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F06[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        CustomSortAlternateIndexMode;                      // 0x85C(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F07[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bCastCapsuleDirectShadow : 1;                      // Mask: 0x1, PropSize: 0x10x860(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastCapsuleIndirectShadow : 1;                    // Mask: 0x2, PropSize: 0x10x860(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_CF : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F08[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CapsuleIndirectShadowMinVisibility;                // 0x864(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCPUSkinning : 1;                                  // Mask: 0x1, PropSize: 0x10x868(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D0 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F09[0x13];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBoxSphereBounds                      CachedLocalBounds;                                 // 0x87C(0x1C)(Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                         bCachedLocalBoundsUpToDate;                        // 0x898(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bEnableUpdateRateOptimizations;                    // 0x899(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDisplayDebugUpdateRateOptimizations;              // 0x89A(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F0A[0x55];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkinnedMeshComponent");
		return Clss;
	}

	void UnHideBoneByName(class FName BoneName);
	void TransformToBoneSpace(class FName BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void TransformFromBoneSpace(class FName BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void SetVertexColorOverride_LinearColor(int32 LODIndex, TArray<struct FLinearColor>& VertexColors);
	void SetSkinWeightOverride(int32 LODIndex, TArray<struct FSkelMeshSkinWeightInfo>& SkinWeights);
	void SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bReinitPose);
	void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);
	void SetMinLOD(int32 InNewMinLOD);
	void SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent);
	void SetForcedLOD(int32 InNewForcedLOD);
	void SetCastCapsuleIndirectShadow(bool bNewValue);
	void SetCastCapsuleDirectShadow(bool bNewValue);
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);
	bool IsBoneHiddenByName(class FName BoneName);
	void HideBoneByName(class FName BoneName, enum class EPhysBodyOp PhysBodyOption);
	class FName GetSocketBoneName(class FName InSocketName);
	struct FVector GetRefPosePosition(int32 BoneIndex);
	class FName GetParentBone(class FName BoneName);
	int32 GetNumBones();
	class FName GetBoneName(int32 BoneIndex);
	int32 GetBoneIndex(class FName BoneName);
	class FName FindClosestBone_K2(const struct FVector& TestLocation, struct FVector* BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);
	void ClearVertexColorOverride(int32 LODIndex);
	void ClearSkinWeightOverride(int32 LODIndex);
	bool BoneIsChildOf(class FName BoneName, class FName ParentBoneName);
};

// 0x600 (0xEF0 - 0x8F0)
// Class Engine.SkeletalMeshComponent
class USkeletalMeshComponent : public USkinnedMeshComponent
{
public:
	uint8                                        Pad_F29[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAnimationMode                    AnimationMode;                                     // 0x8F8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_F2A[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                AnimBlueprintGeneratedClass;                       // 0x900(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>             AnimClass;                                         // 0x908(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimInstance*                         AnimScriptInstance;                                // 0x910(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimInstance*>                 SubInstances;                                      // 0x918(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class UAnimInstance*                         PostProcessAnimInstance;                           // 0x928(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSingleAnimationPlayData              AnimationData;                                     // 0x930(0x18)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_F2B[0x30];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FTransform>                    CachedBoneSpaceTransforms;                         // 0x978(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                    CachedComponentSpaceTransforms;                    // 0x988(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                        Pad_F2C[0x20];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GlobalAnimRateScale;                               // 0x9B8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasValidBodies : 1;                               // Mask: 0x1, PropSize: 0x10x9BC(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D1 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F2D[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EKinematicBonesUpdateToPhysics    KinematicBonesUpdateType;                          // 0x9C0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPhysicsTransformUpdateMode       PhysicsTransformUpdateMode;                        // 0x9C1(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F2E[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bBlendPhysics : 1;                                 // Mask: 0x1, PropSize: 0x10x9C4(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnablePhysicsOnDedicatedServer : 1;               // Mask: 0x2, PropSize: 0x10x9C4(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUpdateJointsFromAnimation : 1;                    // Mask: 0x4, PropSize: 0x10x9C4(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableClothSimulation : 1;                       // Mask: 0x8, PropSize: 0x10x9C4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableAnimCurves : 1;                            // Mask: 0x10, PropSize: 0x10x9C4(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bCollideWithEnvironment : 1;                       // Mask: 0x20, PropSize: 0x10x9C4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCollideWithAttachedChildren : 1;                  // Mask: 0x40, PropSize: 0x10x9C4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLocalSpaceSimulation : 1;                         // Mask: 0x80, PropSize: 0x10x9C4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClothMorphTarget : 1;                             // Mask: 0x1, PropSize: 0x10x9C5(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bResetAfterTeleport : 1;                           // Mask: 0x2, PropSize: 0x10x9C5(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D2 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F2F[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TeleportDistanceThreshold;                         // 0x9C8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TeleportRotationThreshold;                         // 0x9CC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ClothBlendWeight;                                  // 0x9D0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F30[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               RootBoneTranslation;                               // 0x9D8(0xC)(Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNoSkeletonUpdate : 1;                             // Mask: 0x1, PropSize: 0x10x9E4(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPauseAnims : 1;                                   // Mask: 0x2, PropSize: 0x10x9E4(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D3 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F31[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bUseRefPoseOnInitAnim;                             // 0x9E8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F32[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bEnablePerPolyCollision : 1;                       // Mask: 0x1, PropSize: 0x10x9EC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D4 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F33[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UBodySetup*                            BodySetup;                                         // 0x9F0(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOnlyAllowAutonomousTickPose : 1;                  // Mask: 0x1, PropSize: 0x10x9F8(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsAutonomousTickPose : 1;                         // Mask: 0x2, PropSize: 0x10x9F8(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceRefpose : 1;                                 // Mask: 0x4, PropSize: 0x10x9F8(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOldForceRefPose : 1;                              // Mask: 0x8, PropSize: 0x10x9F8(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowPrePhysBones : 1;                             // Mask: 0x10, PropSize: 0x10x9F8(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRequiredBonesUpToDate : 1;                        // Mask: 0x20, PropSize: 0x10x9F8(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAnimTreeInitialised : 1;                          // Mask: 0x40, PropSize: 0x10x9F8(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIncludeComponentLocationIntoBounds : 1;           // Mask: 0x80, PropSize: 0x10x9F8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableLineCheckWithBounds : 1;                    // Mask: 0x1, PropSize: 0x10x9F9(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D5 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F34[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint16                                       CachedAnimCurveUidVersion;                         // 0x9FC(0x2)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F35[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               LineCheckBoundsScale;                              // 0xA00(0xC)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F36[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	UMulticastDelegateProperty_                  OnConstraintBroken;                                // 0xA10(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_F37[0x3C0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimSequence*                         SequenceToPlay;                                    // 0xDE0(0x8)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimationAsset*                       AnimToPlay;                                        // 0xDE8(0x8)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bDefaultLooping : 1;                               // Mask: 0x1, PropSize: 0x10xDF0(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bDefaultPlaying : 1;                               // Mask: 0x2, PropSize: 0x10xDF0(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_D6 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F38[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultPosition;                                   // 0xDF4(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        DefaultPlayRate;                                   // 0xDF8(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        LastPoseTickTime;                                  // 0xDFC(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F39[0xE0];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bNeedsQueuedAnimEventsDispatched;                  // 0xEE0(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_F3A[0xF];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkeletalMeshComponent");
		return Clss;
	}

	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);
	void SuspendClothingSimulation();
	void Stop();
	void SnapshotPose(struct FPoseSnapshot& Snapshot);
	void SetUpdateAnimationInEditor(bool NewUpdateState);
	void SetPosition(float InPos, bool bFireNotifies);
	void SetPlayRate(float Rate);
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, class FName BoneName, bool bIncludeSelf);
	void SetMorphTarget(class FName MorphTargetName, float Value, bool bRemoveZeroWeight);
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, class FName BoneName, bool bIncludeSelf);
	void SetEnableBodyGravity(bool bEnableGravity, class FName BoneName);
	void SetDisableAnimCurves(bool bInDisableAnimCurves);
	void SetConstraintProfileForAll(class FName ProfileName, bool bDefaultIfNotFound);
	void SetConstraintProfile(class FName JointName, class FName ProfileName, bool bDefaultIfNotFound);
	void SetClothMaxDistanceScale(float Scale);
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, class FName BoneName);
	void SetAnimInstanceClass(class UClass* NewClass);
	void SetAnimationMode(enum class EAnimationMode InAnimationMode);
	void SetAnimation(class UAnimationAsset* NewAnimToPlay);
	void SetAngularLimits(class FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void SetAllBodiesBelowSimulatePhysics(class FName& InBoneName, bool bNewSimulate, bool bIncludeSelf);
	void SetAllBodiesBelowPhysicsBlendWeight(class FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);
	void ResumeClothingSimulation();
	void ResetClothTeleportMode();
	void ResetAllBodiesSimulatePhysics();
	void PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping);
	void Play(bool bLooping);
	void OverrideAnimationData(class UAnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);
	bool K2_GetClosestPointOnPhysicsAsset(struct FVector& WorldPosition, struct FVector* ClosestWorldPosition, struct FVector* Normal, class FName* BoneName, float* Distance);
	bool IsPlaying();
	bool IsClothingSimulationSuspended();
	bool IsBodyGravityEnabled(class FName BoneName);
	struct FVector GetSkeletalCenterOfMass();
	class UAnimInstance* GetPostProcessInstance();
	float GetPosition();
	float GetPlayRate();
	float GetMorphTarget(class FName MorphTargetName);
	bool GetDisableAnimCurves();
	void GetCurrentJointAngles(class FName InBoneName, float* Swing1Angle, float* TwistAngle, float* Swing2Angle);
	float GetClothMaxDistanceScale();
	float GetBoneMass(class FName BoneName, bool bScaleMass);
	class UAnimInstance* GetAnimInstance();
	enum class EAnimationMode GetAnimationMode();
	void ForceClothNextUpdateTeleportAndReset();
	void ForceClothNextUpdateTeleport();
	class FName FindConstraintBoneName(int32 ConstraintIndex);
	void ClearMorphTargets();
	void BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, class FName InBoneName);
	void BindClothToMasterPoseComponent();
	void AddImpulseToAllBodiesBelow(const struct FVector& Impulse, class FName BoneName, bool bVelChange, bool bIncludeSelf);
	void AddForceToAllBodiesBelow(const struct FVector& Force, class FName BoneName, bool bAccelChange, bool bIncludeSelf);
	void AccumulateAllBodiesBelowPhysicsBlendWeight(class FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);
};

// 0x28 (0x410 - 0x3E8)
// Class Engine.DefaultPawn
class ADefaultPawn : public APawn
{
public:
	float                                        BaseTurnRate;                                      // 0x3E8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BaseLookUpRate;                                    // 0x3EC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPawnMovementComponent*                MovementComponent;                                 // 0x3F0(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                      CollisionComponent;                                // 0x3F8(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                  MeshComponent;                                     // 0x400(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAddDefaultMovementBindings : 1;                   // Mask: 0x1, PropSize: 0x10x408(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F3B[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DefaultPawn");
		return Clss;
	}

	void TurnAtRate(float Rate);
	void MoveUp_World(float Val);
	void MoveRight(float Val);
	void MoveForward(float Val);
	void LookUpAtRate(float Rate);
};

// 0x0 (0x410 - 0x410)
// Class Engine.SpectatorPawn
class ASpectatorPawn : public ADefaultPawn
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SpectatorPawn");
		return Clss;
	}

};

// 0x10 (0x398 - 0x388)
// Class Engine.StaticMeshActor
class AStaticMeshActor : public AActor
{
public:
	class UStaticMeshComponent*                  StaticMeshComponent;                               // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStaticMeshReplicateMovement;                      // 0x390(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENavDataGatheringMode             NavigationGeometryGatheringMode;                   // 0x391(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F3C[0x6];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StaticMeshActor");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.AssetUserData
class UAssetUserData : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AssetUserData");
		return Clss;
	}

};

// 0xE8 (0x470 - 0x388)
// Class Engine.HUD
class AHUD : public AActor
{
public:
	class APlayerController*                     PlayerOwner;                                       // 0x388(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLostFocusPaused : 1;                              // Mask: 0x1, PropSize: 0x10x390(0x1)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowHUD : 1;                                      // Mask: 0x2, PropSize: 0x10x390(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowDebugInfo : 1;                                // Mask: 0x4, PropSize: 0x10x390(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowHitBoxDebugInfo : 1;                          // Mask: 0x8, PropSize: 0x10x390(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowOverlays : 1;                                 // Mask: 0x10, PropSize: 0x10x390(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableDebugTextShadow : 1;                        // Mask: 0x20, PropSize: 0x10x390(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D7 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F4A[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class AActor*>                        PostRenderedActors;                                // 0x398(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_F4B[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          DebugDisplay;                                      // 0x3B0(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	TArray<class FName>                          ToggledDebugCategories;                            // 0x3C0(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	class UCanvas*                               Canvas;                                            // 0x3D0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvas*                               DebugCanvas;                                       // 0x3D8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FDebugTextInfo>                DebugTextList;                                     // 0x3E0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class AActor>                    ShowDebugTargetDesiredClass;                       // 0x3F0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                ShowDebugTargetActor;                              // 0x3F8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_F4C[0x70];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HUD");
		return Clss;
	}

	void ShowHUD();
	void ShowDebugToggleSubCategory(class FName Category);
	void ShowDebugForReticleTargetToggle(TSubclassOf<class AActor> DesiredClass);
	void ShowDebug(class FName DebugType);
	void RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText);
	void RemoveAllDebugStrings();
	void ReceiveHitBoxRelease(class FName BoxName);
	void ReceiveHitBoxEndCursorOver(class FName BoxName);
	void ReceiveHitBoxClick(class FName BoxName);
	void ReceiveHitBoxBeginCursorOver(class FName BoxName);
	void ReceiveDrawHUD(int32 SizeX, int32 SizeY);
	struct FVector Project(const struct FVector& Location);
	void GetTextSize(const class FString& Text, float* OutWidth, float* OutHeight, class UFont* Font, float Scale);
	class APlayerController* GetOwningPlayerController();
	class APawn* GetOwningPawn();
	void GetActorsInSelectionRectangle(TSubclassOf<class AActor> ClassFilter, struct FVector2D& FirstPoint, struct FVector2D& SecondPoint, TArray<class AActor*>* OutActors, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed);
	void DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);
	void DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, enum class EBlendMode BlendMode, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void DrawText(const class FString& Text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition);
	void DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);
	void DrawMaterialTriangle(class UMaterialInterface* Material, const struct FVector2D& V0_Pos, const struct FVector2D& V1_Pos, const struct FVector2D& V2_Pos, const struct FVector2D& V0_UV, const struct FVector2D& V1_UV, const struct FVector2D& V2_UV, const struct FLinearColor& V0_Color, const struct FLinearColor& V1_Color, const struct FLinearColor& V2_Color);
	void DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);
	void DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor, float LineThickness);
	void Deproject(float ScreenX, float ScreenY, struct FVector* WorldPosition, struct FVector* WorldDirection);
	void AddHitBox(const struct FVector2D& Position, const struct FVector2D& Size, class FName InName, bool bConsumesInput, int32 Priority);
	void AddDebugText(const class FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow);
};

// 0x18 (0x190 - 0x178)
// Class Engine.FloatingPawnMovement
class UFloatingPawnMovement : public UPawnMovementComponent
{
public:
	float                                        MaxSpeed;                                          // 0x178(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Acceleration;                                      // 0x17C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Deceleration;                                      // 0x180(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TurningBoost;                                      // 0x184(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPositionCorrected : 1;                            // Mask: 0x1, PropSize: 0x10x188(0x1)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_F4D[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("FloatingPawnMovement");
		return Clss;
	}

};

// 0x8 (0x198 - 0x190)
// Class Engine.SpectatorPawnMovement
class USpectatorPawnMovement : public UFloatingPawnMovement
{
public:
	uint8                                        bIgnoreTimeDilation : 1;                           // Mask: 0x1, PropSize: 0x10x190(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F4E[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SpectatorPawnMovement");
		return Clss;
	}

};

// 0x10 (0x3D0 - 0x3C0)
// Class Engine.PhysicsVolume
class APhysicsVolume : public AVolume
{
public:
	float                                        TerminalVelocity;                                  // 0x3C0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Priority;                                          // 0x3C4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FluidFriction;                                     // 0x3C8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bWaterVolume : 1;                                  // Mask: 0x1, PropSize: 0x10x3CC(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPhysicsOnContact : 1;                             // Mask: 0x2, PropSize: 0x10x3CC(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F4F[0x3];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsVolume");
		return Clss;
	}

};

// 0xA0 (0x880 - 0x7E0)
// Class Engine.InstancedStaticMeshComponent
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	TArray<struct FInstancedStaticMeshInstanceData> PerInstanceSMData;                                 // 0x7E0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        InstancingRandomSeed;                              // 0x7F0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        InstanceStartCullDistance;                         // 0x7F4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        InstanceEndCullDistance;                           // 0x7F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F59[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                InstanceReorderTable;                              // 0x800(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                RemovedInstances;                                  // 0x810(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_F5A[0x40];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPhysicsSerializer*                    PhysicsSerializer;                                 // 0x860(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumPendingLightmaps;                               // 0x868(0x4)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_F5B[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FInstancedStaticMeshMappingInfo> CachedMappings;                                    // 0x870(0x10)(ZeroConstructor, Transient, DuplicateTransient, Protected, TextExportTransient, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InstancedStaticMeshComponent");
		return Clss;
	}

	bool UpdateInstanceTransform(int32 InstanceIndex, struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);
	void SetCullDistances(int32 StartCullDistance, int32 EndCullDistance);
	bool RemoveInstance(int32 InstanceIndex);
	bool GetInstanceTransform(int32 InstanceIndex, struct FTransform* OutInstanceTransform, bool bWorldSpace);
	TArray<int32> GetInstancesOverlappingSphere(struct FVector& Center, float Radius, bool bSphereInWorldSpace);
	TArray<int32> GetInstancesOverlappingBox(struct FBox& Box, bool bBoxInWorldSpace);
	int32 GetInstanceCount();
	void ClearInstances();
	int32 AddInstanceWorldSpace(struct FTransform& WorldTransform);
	int32 AddInstance(struct FTransform& InstanceTransform);
};

// 0x118 (0x998 - 0x880)
// Class Engine.HierarchicalInstancedStaticMeshComponent
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{
public:
	uint8                                        Pad_F5D[0x68];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                SortedInstances;                                   // 0x8E8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        NumBuiltInstances;                                 // 0x8F8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F5E[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBox                                  BuiltInstanceBounds;                               // 0x900(0x1C)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                  UnbuiltInstanceBounds;                             // 0x91C(0x1C)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FBox>                          UnbuiltInstanceBoundsList;                         // 0x938(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bEnableDensityScaling : 1;                         // Mask: 0x1, PropSize: 0x10x948(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D8 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F5F[0x27];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        OcclusionLayerNumNodes;                            // 0x970(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F60[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bDisableCollision;                                 // 0x977(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F61[0x20];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HierarchicalInstancedStaticMeshComponent");
		return Clss;
	}

	bool RemoveInstances(TArray<int32>& InstancesToRemove);
};

// 0x48 (0x70 - 0x28)
// Class Engine.MaterialInterface
class UMaterialInterface : public UObject
{
public:
	uint8                                        Pad_F62[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class USubsurfaceProfile*                    SubsurfaceProfile;                                 // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F63[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLightmassMaterialInterfaceSettings   LightmassSettings;                                 // 0x40(0x14)(Edit, BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_F64[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FMaterialTextureInfo>          TextureStreamingData;                              // 0x58(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_F65[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialInterface");
		return Clss;
	}

	class UPhysicalMaterial* GetPhysicalMaterial();
	class UMaterial* GetBaseMaterial();
};

// 0x140 (0x1B0 - 0x70)
// Class Engine.MaterialInstance
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                     PhysMaterial;                                      // 0x70(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                    Parent;                                            // 0x78(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasStaticPermutationResource : 1;                 // Mask: 0x1, PropSize: 0x10x80(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_D9 : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bOverrideSubsurfaceProfile : 1;                    // Mask: 0x4, PropSize: 0x10x80(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_DA : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F66[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FFontParameterValue>           FontParameterValues;                               // 0x88(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FScalarParameterValue>         ScalarParameterValues;                             // 0x98(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTextureParameterValue>        TextureParameterValues;                            // 0xA8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVectorParameterValue>         VectorParameterValues;                             // 0xB8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bOverrideBaseProperties;                           // 0xC8(0x1)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F67[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FMaterialInstanceBasePropertyOverrides BasePropertyOverrides;                             // 0xCC(0x14)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_F68[0xD0];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialInstance");
		return Clss;
	}

};

// 0x0 (0x1B0 - 0x1B0)
// Class Engine.MaterialInstanceConstant
class UMaterialInstanceConstant : public UMaterialInstance
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialInstanceConstant");
		return Clss;
	}

};

// 0x38 (0x60 - 0x28)
// Class Engine.MaterialExpression
class UMaterialExpression : public UObject
{
public:
	class UMaterial*                             Material;                                          // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialFunction*                     Function;                                          // 0x30(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                Desc;                                              // 0x38(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                BorderColor;                                       // 0x48(0x4)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRealtimePreview : 1;                              // Mask: 0x1, PropSize: 0x10x4C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNeedToUpdatePreview : 1;                          // Mask: 0x2, PropSize: 0x10x4C(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsParameterExpression : 1;                        // Mask: 0x4, PropSize: 0x10x4C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCommentBubbleVisible : 1;                         // Mask: 0x8, PropSize: 0x10x4C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowOutputNameOnPin : 1;                          // Mask: 0x10, PropSize: 0x10x4C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHidePreviewWindow : 1;                            // Mask: 0x20, PropSize: 0x10x4C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCollapsed : 1;                                    // Mask: 0x40, PropSize: 0x10x4C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShaderInputData : 1;                              // Mask: 0x80, PropSize: 0x10x4C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowInputs : 1;                                   // Mask: 0x1, PropSize: 0x10x4D(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowOutputs : 1;                                  // Mask: 0x2, PropSize: 0x10x4D(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_DB : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F69[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FExpressionOutput>             Outputs;                                           // 0x50(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpression");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionCustomOutput
class UMaterialExpressionCustomOutput : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionCustomOutput");
		return Clss;
	}

};

// 0xE0 (0x330 - 0x250)
// Class Engine.BlueprintGeneratedClass
class UBlueprintGeneratedClass : public UClass
{
public:
	int32                                        NumReplicatedProperties;                           // 0x250(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasInstrumentation : 1;                           // Mask: 0x1, PropSize: 0x10x254(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasNativizedParent : 1;                           // Mask: 0x2, PropSize: 0x10x254(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_DC : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F6A[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UDynamicBlueprintBinding*>      DynamicBindingObjects;                             // 0x258(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UActorComponent*>               ComponentTemplates;                                // 0x268(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTimelineTemplate*>             Timelines;                                         // 0x278(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class USimpleConstructionScript*             SimpleConstructionScript;                          // 0x288(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInheritableComponentHandler*          InheritableComponentHandler;                       // 0x290(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStructProperty*                       UberGraphFramePointerProperty;                     // 0x298(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFunction*                             UberGraphFunction;                                 // 0x2A0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FBlueprintCookedComponentInstancingData> CookedComponentInstancingData;                     // 0x2A8(0x50)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_F6B[0x38];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlueprintGeneratedClass");
		return Clss;
	}

};

// 0x10 (0xA8 - 0x98)
// Class Engine.UserDefinedStruct
class UUserDefinedStruct : public UScriptStruct
{
public:
	struct FGuid                                 Guid;                                              // 0x98(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("UserDefinedStruct");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.OnlineBlueprintCallProxyBase
class UOnlineBlueprintCallProxyBase : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("OnlineBlueprintCallProxyBase");
		return Clss;
	}

	void Activate();
};

// 0x550 (0x578 - 0x28)
// Class Engine.Model
class UModel : public UObject
{
public:
	uint8                                        Pad_F6C[0x550];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Model");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.EngineTypes
class UEngineTypes : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EngineTypes");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.EngineBaseTypes
class UEngineBaseTypes : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EngineBaseTypes");
		return Clss;
	}

};

// 0x78 (0xA0 - 0x28)
// Class Engine.EdGraphNode
class UEdGraphNode : public UObject
{
public:
	uint8                                        Pad_F6D[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UEdGraphPin_Deprecated*>        DeprecatedPins;                                    // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        NodePosX;                                          // 0x48(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NodePosY;                                          // 0x4C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NodeWidth;                                         // 0x50(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NodeHeight;                                        // 0x54(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasCompilerMessage : 1;                           // Mask: 0x1, PropSize: 0x10x58(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_DD : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F6E[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                NodeComment;                                       // 0x60(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCommentBubblePinned;                              // 0x70(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCommentBubbleVisible;                             // 0x71(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F6F[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ErrorType;                                         // 0x74(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                ErrorMsg;                                          // 0x78(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 NodeGuid;                                          // 0x88(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENodeAdvancedPins                 AdvancedPinDisplay;                                // 0x98(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENodeEnabledState                 EnabledState;                                      // 0x99(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUserSetEnabledState;                              // 0x9A(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsNodeEnabled;                                    // 0x9B(0x1)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_F70[0x4];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EdGraphNode");
		return Clss;
	}

};

// 0x118 (0x140 - 0x28)
// Class Engine.EdGraphPin_Deprecated
class UEdGraphPin_Deprecated : public UObject
{
public:
	class FString                                PinName;                                           // 0x28(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                PinToolTip;                                        // 0x38(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EEdGraphPinDirection              Direction;                                         // 0x48(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F71[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FEdGraphPinType                       PinType;                                           // 0x50(0x80)(NativeAccessSpecifierPublic)
	class FString                                DefaultValue;                                      // 0xD0(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                AutogeneratedDefaultValue;                         // 0xE0(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                               DefaultObject;                                     // 0xF0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                  DefaultTextValue;                                  // 0xF8(0x18)(NativeAccessSpecifierPublic)
	TArray<class UEdGraphPin_Deprecated*>        LinkedTo;                                          // 0x110(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UEdGraphPin_Deprecated*>        SubPins;                                           // 0x120(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UEdGraphPin_Deprecated*                ParentPin;                                         // 0x130(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEdGraphPin_Deprecated*                ReferencePassThroughConnection;                    // 0x138(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EdGraphPin_Deprecated");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.Interface_AssetUserData
class UInterface_AssetUserData : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Interface_AssetUserData");
		return Clss;
	}

};

// 0x30 (0x2C0 - 0x290)
// Class Engine.ChildActorComponent
class UChildActorComponent : public USceneComponent
{
public:
	TSubclassOf<class AActor>                    ChildActorClass;                                   // 0x290(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                ChildActor;                                        // 0x298(0x8)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, TextExportTransient, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                ChildActorTemplate;                                // 0x2A0(0x8)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_F72[0x18];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ChildActorComponent");
		return Clss;
	}

	void SetChildActorClass(TSubclassOf<class AActor> InClass);
};

// 0x2F8 (0x320 - 0x28)
// Class Engine.Level
class ULevel : public UObject
{
public:
	uint8                                        Pad_F73[0x98];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UWorld*                                OwningWorld;                                       // 0xC0(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UModel*                                Model;                                             // 0xC8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UModelComponent*>               ModelComponents;                                   // 0xD0(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ULevelActorContainer*                  ActorCluster;                                      // 0xE0(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumTextureStreamingUnbuiltComponents;              // 0xE8(0x4)(ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumTextureStreamingDirtyResources;                 // 0xEC(0x4)(ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelScriptActor*                     LevelScriptActor;                                  // 0xF0(0x8)(ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavigationObjectBase*                 NavListStart;                                      // 0xF8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavigationObjectBase*                 NavListEnd;                                        // 0x100(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNavigationDataChunk*>          NavDataChunks;                                     // 0x108(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        LightmapTotalSize;                                 // 0x118(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShadowmapTotalSize;                                // 0x11C(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                       StaticNavigableGeometry;                           // 0x120(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                         StreamingTextureGuids;                             // 0x130(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_F74[0x88];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bIsLightingScenario;                               // 0x1C8(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F75[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 LevelBuildDataId;                                  // 0x1CC(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F76[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UMapBuildDataRegistry*                 MapBuildData;                                      // 0x1E0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                            LightBuildLevelOffset;                             // 0x1E8(0xC)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_DE : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bTextureStreamingRotationChanged : 1;              // Mask: 0x4, PropSize: 0x10x1F4(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsVisible : 1;                                    // Mask: 0x8, PropSize: 0x10x1F4(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLocked : 1;                                       // Mask: 0x10, PropSize: 0x10x1F4(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_DF : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F77[0xFB];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class AWorldSettings*                        WorldSettings;                                     // 0x2F0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_F78[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x300(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_F79[0x10];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Level");
		return Clss;
	}

};

// 0x8 (0x390 - 0x388)
// Class Engine.AmbientSound
class AAmbientSound : public AActor
{
public:
	class UAudioComponent*                       AudioComponent;                                    // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AmbientSound");
		return Clss;
	}

	void Stop();
	void Play(float StartTime);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
};

// 0x0 (0x3C0 - 0x3C0)
// Class Engine.BrushShape
class ABrushShape : public ABrush
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BrushShape");
		return Clss;
	}

};

// 0x48 (0x408 - 0x3C0)
// Class Engine.AudioVolume
class AAudioVolume : public AVolume
{
public:
	float                                        Priority;                                          // 0x3C0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x3C4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_E0 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F7A[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FReverbSettings                       Settings;                                          // 0x3C8(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	struct FInteriorSettings                     AmbientZoneSettings;                               // 0x3E0(0x24)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_F7B[0x4];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AudioVolume");
		return Clss;
	}

	void SetReverbSettings(struct FReverbSettings& NewReverbSettings);
	void SetPriority(float NewPriority);
	void SetInteriorSettings(struct FInteriorSettings& NewInteriorSettings);
	void SetEnabled(bool bNewEnabled);
	void OnRep_bEnabled();
};

// 0x0 (0x3C0 - 0x3C0)
// Class Engine.BlockingVolume
class ABlockingVolume : public AVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlockingVolume");
		return Clss;
	}

};

// 0x0 (0x3C0 - 0x3C0)
// Class Engine.CameraBlockingVolume
class ACameraBlockingVolume : public AVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CameraBlockingVolume");
		return Clss;
	}

};

// 0x18 (0x3D8 - 0x3C0)
// Class Engine.CullDistanceVolume
class ACullDistanceVolume : public AVolume
{
public:
	TArray<struct FCullDistanceSizePair>         CullDistances;                                     // 0x3C0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x3D0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F7C[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CullDistanceVolume");
		return Clss;
	}

};

// 0x18 (0x3D8 - 0x3C0)
// Class Engine.LevelStreamingVolume
class ALevelStreamingVolume : public AVolume
{
public:
	TArray<class FName>                          StreamingLevelNames;                               // 0x3C0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                        bEditorPreVisOnly : 1;                             // Mask: 0x1, PropSize: 0x10x3D0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisabled : 1;                                     // Mask: 0x2, PropSize: 0x10x3D0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_E1 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F7D[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EStreamingVolumeUsage             StreamingUsage;                                    // 0x3D4(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F7E[0x3];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelStreamingVolume");
		return Clss;
	}

};

// 0x0 (0x3C0 - 0x3C0)
// Class Engine.LightmassCharacterIndirectDetailVolume
class ALightmassCharacterIndirectDetailVolume : public AVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightmassCharacterIndirectDetailVolume");
		return Clss;
	}

};

// 0x0 (0x3C0 - 0x3C0)
// Class Engine.LightmassImportanceVolume
class ALightmassImportanceVolume : public AVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightmassImportanceVolume");
		return Clss;
	}

};

// 0x0 (0x3C0 - 0x3C0)
// Class Engine.MeshMergeCullingVolume
class AMeshMergeCullingVolume : public AVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MeshMergeCullingVolume");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.NavigationTypes
class UNavigationTypes : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavigationTypes");
		return Clss;
	}

};

// 0x8 (0x3C8 - 0x3C0)
// Class Engine.NavMeshBoundsVolume
class ANavMeshBoundsVolume : public AVolume
{
public:
	struct FNavAgentSelector                     SupportedAgents;                                   // 0x3C0(0x4)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_F7F[0x4];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavMeshBoundsVolume");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.NavRelevantInterface
class UNavRelevantInterface : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavRelevantInterface");
		return Clss;
	}

};

// 0x10 (0x3D0 - 0x3C0)
// Class Engine.NavModifierVolume
class ANavModifierVolume : public AVolume
{
public:
	uint8                                        Pad_F80[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UNavArea>                  AreaClass;                                         // 0x3C8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavModifierVolume");
		return Clss;
	}

	void SetAreaClass(TSubclassOf<class UNavArea> NewAreaClass);
};

// 0x0 (0x3D0 - 0x3D0)
// Class Engine.DefaultPhysicsVolume
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DefaultPhysicsVolume");
		return Clss;
	}

};

// 0x0 (0x3D0 - 0x3D0)
// Class Engine.KillZVolume
class AKillZVolume : public APhysicsVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KillZVolume");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.DamageType
class UDamageType : public UObject
{
public:
	uint8                                        bCausedByWorld : 1;                                // Mask: 0x1, PropSize: 0x10x28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bScaleMomentumByMass : 1;                          // Mask: 0x2, PropSize: 0x10x28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRadialDamageVelChange : 1;                        // Mask: 0x4, PropSize: 0x10x28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_E2 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F81[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DamageImpulse;                                     // 0x2C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DestructibleImpulse;                               // 0x30(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DestructibleDamageSpreadScale;                     // 0x34(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DamageFalloff;                                     // 0x38(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F82[0x4];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DamageType");
		return Clss;
	}

};

// 0x28 (0x3F8 - 0x3D0)
// Class Engine.PainCausingVolume
class APainCausingVolume : public APhysicsVolume
{
public:
	uint8                                        bPainCausing : 1;                                  // Mask: 0x1, PropSize: 0x10x3D0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_E3 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F83[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DamagePerSec;                                      // 0x3D4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>               DamageType;                                        // 0x3D8(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PainInterval;                                      // 0x3E0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEntryPain : 1;                                    // Mask: 0x1, PropSize: 0x10x3E4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BACKUP_bPainCausing : 1;                           // Mask: 0x2, PropSize: 0x10x3E4(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_E4 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F84[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class AController*                           DamageInstigator;                                  // 0x3E8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F85[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PainCausingVolume");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.BlendableInterface
class UBlendableInterface : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlendableInterface");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.Scene
class UScene : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Scene");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.Interface_PostProcessVolume
class UInterface_PostProcessVolume : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Interface_PostProcessVolume");
		return Clss;
	}

};

// 0x4E0 (0x8A0 - 0x3C0)
// Class Engine.PostProcessVolume
class APostProcessVolume : public AVolume
{
public:
	uint8                                        Pad_F87[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  Settings;                                          // 0x3D0(0x4C0)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	float                                        Priority;                                          // 0x890(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BlendRadius;                                       // 0x894(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BlendWeight;                                       // 0x898(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x89C(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUnbound : 1;                                      // Mask: 0x2, PropSize: 0x10x89C(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F88[0x3];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PostProcessVolume");
		return Clss;
	}

	void AddOrUpdateBlendable(UInterfaceProperty_ InBlendableObject, float InWeight);
};

// 0x30 (0x3F0 - 0x3C0)
// Class Engine.PrecomputedVisibilityOverrideVolume
class APrecomputedVisibilityOverrideVolume : public AVolume
{
public:
	TArray<class AActor*>                        OverrideVisibleActors;                             // 0x3C0(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                        OverrideInvisibleActors;                           // 0x3D0(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                          OverrideInvisibleLevels;                           // 0x3E0(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PrecomputedVisibilityOverrideVolume");
		return Clss;
	}

};

// 0x0 (0x3C0 - 0x3C0)
// Class Engine.PrecomputedVisibilityVolume
class APrecomputedVisibilityVolume : public AVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PrecomputedVisibilityVolume");
		return Clss;
	}

};

// 0x0 (0x3C0 - 0x3C0)
// Class Engine.TriggerVolume
class ATriggerVolume : public AVolume
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TriggerVolume");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.NavAgentInterface
class UNavAgentInterface : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavAgentInterface");
		return Clss;
	}

};

// 0x138 (0x160 - 0x28)
// Class Engine.CameraShake
class UCameraShake : public UObject
{
public:
	uint8                                        bSingleInstance : 1;                               // Mask: 0x1, PropSize: 0x10x28(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_E5 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F8A[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        OscillationDuration;                               // 0x2C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OscillationBlendInTime;                            // 0x30(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OscillationBlendOutTime;                           // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FROscillator                          RotOscillation;                                    // 0x38(0x24)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVOscillator                          LocOscillation;                                    // 0x5C(0x24)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFOscillator                          FOVOscillation;                                    // 0x80(0xC)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                        AnimPlayRate;                                      // 0x8C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AnimScale;                                         // 0x90(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AnimBlendInTime;                                   // 0x94(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AnimBlendOutTime;                                  // 0x98(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RandomAnimSegmentDuration;                         // 0x9C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraAnim*                           Anim;                                              // 0xA0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRandomAnimSegment : 1;                            // Mask: 0x1, PropSize: 0x10xA8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_E6 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F8B[0x17];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerCameraManager*                  CameraOwner;                                       // 0xC0(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_F8C[0x80];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ShakeScale;                                        // 0x148(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OscillatorTimeRemaining;                           // 0x14C(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraAnimInst*                       AnimInst;                                          // 0x150(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F8D[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CameraShake");
		return Clss;
	}

	void ReceiveStopShake(bool bImmediately);
	void ReceivePlayShake(float Scale);
	bool ReceiveIsFinished();
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, struct FMinimalViewInfo& POV, struct FMinimalViewInfo* ModifiedPOV);
};

// 0x78 (0x168 - 0xF0)
// Class Engine.InputComponent
class UInputComponent : public UActorComponent
{
public:
	uint8                                        Pad_F96[0x78];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InputComponent");
		return Clss;
	}

	bool WasControllerKeyJustReleased(const struct FKey& Key);
	bool WasControllerKeyJustPressed(const struct FKey& Key);
	bool IsControllerKeyDown(const struct FKey& Key);
	void GetTouchState(int32 FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	struct FVector GetControllerVectorKeyState(const struct FKey& Key);
	void GetControllerMouseDelta(float* DeltaX, float* DeltaY);
	float GetControllerKeyTimeDown(const struct FKey& Key);
	void GetControllerAnalogStickState(enum class EControllerAnalogStick WhichStick, float* StickX, float* StickY);
	float GetControllerAnalogKeyState(const struct FKey& Key);
};

// 0x8 (0x30 - 0x28)
// Class Engine.CurveBase
class UCurveBase : public UObject
{
public:
	uint8                                        Pad_F97[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CurveBase");
		return Clss;
	}

	void GetValueRange(float* MinValue, float* MaxValue);
	void GetTimeRange(float* MinTime, float* MaxTime);
};

// 0x78 (0xA8 - 0x30)
// Class Engine.CurveFloat
class UCurveFloat : public UCurveBase
{
public:
	struct FRichCurve                            FloatCurve;                                        // 0x30(0x70)(NativeAccessSpecifierPublic)
	bool                                         bIsEventCurve;                                     // 0xA0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F98[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CurveFloat");
		return Clss;
	}

	float GetFloatValue(float InTime);
};

// 0x18 (0x40 - 0x28)
// Class Engine.ForceFeedbackEffect
class UForceFeedbackEffect : public UObject
{
public:
	TArray<struct FForceFeedbackChannelDetails>  ChannelDetails;                                    // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        Duration;                                          // 0x38(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F99[0x4];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ForceFeedbackEffect");
		return Clss;
	}

};

// 0x48 (0x710 - 0x6C8)
// Class Engine.DebugCameraController
class ADebugCameraController : public APlayerController
{
public:
	uint8                                        bShowSelectedInfo : 1;                             // Mask: 0x1, PropSize: 0x10x6C8(0x1)(Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsFrozenRendering : 1;                            // Mask: 0x2, PropSize: 0x10x6C8(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_E7 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F9A[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UDrawFrustumComponent*                 DrawFrustum;                                       // 0x6D0(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F9B[0x20];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SpeedScale;                                        // 0x6F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InitialMaxSpeed;                                   // 0x6FC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InitialAccel;                                      // 0x700(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InitialDecel;                                      // 0x704(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F9C[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DebugCameraController");
		return Clss;
	}

	void ToggleDisplay();
	void ShowDebugSelectedInfo();
	void SetPawnMovementSpeedScale(float NewSpeedScale);
	void ReceiveOnDeactivate(class APlayerController* RestoredPC);
	void ReceiveOnActorSelected(class AActor* NewSelectedActor, struct FVector& SelectHitLocation, struct FVector& SelectHitNormal, struct FHitResult& Hit);
	void ReceiveOnActivate(class APlayerController* OriginalPC);
	class AActor* GetSelectedActor();
};

// 0x8 (0x390 - 0x388)
// Class Engine.DecalActor
class ADecalActor : public AActor
{
public:
	class UDecalComponent*                       Decal;                                             // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DecalActor");
		return Clss;
	}

	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	class UMaterialInterface* GetDecalMaterial();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
};

// 0x20 (0x3A8 - 0x388)
// Class Engine.DestructibleActor
class ADestructibleActor : public AActor
{
public:
	class UDestructibleComponent*                DestructibleComponent;                             // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAffectNavigation : 1;                             // Mask: 0x1, PropSize: 0x10x390(0x1)(Edit, BlueprintVisible, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_E8 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_F9D[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	UMulticastDelegateProperty_                  OnActorFracture;                                   // 0x398(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DestructibleActor");
		return Clss;
	}

};

// 0x8 (0x390 - 0x388)
// Class Engine.DocumentationActor
class ADocumentationActor : public AActor
{
public:
	uint8                                        Pad_F9E[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DocumentationActor");
		return Clss;
	}

};

// 0x0 (0x470 - 0x470)
// Class Engine.DebugCameraHUD
class ADebugCameraHUD : public AHUD
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DebugCameraHUD");
		return Clss;
	}

};

// 0x8 (0x390 - 0x388)
// Class Engine.AtmosphericFog
class AAtmosphericFog : public AInfo
{
public:
	class UAtmosphericFogComponent*              AtmosphericFogComponent;                           // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AtmosphericFog");
		return Clss;
	}

};

// 0x10 (0x398 - 0x388)
// Class Engine.ExponentialHeightFog
class AExponentialHeightFog : public AInfo
{
public:
	class UExponentialHeightFogComponent*        Component;                                         // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x390(0x1)(Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_F9F[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ExponentialHeightFog");
		return Clss;
	}

	void OnRep_bEnabled();
};

// 0xC8 (0x450 - 0x388)
// Class Engine.ServerStatReplicator
class AServerStatReplicator : public AInfo
{
public:
	bool                                         bUpdateStatNet;                                    // 0x388(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOverwriteClientStats;                             // 0x389(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FA0[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       Channels;                                          // 0x38C(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InRate;                                            // 0x390(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutRate;                                           // 0x394(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutSaturation;                                     // 0x398(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       MaxPacketOverhead;                                 // 0x39C(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InRateClientMax;                                   // 0x3A0(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InRateClientMin;                                   // 0x3A4(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InRateClientAvg;                                   // 0x3A8(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InPacketsClientMax;                                // 0x3AC(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InPacketsClientMin;                                // 0x3B0(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InPacketsClientAvg;                                // 0x3B4(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutRateClientMax;                                  // 0x3B8(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutRateClientMin;                                  // 0x3BC(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutRateClientAvg;                                  // 0x3C0(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutPacketsClientMax;                               // 0x3C4(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutPacketsClientMin;                               // 0x3C8(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutPacketsClientAvg;                               // 0x3CC(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NetNumClients;                                     // 0x3D0(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InPackets;                                         // 0x3D4(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutPackets;                                        // 0x3D8(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InBunches;                                         // 0x3DC(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutBunches;                                        // 0x3E0(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       OutLoss;                                           // 0x3E4(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       InLoss;                                            // 0x3E8(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       VoiceBytesSent;                                    // 0x3EC(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       VoiceBytesRecv;                                    // 0x3F0(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       VoicePacketsSent;                                  // 0x3F4(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       VoicePacketsRecv;                                  // 0x3F8(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       PercentInVoice;                                    // 0x3FC(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       PercentOutVoice;                                   // 0x400(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumActorChannels;                                  // 0x404(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumConsideredActors;                               // 0x408(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       PrioritizedActors;                                 // 0x40C(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumRelevantActors;                                 // 0x410(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumRelevantDeletedActors;                          // 0x414(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumReplicatedActorAttempts;                        // 0x418(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumReplicatedActors;                               // 0x41C(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumActors;                                         // 0x420(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumNetActors;                                      // 0x424(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumDormantActors;                                  // 0x428(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumInitiallyDormantActors;                         // 0x42C(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumNetGUIDsAckd;                                   // 0x430(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumNetGUIDsPending;                                // 0x434(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NumNetGUIDsUnAckd;                                 // 0x438(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       ObjPathBytes;                                      // 0x43C(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NetGUIDOutRate;                                    // 0x440(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NetGUIDInRate;                                     // 0x444(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       NetSaturated;                                      // 0x448(0x4)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FA1[0x4];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ServerStatReplicator");
		return Clss;
	}

};

// 0x88 (0x410 - 0x388)
// Class Engine.GameNetworkManager
class AGameNetworkManager : public AInfo
{
public:
	int32                                        AdjustedNetSpeed;                                  // 0x388(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LastNetSpeedUpdateTime;                            // 0x38C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        TotalNetBandwidth;                                 // 0x390(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MinDynamicBandwidth;                               // 0x394(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxDynamicBandwidth;                               // 0x398(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsStandbyCheckingEnabled : 1;                     // Mask: 0x1, PropSize: 0x10x39C(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasStandbyCheatTriggered : 1;                     // Mask: 0x2, PropSize: 0x10x39C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_E9 : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FA2[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        StandbyRxCheatTime;                                // 0x3A0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StandbyTxCheatTime;                                // 0x3A4(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        BadPingThreshold;                                  // 0x3A8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PercentMissingForRxStandby;                        // 0x3AC(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PercentMissingForTxStandby;                        // 0x3B0(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PercentForBadPing;                                 // 0x3B4(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        JoinInProgressStandbyWaitTime;                     // 0x3B8(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MoveRepSize;                                       // 0x3BC(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MAXPOSITIONERRORSQUARED;                           // 0x3C0(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MAXNEARZEROVELOCITYSQUARED;                        // 0x3C4(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CLIENTADJUSTUPDATECOST;                            // 0x3C8(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MAXCLIENTUPDATEINTERVAL;                           // 0x3CC(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxMoveDeltaTime;                                  // 0x3D0(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ClientNetSendMoveDeltaTime;                        // 0x3D4(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ClientNetSendMoveDeltaTimeThrottled;               // 0x3D8(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ClientNetSendMoveThrottleAtNetSpeed;               // 0x3DC(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ClientNetSendMoveThrottleOverPlayerCount;          // 0x3E0(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         ClientAuthorativePosition;                         // 0x3E4(0x1)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FA3[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ClientErrorUpdateRateLimit;                        // 0x3E8(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMovementTimeDiscrepancyDetection;                 // 0x3EC(0x1)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMovementTimeDiscrepancyResolution;                // 0x3ED(0x1)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FA4[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MovementTimeDiscrepancyMaxTimeMargin;              // 0x3F0(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MovementTimeDiscrepancyMinTimeMargin;              // 0x3F4(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MovementTimeDiscrepancyResolutionRate;             // 0x3F8(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MovementTimeDiscrepancyDriftAllowance;             // 0x3FC(0x4)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x400(0x1)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseDistanceBasedRelevancy;                        // 0x401(0x1)(ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FA5[0xE];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameNetworkManager");
		return Clss;
	}

};

// 0x10 (0x398 - 0x388)
// Class Engine.SkyLight
class ASkyLight : public AInfo
{
public:
	class USkyLightComponent*                    LightComponent;                                    // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x390(0x1)(Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FA6[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkyLight");
		return Clss;
	}

	void OnRep_bEnabled();
};

// 0x8 (0x390 - 0x388)
// Class Engine.WindDirectionalSource
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*       Component;                                         // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WindDirectionalSource");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.HierarchicalLODSetup
class UHierarchicalLODSetup : public UObject
{
public:
	TArray<struct FHierarchicalSimplification>   HierarchicalLODSetup;                              // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HierarchicalLODSetup");
		return Clss;
	}

};

// 0x8 (0x390 - 0x388)
// Class Engine.LevelBounds
class ALevelBounds : public AActor
{
public:
	bool                                         bAutoUpdateBounds;                                 // 0x388(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FA7[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelBounds");
		return Clss;
	}

};

// 0x10 (0x398 - 0x388)
// Class Engine.Light
class ALight : public AActor
{
public:
	class ULightComponent*                       LightComponent;                                    // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x390(0x1)(Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FA8[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Light");
		return Clss;
	}

	void ToggleEnabled();
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetEnabled(bool bSetEnabled);
	void SetCastShadows(bool bNewValue);
	void SetBrightness(float NewBrightness);
	void SetAffectTranslucentLighting(bool bNewValue);
	void OnRep_bEnabled();
	bool IsEnabled();
	struct FLinearColor GetLightColor();
	float GetBrightness();
};

// 0x0 (0x398 - 0x398)
// Class Engine.DirectionalLight
class ADirectionalLight : public ALight
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DirectionalLight");
		return Clss;
	}

};

// 0x8 (0x3A0 - 0x398)
// Class Engine.PointLight
class APointLight : public ALight
{
public:
	class UPointLightComponent*                  PointLightComponent;                               // 0x398(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PointLight");
		return Clss;
	}

	void SetRadius(float NewRadius);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
};

// 0x8 (0x3A0 - 0x398)
// Class Engine.SpotLight
class ASpotLight : public ALight
{
public:
	class USpotLightComponent*                   SpotLightComponent;                                // 0x398(0x8)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SpotLight");
		return Clss;
	}

	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetInnerConeAngle(float NewInnerConeAngle);
};

// 0x0 (0x3A0 - 0x3A0)
// Class Engine.GeneratedMeshAreaLight
class AGeneratedMeshAreaLight : public ASpotLight
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GeneratedMeshAreaLight");
		return Clss;
	}

};

// 0x8 (0x390 - 0x388)
// Class Engine.LightmassPortal
class ALightmassPortal : public AActor
{
public:
	class ULightmassPortalComponent*             PortalComponent;                                   // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightmassPortal");
		return Clss;
	}

};

// 0x38 (0x3C0 - 0x388)
// Class Engine.LODActor
class ALODActor : public AActor
{
public:
	class UStaticMeshComponent*                  StaticMeshComponent;                               // 0x388(0x8)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                        SubActors;                                         // 0x390(0x10)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	float                                        LODDrawDistance;                                   // 0x3A0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        LODLevel;                                          // 0x3A4(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                       SubObjects;                                        // 0x3A8(0x10)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                        Pad_FA9[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LODActor");
		return Clss;
	}

};

// 0x10 (0x398 - 0x388)
// Class Engine.MaterialInstanceActor
class AMaterialInstanceActor : public AActor
{
public:
	TArray<class AActor*>                        TargetActors;                                      // 0x388(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialInstanceActor");
		return Clss;
	}

};

// 0xA8 (0x430 - 0x388)
// Class Engine.MatineeActor
class AMatineeActor : public AActor
{
public:
	class UInterpData*                           MatineeData;                                       // 0x388(0x8)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  MatineeControllerName;                             // 0x390(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PlayRate;                                          // 0x398(0x4)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPlayOnLevelLoad : 1;                              // Mask: 0x1, PropSize: 0x10x39C(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceStartPos : 1;                                // Mask: 0x2, PropSize: 0x10x39C(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_EA : 6;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FAC[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ForceStartPosition;                                // 0x3A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLooping : 1;                                      // Mask: 0x1, PropSize: 0x10x3A4(0x1)(Edit, BlueprintVisible, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRewindOnPlay : 1;                                 // Mask: 0x2, PropSize: 0x10x3A4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNoResetOnRewind : 1;                              // Mask: 0x4, PropSize: 0x10x3A4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRewindIfAlreadyPlaying : 1;                       // Mask: 0x8, PropSize: 0x10x3A4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableRadioFilter : 1;                           // Mask: 0x10, PropSize: 0x10x3A4(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClientSideOnly : 1;                               // Mask: 0x20, PropSize: 0x10x3A4(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSkipUpdateIfNotVisible : 1;                       // Mask: 0x40, PropSize: 0x10x3A4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsSkippable : 1;                                  // Mask: 0x80, PropSize: 0x10x3A4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FAD[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        PreferredSplitScreenNum;                           // 0x3A8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableMovementInput : 1;                         // Mask: 0x1, PropSize: 0x10x3AC(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableLookAtInput : 1;                           // Mask: 0x2, PropSize: 0x10x3AC(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHidePlayer : 1;                                   // Mask: 0x4, PropSize: 0x10x3AC(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHideHud : 1;                                      // Mask: 0x8, PropSize: 0x10x3AC(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_EB : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FAE[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FInterpGroupActorInfo>         GroupActorInfos;                                   // 0x3B0(0x10)(Net, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bShouldShowGore : 1;                               // Mask: 0x1, PropSize: 0x10x3C0(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_EC : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FAF[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UInterpGroupInst*>              GroupInst;                                         // 0x3C8(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FCameraCutInfo>                CameraCuts;                                        // 0x3D8(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                        bIsPlaying : 1;                                    // Mask: 0x1, PropSize: 0x10x3E8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Net, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bReversePlayback : 1;                              // Mask: 0x2, PropSize: 0x10x3E8(0x1)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPaused : 1;                                       // Mask: 0x4, PropSize: 0x10x3E8(0x1)(Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPendingStop : 1;                                  // Mask: 0x8, PropSize: 0x10x3E8(0x1)(Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_ED : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FB0[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InterpPosition;                                    // 0x3EC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FB1[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        ReplicationForceIsPlaying;                         // 0x3F4(0x1)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_FB2[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	UMulticastDelegateProperty_                  OnPlay;                                            // 0x3F8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnStop;                                            // 0x408(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnPause;                                           // 0x418(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_FB3[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MatineeActor");
		return Clss;
	}

	void Stop();
	void SetPosition(float NewPosition, bool bJump);
	void SetLoopingState(bool bNewLooping);
	void Reverse();
	void Play();
	void Pause();
	void EnableGroupByName(const class FString& GroupName, bool bEnable);
	void ChangePlaybackDirection();
};

// 0x8 (0x438 - 0x430)
// Class Engine.MatineeActorCameraAnim
class AMatineeActorCameraAnim : public AMatineeActor
{
public:
	class UCameraAnim*                           CameraAnim;                                        // 0x430(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MatineeActorCameraAnim");
		return Clss;
	}

};

// 0x0 (0x528 - 0x528)
// Class Engine.AbstractNavData
class AAbstractNavData : public ANavigationData
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AbstractNavData");
		return Clss;
	}

};

// 0x0 (0x528 - 0x528)
// Class Engine.NavigationGraph
class ANavigationGraph : public ANavigationData
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavigationGraph");
		return Clss;
	}

};

// 0x0 (0x388 - 0x388)
// Class Engine.NavigationGraphNode
class ANavigationGraphNode : public AActor
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavigationGraphNode");
		return Clss;
	}

};

// 0x0 (0x3B8 - 0x3B8)
// Class Engine.PlayerStartPIE
class APlayerStartPIE : public APlayerStart
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlayerStartPIE");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.NavPathObserverInterface
class UNavPathObserverInterface : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavPathObserverInterface");
		return Clss;
	}

};

// 0x108 (0x490 - 0x388)
// Class Engine.NavigationTestingActor
class ANavigationTestingActor : public AActor
{
public:
	uint8                                        Pad_FB4[0x10];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UCapsuleComponent*                     CapsuleComponent;                                  // 0x398(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavigationInvokerComponent*           InvokerComponent;                                  // 0x3A0(0x8)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bActAsNavigationInvoker : 1;                       // Mask: 0x1, PropSize: 0x10x3A8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_EE : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FB5[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FNavAgentProperties                   NavAgentProps;                                     // 0x3B0(0x20)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               QueryingExtent;                                    // 0x3D0(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FB6[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class ANavigationData*                       MyNavData;                                         // 0x3E0(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               ProjectedLocation;                                 // 0x3E8(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bProjectedLocationValid : 1;                       // Mask: 0x1, PropSize: 0x10x3F4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSearchStart : 1;                                  // Mask: 0x2, PropSize: 0x10x3F4(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseHierarchicalPathfinding : 1;                   // Mask: 0x4, PropSize: 0x10x3F4(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGatherDetailedInfo : 1;                           // Mask: 0x8, PropSize: 0x10x3F4(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawDistanceToWall : 1;                           // Mask: 0x10, PropSize: 0x10x3F4(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowNodePool : 1;                                 // Mask: 0x20, PropSize: 0x10x3F4(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowBestPath : 1;                                 // Mask: 0x40, PropSize: 0x10x3F4(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowDiffWithPreviousStep : 1;                     // Mask: 0x80, PropSize: 0x10x3F4(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldBeVisibleInGame : 1;                        // Mask: 0x1, PropSize: 0x10x3F5(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_EF : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FB7[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ENavCostDisplay                   CostDisplayMode;                                   // 0x3F8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FB8[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             TextCanvasOffset;                                  // 0x3FC(0x8)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPathExist : 1;                                    // Mask: 0x1, PropSize: 0x10x404(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPathIsPartial : 1;                                // Mask: 0x2, PropSize: 0x10x404(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPathSearchOutOfNodes : 1;                         // Mask: 0x4, PropSize: 0x10x404(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F0 : 5;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FB9[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PathfindingTime;                                   // 0x408(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PathCost;                                          // 0x40C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PathfindingSteps;                                  // 0x410(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FBA[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class ANavigationTestingActor*               OtherActor;                                        // 0x418(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>    FilterClass;                                       // 0x420(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ShowStepIndex;                                     // 0x428(0x4)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OffsetFromCornersDistance;                         // 0x42C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FBB[0x60];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavigationTestingActor");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.NavLinkHostInterface
class UNavLinkHostInterface : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavLinkHostInterface");
		return Clss;
	}

};

// 0x0 (0x388 - 0x388)
// Class Engine.Note
class ANote : public AActor
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Note");
		return Clss;
	}

};

// 0x110 (0x138 - 0x28)
// Class Engine.ParticleSystem
class UParticleSystem : public UObject
{
public:
	enum class EParticleSystemUpdateMode         SystemUpdateMode;                                  // 0x28(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FBD[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        UpdateTime_FPS;                                    // 0x2C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        UpdateTime_Delta;                                  // 0x30(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WarmupTime;                                        // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WarmupTickRate;                                    // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FBE[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UParticleEmitter*>              Emitters;                                          // 0x40(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*              PreviewComponent;                                  // 0x50(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterpCurveEdSetup*                   CurveEdSetup;                                      // 0x58(0x8)(ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOrientZAxisTowardCamera : 1;                      // Mask: 0x1, PropSize: 0x10x60(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F1 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FBF[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LODDistanceCheckTime;                              // 0x64(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EParticleSystemLODMethod          LODMethod;                                         // 0x68(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FC0[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<float>                                LODDistances;                                      // 0x70(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bRegenerateLODDuplicate : 1;                       // Mask: 0x1, PropSize: 0x10x80(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F2 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FC1[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FParticleSystemLOD>            LODSettings;                                       // 0x88(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bUseFixedRelativeBoundingBox : 1;                  // Mask: 0x1, PropSize: 0x10x98(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F3 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FC2[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBox                                  FixedRelativeBoundingBox;                          // 0x9C(0x1C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                        SecondsBeforeInactive;                             // 0xB8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldResetPeakCounts : 1;                        // Mask: 0x1, PropSize: 0x10xBC(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasPhysics : 1;                                   // Mask: 0x2, PropSize: 0x10xBC(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseRealtimeThumbnail : 1;                         // Mask: 0x4, PropSize: 0x10xBC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        ThumbnailImageOutOfDate : 1;                       // Mask: 0x8, PropSize: 0x10xBC(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F4 : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FC3[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Delay;                                             // 0xC0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DelayLow;                                          // 0xC4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseDelayRange : 1;                                // Mask: 0x1, PropSize: 0x10xC8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F5 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FC4[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bAutoDeactivate;                                   // 0xCC(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FC5[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       MinTimeBetweenTicks;                               // 0xD0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EParticleSystemInsignificanceReaction InsignificantReaction;                             // 0xD4(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FC6[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InsignificanceDelay;                               // 0xD8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EParticleSignificanceLevel        MaxSignificanceLevel;                              // 0xDC(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FC7[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               MacroUVPosition;                                   // 0xE0(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MacroUVRadius;                                     // 0xEC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EParticleSystemOcclusionBoundsMethod OcclusionBoundsMethod;                             // 0xF0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FC8[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBox                                  CustomOcclusionBounds;                             // 0xF4(0x1C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FLODSoloTrack>                 SoloTracking;                                      // 0x110(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FNamedEmitterMaterial>         NamedMaterialSlots;                                // 0x120(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_FC9[0x8];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleSystem");
		return Clss;
	}

	bool ContainsEmitterType(class UClass* TypeData);
};

// 0x280 (0x8F0 - 0x670)
// Class Engine.ParticleSystemComponent
class UParticleSystemComponent : public UPrimitiveComponent
{
public:
	class UParticleSystem*                       Template;                                          // 0x670(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>            EmitterMaterials;                                  // 0x678(0x10)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	TArray<class USkeletalMeshComponent*>        SkelMeshComponents;                                // 0x688(0x10)(ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F6 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bResetOnDetach : 1;                                // Mask: 0x80, PropSize: 0x10x698(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUpdateOnDedicatedServer : 1;                      // Mask: 0x1, PropSize: 0x10x699(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F7 : 2;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bAllowRecycling : 1;                               // Mask: 0x8, PropSize: 0x10x699(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoManageAttachment : 1;                         // Mask: 0x10, PropSize: 0x10x699(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F8 : 3;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FD8[0x2];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EParticleSignificanceLevel        RequiredSignificance;                              // 0x69C(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FD9[0xB];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FParticleSysParam>             InstanceParameters;                                // 0x6A8(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnParticleSpawn;                                   // 0x6B8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnParticleBurst;                                   // 0x6C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnParticleDeath;                                   // 0x6D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnParticleCollide;                                 // 0x6E8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FVector                               OldPosition;                                       // 0x6F8(0xC)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               PartSysVelocity;                                   // 0x704(0xC)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WarmupTime;                                        // 0x710(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WarmupTickRate;                                    // 0x714(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bWarmingUp : 1;                                    // Mask: 0x1, PropSize: 0x10x718(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_F9 : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FDA[0xB];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SecondsBeforeInactive;                             // 0x724(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FDB[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxTimeBeforeForceUpdateTransform;                 // 0x730(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FDC[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bOverrideLODMethod : 1;                            // Mask: 0x1, PropSize: 0x10x738(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_FA : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FDD[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EParticleSystemLODMethod          LODMethod;                                         // 0x73C(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FDE[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bSkipUpdateDynamicDataDuringTick : 1;              // Mask: 0x1, PropSize: 0x10x740(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_FB : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FDF[0x1F];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UParticleSystemReplay*>         ReplayClips;                                       // 0x760(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_FE0[0x60];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CustomTimeDilation;                                // 0x7D0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FE1[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	UMulticastDelegateProperty_                  OnSystemFinished;                                  // 0x7D8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USceneComponent>        AutoAttachParent;                                  // 0x7E8(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  AutoAttachSocketName;                              // 0x7F0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAttachLocation                   AutoAttachLocationType;                            // 0x7F8(0x1)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAttachmentRule                   AutoAttachLocationRule;                            // 0x7F9(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAttachmentRule                   AutoAttachRotationRule;                            // 0x7FA(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAttachmentRule                   AutoAttachScaleRule;                               // 0x7FB(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FE2[0xF4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleSystemComponent");
		return Clss;
	}

	void SetVectorParameter(class FName ParameterName, const struct FVector& Param);
	void SetTrailSourceData(class FName InFirstSocketName, class FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void SetMaterialParameter(class FName ParameterName, class UMaterialInterface* Param);
	void SetFloatParameter(class FName ParameterName, float Param);
	void SetEmitterEnable(class FName EmitterName, bool bNewEnableState);
	void SetColorParameter(class FName ParameterName, const struct FLinearColor& Param);
	void SetBeamTargetTangent(int32 EmitterIndex, const struct FVector& NewTangentPoint, int32 TargetIndex);
	void SetBeamTargetStrength(int32 EmitterIndex, float NewTargetStrength, int32 TargetIndex);
	void SetBeamTargetPoint(int32 EmitterIndex, const struct FVector& NewTargetPoint, int32 TargetIndex);
	void SetBeamSourceTangent(int32 EmitterIndex, const struct FVector& NewTangentPoint, int32 SourceIndex);
	void SetBeamSourceStrength(int32 EmitterIndex, float NewSourceStrength, int32 SourceIndex);
	void SetBeamSourcePoint(int32 EmitterIndex, const struct FVector& NewSourcePoint, int32 SourceIndex);
	void SetBeamEndPoint(int32 EmitterIndex, const struct FVector& NewEndPoint);
	void SetAutoAttachParams(class USceneComponent* Parent, class FName SocketName, enum class EAttachLocation LocationType);
	void SetAutoAttachmentParameters(class USceneComponent* Parent, class FName SocketName, enum class EAttachmentRule LocationRule, enum class EAttachmentRule RotationRule, enum class EAttachmentRule ScaleRule);
	void SetActorParameter(class FName ParameterName, class AActor* Param);
	int32 GetNumActiveParticles();
	class UMaterialInterface* GetNamedMaterial(class FName InName);
	bool GetBeamTargetTangent(int32 EmitterIndex, int32 TargetIndex, struct FVector* OutTangentPoint);
	bool GetBeamTargetStrength(int32 EmitterIndex, int32 TargetIndex, float* OutTargetStrength);
	bool GetBeamTargetPoint(int32 EmitterIndex, int32 TargetIndex, struct FVector* OutTargetPoint);
	bool GetBeamSourceTangent(int32 EmitterIndex, int32 SourceIndex, struct FVector* OutTangentPoint);
	bool GetBeamSourceStrength(int32 EmitterIndex, int32 SourceIndex, float* OutSourceStrength);
	bool GetBeamSourcePoint(int32 EmitterIndex, int32 SourceIndex, struct FVector* OutSourcePoint);
	bool GetBeamEndPoint(int32 EmitterIndex, struct FVector* OutEndPoint);
	void GenerateParticleEvent(class FName InEventName, float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity);
	void EndTrails();
	class UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(class FName InName, class UMaterialInterface* SourceMaterial);
	void BeginTrails(class FName InFirstSocketName, class FName InSecondSocketName, enum class ETrailWidthMode InWidthMode, float InWidth);
};

// 0x0 (0x388 - 0x388)
// Class Engine.ParticleEventManager
class AParticleEventManager : public AActor
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleEventManager");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.Interface_CollisionDataProvider
class UInterface_CollisionDataProvider : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Interface_CollisionDataProvider");
		return Clss;
	}

};

// 0x298 (0x2C0 - 0x28)
// Class Engine.SkeletalMesh
class USkeletalMesh : public UObject
{
public:
	uint8                                        Pad_FE6[0x20];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeleton*                             Skeleton;                                          // 0x48(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                      ImportedBounds;                                    // 0x50(0x1C)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FBoxSphereBounds                      ExtendedBounds;                                    // 0x6C(0x1C)(Transient, DuplicateTransient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FVector                               PositiveBoundsExtension;                           // 0x88(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                               NegativeBoundsExtension;                           // 0x94(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSkeletalMaterial>             Materials;                                         // 0xA0(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	TArray<struct FBoneMirrorInfo>               SkelMirrorTable;                                   // 0xB0(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	enum class EAxis                             SkelMirrorAxis;                                    // 0xC0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAxis                             SkelMirrorFlipAxis;                                // 0xC1(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FE7[0x6];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FSkeletalMeshLODInfo>          LODInfo;                                           // 0xC8(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bUseFullPrecisionUVs : 1;                          // Mask: 0x1, PropSize: 0x10xD8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasBeenSimplified : 1;                            // Mask: 0x2, PropSize: 0x10xD8(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasVertexColors : 1;                              // Mask: 0x4, PropSize: 0x10xD8(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnablePerPolyCollision : 1;                       // Mask: 0x8, PropSize: 0x10xD8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_FC : 4;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FE8[0x7];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class UBodySetup*                            BodySetup;                                         // 0xE0(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                         PhysicsAsset;                                      // 0xE8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                         ShadowPhysicsAsset;                                // 0xF0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMorphTarget*>                  MorphTargets;                                      // 0xF8(0x10)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_FE9[0x168];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FClothingAssetData>            ClothingAssets;                                    // 0x270(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>             PostProcessAnimBlueprint;                          // 0x280(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x288(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_FEA[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class USkeletalMeshSocket*>           Sockets;                                           // 0x2A0(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_FEB[0x10];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkeletalMesh");
		return Clss;
	}

	int32 NumSockets();
	bool IsSectionUsingCloth(int32 InSectionIndex, bool bCheckCorrespondingSections);
	class USkeletalMeshSocket* GetSocketByIndex(int32 Index);
	struct FBoxSphereBounds GetImportedBounds();
	struct FBoxSphereBounds GetBounds();
	class USkeletalMeshSocket* FindSocketAndIndex(class FName InSocketName, int32* OutIndex);
	class USkeletalMeshSocket* FindSocket(class FName InSocketName);
};

// 0x50 (0x78 - 0x28)
// Class Engine.AnimationAsset
class UAnimationAsset : public UObject
{
public:
	uint8                                        Pad_FEC[0x8];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeleton*                             Skeleton;                                          // 0x30(0x8)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_FED[0x20];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAnimMetaData*>                 MetaData;                                          // 0x58(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x68(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimationAsset");
		return Clss;
	}

};

// 0x8 (0x390 - 0x388)
// Class Engine.ReflectionCapture
class AReflectionCapture : public AActor
{
public:
	class UReflectionCaptureComponent*           CaptureComponent;                                  // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ReflectionCapture");
		return Clss;
	}

};

// 0x0 (0x390 - 0x390)
// Class Engine.BoxReflectionCapture
class ABoxReflectionCapture : public AReflectionCapture
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BoxReflectionCapture");
		return Clss;
	}

};

// 0x0 (0x390 - 0x390)
// Class Engine.PlaneReflectionCapture
class APlaneReflectionCapture : public AReflectionCapture
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlaneReflectionCapture");
		return Clss;
	}

};

// 0x8 (0x398 - 0x390)
// Class Engine.SphereReflectionCapture
class ASphereReflectionCapture : public AReflectionCapture
{
public:
	class UDrawSphereComponent*                  DrawCaptureRadius;                                 // 0x390(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SphereReflectionCapture");
		return Clss;
	}

};

// 0x0 (0x388 - 0x388)
// Class Engine.RigidBodyBase
class ARigidBodyBase : public AActor
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RigidBodyBase");
		return Clss;
	}

};

// 0x20 (0x3A8 - 0x388)
// Class Engine.PhysicsConstraintActor
class APhysicsConstraintActor : public ARigidBodyBase
{
public:
	class UPhysicsConstraintComponent*           ConstraintComp;                                    // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                ConstraintActor1;                                  // 0x390(0x8)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                ConstraintActor2;                                  // 0x398(0x8)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableCollision : 1;                             // Mask: 0x1, PropSize: 0x10x3A0(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FEE[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsConstraintActor");
		return Clss;
	}

};

// 0x8 (0x390 - 0x388)
// Class Engine.PhysicsThruster
class APhysicsThruster : public ARigidBodyBase
{
public:
	class UPhysicsThrusterComponent*             ThrusterComponent;                                 // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsThruster");
		return Clss;
	}

};

// 0x8 (0x390 - 0x388)
// Class Engine.RadialForceActor
class ARadialForceActor : public ARigidBodyBase
{
public:
	class URadialForceComponent*                 ForceComponent;                                    // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RadialForceActor");
		return Clss;
	}

	void ToggleForce();
	void FireImpulse();
	void EnableForce();
	void DisableForce();
};

// 0x8 (0x390 - 0x388)
// Class Engine.SceneCapture
class ASceneCapture : public AActor
{
public:
	class UStaticMeshComponent*                  MeshComp;                                          // 0x388(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SceneCapture");
		return Clss;
	}

};

// 0x10 (0x3A0 - 0x390)
// Class Engine.PlanarReflection
class APlanarReflection : public ASceneCapture
{
public:
	class UPlanarReflectionComponent*            PlanarReflectionComponent;                         // 0x390(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowPreviewPlane;                                 // 0x398(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FEF[0x7];                                      // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlanarReflection");
		return Clss;
	}

	void OnInterpToggle(bool bEnable);
};

// 0x10 (0x3A0 - 0x390)
// Class Engine.SceneCapture2D
class ASceneCapture2D : public ASceneCapture
{
public:
	class USceneCaptureComponent2D*              CaptureComponent2D;                                // 0x390(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDrawFrustumComponent*                 DrawFrustum;                                       // 0x398(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SceneCapture2D");
		return Clss;
	}

	void OnInterpToggle(bool bEnable);
};

// 0x10 (0x3A0 - 0x390)
// Class Engine.SceneCaptureCube
class ASceneCaptureCube : public ASceneCapture
{
public:
	class USceneCaptureComponentCube*            CaptureComponentCube;                              // 0x390(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDrawFrustumComponent*                 DrawFrustum;                                       // 0x398(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SceneCaptureCube");
		return Clss;
	}

	void OnInterpToggle(bool bEnable);
};

// 0x0 (0x28 - 0x28)
// Class Engine.MatineeAnimInterface
class UMatineeAnimInterface : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MatineeAnimInterface");
		return Clss;
	}

};

// 0x8 (0x390 - 0x388)
// Class Engine.SplineMeshActor
class ASplineMeshActor : public AActor
{
public:
	class USplineMeshComponent*                  SplineMeshComponent;                               // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SplineMeshActor");
		return Clss;
	}

};

// 0x10 (0x398 - 0x388)
// Class Engine.SubDSurfaceActor
class ASubDSurfaceActor : public AActor
{
public:
	class USubDSurfaceComponent*                 SubDSurface;                                       // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                  DisplayMeshComponent;                              // 0x390(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SubDSurfaceActor");
		return Clss;
	}

};

// 0x0 (0x388 - 0x388)
// Class Engine.TargetPoint
class ATargetPoint : public AActor
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TargetPoint");
		return Clss;
	}

};

// 0x8 (0x390 - 0x388)
// Class Engine.TextRenderActor
class ATextRenderActor : public AActor
{
public:
	class UTextRenderComponent*                  TextRender;                                        // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextRenderActor");
		return Clss;
	}

};

// 0x10 (0x398 - 0x388)
// Class Engine.TriggerBase
class ATriggerBase : public AActor
{
public:
	class UShapeComponent*                       CollisionComponent;                                // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBillboardComponent*                   SpriteComponent;                                   // 0x390(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TriggerBase");
		return Clss;
	}

};

// 0x0 (0x398 - 0x398)
// Class Engine.TriggerBox
class ATriggerBox : public ATriggerBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TriggerBox");
		return Clss;
	}

};

// 0x0 (0x398 - 0x398)
// Class Engine.TriggerCapsule
class ATriggerCapsule : public ATriggerBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TriggerCapsule");
		return Clss;
	}

};

// 0x0 (0x398 - 0x398)
// Class Engine.TriggerSphere
class ATriggerSphere : public ATriggerBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TriggerSphere");
		return Clss;
	}

};

// 0x8 (0x390 - 0x388)
// Class Engine.VectorFieldVolume
class AVectorFieldVolume : public AActor
{
public:
	class UVectorFieldComponent*                 VectorFieldComponent;                              // 0x388(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VectorFieldVolume");
		return Clss;
	}

};

// 0x50 (0x140 - 0xF0)
// Class Engine.ApplicationLifecycleComponent
class UApplicationLifecycleComponent : public UActorComponent
{
public:
	UMulticastDelegateProperty_                  ApplicationWillDeactivateDelegate;                 // 0xF0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  ApplicationHasReactivatedDelegate;                 // 0x100(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  ApplicationWillEnterBackgroundDelegate;            // 0x110(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  ApplicationHasEnteredForegroundDelegate;           // 0x120(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  ApplicationWillTerminateDelegate;                  // 0x130(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ApplicationLifecycleComponent");
		return Clss;
	}

	void ApplicationLifetimeDelegate__DelegateSignature();
};

// 0xA0 (0x1D8 - 0x138)
// Class Engine.InterpToMovementComponent
class UInterpToMovementComponent : public UMovementComponent
{
public:
	float                                        Duration;                                          // 0x138(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPauseOnImpact : 1;                                // Mask: 0x1, PropSize: 0x10x13C(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_FD : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FF5[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EInterpToBehaviourType            BehaviourType;                                     // 0x140(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FF6[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bForceSubStepping : 1;                             // Mask: 0x1, PropSize: 0x10x144(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_FE : 7;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_FF7[0x3];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	UMulticastDelegateProperty_                  OnInterpToReverse;                                 // 0x148(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnInterpToStop;                                    // 0x158(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnWaitBeginDelegate;                               // 0x168(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnWaitEndDelegate;                                 // 0x178(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnResetDelegate;                                   // 0x188(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        MaxSimulationTimeStep;                             // 0x198(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxSimulationIterations;                           // 0x19C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInterpControlPoint>           ControlPoints;                                     // 0x1A0(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_FF8[0x28];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpToMovementComponent");
		return Clss;
	}

	void StopSimulating(struct FHitResult& HitResult);
	void RestartMovement(float InitialDirection);
	void OnInterpToWaitEndDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time);
	void OnInterpToWaitBeginDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time);
	void OnInterpToStopDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time);
	void OnInterpToReverseDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time);
	void OnInterpToResetDelegate__DelegateSignature(struct FHitResult& ImpactResult, float Time);
	void FinaliseControlPoints();
};

// 0x358 (0x380 - 0x28)
// Class Engine.Skeleton
class USkeleton : public UObject
{
public:
	TArray<struct FBoneNode>                     BoneTree;                                          // 0x28(0x10)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTransform>                    RefLocalPoses;                                     // 0x38(0x10)(ZeroConstructor, Deprecated, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_FF9[0x110];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 VirtualBoneGuid;                                   // 0x158(0x10)(IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FVirtualBone>                  VirtualBones;                                      // 0x168(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSkeletonToMeshLinkup>         LinkupCache;                                       // 0x178(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class USkeletalMeshSocket*>           Sockets;                                           // 0x188(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_FFA[0x50];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSmartNameContainer                   SmartNames;                                        // 0x1E8(0x50)(Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_FFB[0x18];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UBlendProfile*>                 BlendProfiles;                                     // 0x250(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FAnimSlotGroup>                SlotGroups;                                        // 0x260(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_FFC[0x110];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Skeleton");
		return Clss;
	}

};

// 0x28 (0xA0 - 0x78)
// Class Engine.AnimSequenceBase
class UAnimSequenceBase : public UAnimationAsset
{
public:
	TArray<struct FAnimNotifyEvent>              Notifies;                                          // 0x78(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                        SequenceLength;                                    // 0x88(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RateScale;                                         // 0x8C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawCurveTracks                       RawCurveData;                                      // 0x90(0x10)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimSequenceBase");
		return Clss;
	}

	float GetPlayLength();
};

// 0x0 (0xA0 - 0xA0)
// Class Engine.AnimCompositeBase
class UAnimCompositeBase : public UAnimSequenceBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCompositeBase");
		return Clss;
	}

};

// 0x108 (0x1A8 - 0xA0)
// Class Engine.AnimMontage
class UAnimMontage : public UAnimCompositeBase
{
public:
	struct FAlphaBlend                           BlendIn;                                           // 0xA0(0x38)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                        BlendInTime;                                       // 0xD8(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FFD[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FAlphaBlend                           BlendOut;                                          // 0xE0(0x38)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                        BlendOutTime;                                      // 0x118(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BlendOutTriggerTime;                               // 0x11C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  SyncGroup;                                         // 0x120(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SyncSlotIndex;                                     // 0x128(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FFE[0x4];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	struct FMarkerSyncData                       MarkerData;                                        // 0x130(0x20)(NativeAccessSpecifierPublic)
	TArray<struct FCompositeSection>             CompositeSections;                                 // 0x150(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FSlotAnimationTrack>           SlotAnimTracks;                                    // 0x160(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBranchingPoint>               BranchingPoints;                                   // 0x170(0x10)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	bool                                         bEnableRootMotionTranslation;                      // 0x180(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnableRootMotionRotation;                         // 0x181(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERootMotionRootLock               RootMotionRootLock;                                // 0x182(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_FFF[0x5];                                      // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBranchingPointMarker>         BranchingPointMarkers;                             // 0x188(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                BranchingPointStateNotifyIndices;                  // 0x198(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimMontage");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.RVOAvoidanceInterface
class URVOAvoidanceInterface : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RVOAvoidanceInterface");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.NetworkPredictionInterface
class UNetworkPredictionInterface : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NetworkPredictionInterface");
		return Clss;
	}

};

// 0x68 (0x1A0 - 0x138)
// Class Engine.ProjectileMovementComponent
class UProjectileMovementComponent : public UMovementComponent
{
public:
	float                                        InitialSpeed;                                      // 0x138(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxSpeed;                                          // 0x13C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRotationFollowsVelocity : 1;                      // Mask: 0x1, PropSize: 0x10x140(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldBounce : 1;                                 // Mask: 0x2, PropSize: 0x10x140(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInitialVelocityInLocalSpace : 1;                  // Mask: 0x4, PropSize: 0x10x140(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceSubStepping : 1;                             // Mask: 0x8, PropSize: 0x10x140(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsHomingProjectile : 1;                           // Mask: 0x10, PropSize: 0x10x140(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bBounceAngleAffectsFriction : 1;                   // Mask: 0x20, PropSize: 0x10x140(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsSliding : 1;                                    // Mask: 0x40, PropSize: 0x10x140(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_FF : 1;                                     // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1001[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PreviousHitTime;                                   // 0x144(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               PreviousHitNormal;                                 // 0x148(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ProjectileGravityScale;                            // 0x154(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Buoyancy;                                          // 0x158(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Bounciness;                                        // 0x15C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Friction;                                          // 0x160(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BounceVelocityStopSimulatingThreshold;             // 0x164(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnProjectileBounce;                                // 0x168(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnProjectileStop;                                  // 0x178(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                        HomingAccelerationMagnitude;                       // 0x188(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USceneComponent>        HomingTargetComponent;                             // 0x18C(0x8)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxSimulationTimeStep;                             // 0x194(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxSimulationIterations;                           // 0x198(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1002[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ProjectileMovementComponent");
		return Clss;
	}

	void StopSimulating(struct FHitResult& HitResult);
	void SetVelocityInLocalSpace(const struct FVector& NewVelocity);
	void OnProjectileStopDelegate__DelegateSignature(struct FHitResult& ImpactResult);
	void OnProjectileBounceDelegate__DelegateSignature(struct FHitResult& ImpactResult, struct FVector& ImpactVelocity);
	struct FVector LimitVelocity(const struct FVector& NewVelocity);
};

// 0x20 (0x158 - 0x138)
// Class Engine.RotatingMovementComponent
class URotatingMovementComponent : public UMovementComponent
{
public:
	struct FRotator                              RotationRate;                                      // 0x138(0xC)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               PivotTranslation;                                  // 0x144(0xC)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRotationInLocalSpace : 1;                         // Mask: 0x1, PropSize: 0x10x150(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1003[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RotatingMovementComponent");
		return Clss;
	}

};

// 0x8 (0xF8 - 0xF0)
// Class Engine.NavigationInvokerComponent
class UNavigationInvokerComponent : public UActorComponent
{
public:
	float                                        TileGenerationRadius;                              // 0xF0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TileRemovalRadius;                                 // 0xF4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavigationInvokerComponent");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.NavLinkCustomInterface
class UNavLinkCustomInterface : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavLinkCustomInterface");
		return Clss;
	}

};

// 0x28 (0x148 - 0x120)
// Class Engine.NavModifierComponent
class UNavModifierComponent : public UNavRelevantComponent
{
public:
	TSubclassOf<class UNavArea>                  AreaClass;                                         // 0x120(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               FailsafeExtent;                                    // 0x128(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1004[0x14];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavModifierComponent");
		return Clss;
	}

	void SetAreaClass(TSubclassOf<class UNavArea> NewAreaClass);
};

// 0x28 (0x118 - 0xF0)
// Class Engine.PawnNoiseEmitterComponent
class UPawnNoiseEmitterComponent : public UActorComponent
{
public:
	uint8                                        bAIPerceptionSystemCompatibilityMode : 1;          // Mask: 0x1, PropSize: 0x10xF0(0x1)(Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_100 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1005[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               LastRemoteNoisePosition;                           // 0xF4(0xC)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NoiseLifetime;                                     // 0x100(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LastRemoteNoiseVolume;                             // 0x104(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        LastRemoteNoiseTime;                               // 0x108(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        LastLocalNoiseVolume;                              // 0x10C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                        LastLocalNoiseTime;                                // 0x110(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1006[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PawnNoiseEmitterComponent");
		return Clss;
	}

	void MakeNoise(class AActor* NoiseMaker, float Loudness, struct FVector& NoiseLocation);
};

// 0x40 (0x130 - 0xF0)
// Class Engine.PhysicalAnimationComponent
class UPhysicalAnimationComponent : public UActorComponent
{
public:
	float                                        StrengthMultiplyer;                                // 0xF0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1009[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeletalMeshComponent*                SkeletalMeshComponent;                             // 0xF8(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_100A[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicalAnimationComponent");
		return Clss;
	}

	void SetStrengthMultiplyer(float InStrengthMultiplyer);
	void SetSkeletalMeshComponent(class USkeletalMeshComponent* InSkeletalMeshComponent);
	void ApplyPhysicalAnimationSettingsBelow(class FName BodyName, struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf);
	void ApplyPhysicalAnimationSettings(class FName BodyName, struct FPhysicalAnimationData& PhysicalAnimationData);
	void ApplyPhysicalAnimationProfileBelow(class FName BodyName, class FName ProfileName, bool bIncludeSelf, bool bClearNotFound);
};

// 0xB0 (0x1A0 - 0xF0)
// Class Engine.PhysicsHandleComponent
class UPhysicsHandleComponent : public UActorComponent
{
public:
	class UPrimitiveComponent*                   GrabbedComponent;                                  // 0xF0(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_100D[0xC];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        BitPad_101 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bSoftAngularConstraint : 1;                        // Mask: 0x2, PropSize: 0x10x104(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSoftLinearConstraint : 1;                         // Mask: 0x4, PropSize: 0x10x104(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInterpolateTarget : 1;                            // Mask: 0x8, PropSize: 0x10x104(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_102 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_100E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LinearDamping;                                     // 0x108(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LinearStiffness;                                   // 0x10C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AngularDamping;                                    // 0x110(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AngularStiffness;                                  // 0x114(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_100F[0x68];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InterpolationSpeed;                                // 0x180(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1010[0x1C];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsHandleComponent");
		return Clss;
	}

	void SetTargetRotation(const struct FRotator& NewRotation);
	void SetTargetLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetTargetLocation(const struct FVector& NewLocation);
	void SetLinearStiffness(float NewLinearStiffness);
	void SetLinearDamping(float NewLinearDamping);
	void SetInterpolationSpeed(float NewInterpolationSpeed);
	void SetAngularStiffness(float NewAngularStiffness);
	void SetAngularDamping(float NewAngularDamping);
	void ReleaseComponent();
	void GrabComponentAtLocationWithRotation(class UPrimitiveComponent* Component, class FName InBoneName, const struct FVector& Location, const struct FRotator& Rotation);
	void GrabComponentAtLocation(class UPrimitiveComponent* Component, class FName InBoneName, const struct FVector& GrabLocation);
	void GrabComponent(class UPrimitiveComponent* Component, class FName InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation);
	void GetTargetLocationAndRotation(struct FVector* TargetLocation, struct FRotator* TargetRotation);
	class UPrimitiveComponent* GetGrabbedComponent();
};

// 0x20 (0x110 - 0xF0)
// Class Engine.PlatformEventsComponent
class UPlatformEventsComponent : public UActorComponent
{
public:
	UMulticastDelegateProperty_                  PlatformChangedToLaptopModeDelegate;               // 0xF0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  PlatformChangedToTabletModeDelegate;               // 0x100(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlatformEventsComponent");
		return Clss;
	}

	bool SupportsConvertibleLaptops();
	void PlatformEventDelegate__DelegateSignature();
	bool IsInTabletMode();
	bool IsInLaptopMode();
};

// 0x1E0 (0x470 - 0x290)
// Class Engine.AtmosphericFogComponent
class UAtmosphericFogComponent : public USceneComponent
{
public:
	float                                        SunMultiplier;                                     // 0x290(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FogMultiplier;                                     // 0x294(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DensityMultiplier;                                 // 0x298(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DensityOffset;                                     // 0x29C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceScale;                                     // 0x2A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AltitudeScale;                                     // 0x2A4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceOffset;                                    // 0x2A8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GroundOffset;                                      // 0x2AC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StartDistance;                                     // 0x2B0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SunDiscScale;                                      // 0x2B4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DefaultBrightness;                                 // 0x2B8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                DefaultLightColor;                                 // 0x2BC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableSunDisk : 1;                               // Mask: 0x1, PropSize: 0x10x2C0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableGroundScattering : 1;                      // Mask: 0x2, PropSize: 0x10x2C0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_103 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1011[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FAtmospherePrecomputeParameters       PrecomputeParams;                                  // 0x2C4(0x2C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UTexture2D*                            TransmittanceTexture;                              // 0x2F0(0x8)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            IrradianceTexture;                                 // 0x2F8(0x8)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1012[0x170];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AtmosphericFogComponent");
		return Clss;
	}

	void StartPrecompute();
	void SetSunMultiplier(float NewSunMultiplier);
	void SetStartDistance(float NewStartDistance);
	void SetPrecomputeParams(float DensityHeight, int32 MaxScatteringOrder, int32 InscatterAltitudeSampleNum);
	void SetFogMultiplier(float NewFogMultiplier);
	void SetDistanceScale(float NewDistanceScale);
	void SetDistanceOffset(float NewDistanceOffset);
	void SetDensityOffset(float NewDensityOffset);
	void SetDensityMultiplier(float NewDensityMultiplier);
	void SetDefaultLightColor(const struct FLinearColor& NewLightColor);
	void SetDefaultBrightness(float NewBrightness);
	void SetAltitudeScale(float NewAltitudeScale);
	void DisableSunDisk(bool NewSunDisk);
	void DisableGroundScattering(bool NewGroundScattering);
};

// 0x120 (0x148 - 0x28)
// Class Engine.SoundAttenuation
class USoundAttenuation : public UObject
{
public:
	struct FSoundAttenuationSettings             Attenuation;                                       // 0x28(0x120)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundAttenuation");
		return Clss;
	}

};

// 0x2C0 (0x550 - 0x290)
// Class Engine.AudioComponent
class UAudioComponent : public USceneComponent
{
public:
	class USoundBase*                            Sound;                                             // 0x290(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAudioComponentParam>          InstanceParameters;                                // 0x298(0x10)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	class USoundClass*                           SoundClassOverride;                                // 0x2A8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoDestroy : 1;                                  // Mask: 0x1, PropSize: 0x10x2B0(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStopWhenOwnerDestroyed : 1;                       // Mask: 0x2, PropSize: 0x10x2B0(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldRemainActiveIfDropped : 1;                  // Mask: 0x4, PropSize: 0x10x2B0(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowSpatialization : 1;                          // Mask: 0x8, PropSize: 0x10x2B0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideAttenuation : 1;                          // Mask: 0x10, PropSize: 0x10x2B0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_104 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1017[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bOverrideSubtitlePriority : 1;                     // Mask: 0x1, PropSize: 0x10x2B4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_105 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1018[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bIsUISound : 1;                                    // Mask: 0x1, PropSize: 0x10x2B8(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableLowPassFilter : 1;                          // Mask: 0x2, PropSize: 0x10x2B8(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverridePriority : 1;                             // Mask: 0x4, PropSize: 0x10x2B8(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSuppressSubtitles : 1;                            // Mask: 0x8, PropSize: 0x10x2B8(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_106 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1019[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PitchModulationMin;                                // 0x2C0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PitchModulationMax;                                // 0x2C4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumeModulationMin;                               // 0x2C8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumeModulationMax;                               // 0x2CC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumeMultiplier;                                  // 0x2D0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Priority;                                          // 0x2D4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SubtitlePriority;                                  // 0x2D8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumeWeightedPriorityScale;                       // 0x2DC(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PitchMultiplier;                                   // 0x2E0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HighFrequencyGainMultiplier;                       // 0x2E4(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LowPassFilterFrequency;                            // 0x2E8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_101A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundAttenuation*                     AttenuationSettings;                               // 0x2F0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundAttenuationSettings             AttenuationOverrides;                              // 0x2F8(0x120)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USoundConcurrency*                     ConcurrencySettings;                               // 0x418(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_101B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	UMulticastDelegateProperty_                  OnAudioFinished;                                   // 0x428(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_101C[0x78];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	UMulticastDelegateProperty_                  OnAudioPlaybackPercent;                            // 0x4B0(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_101D[0x70];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	UDelegateProperty_                           OnQueueSubtitles;                                  // 0x530(0x10)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_101E[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AudioComponent");
		return Clss;
	}

	void Stop();
	void SetWaveParameter(class FName InName, class USoundWave* InWave);
	void SetVolumeMultiplier(float NewVolumeMultiplier);
	void SetUISound(bool bInUISound);
	void SetSound(class USoundBase* NewSound);
	void SetPitchMultiplier(float NewPitchMultiplier);
	void SetPaused(bool bPause);
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);
	void SetIntParameter(class FName InName, int32 InInt);
	void SetFloatParameter(class FName InName, float InFloat);
	void SetBoolParameter(class FName InName, bool InBool);
	void Play(float StartTime);
	bool IsPlaying();
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime);
	bool BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings* OutAttenuationSettings);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
	void AdjustAttenuation(struct FSoundAttenuationSettings& InAttenuationSettings);
};

// 0x40 (0x2D0 - 0x290)
// Class Engine.DecalComponent
class UDecalComponent : public USceneComponent
{
public:
	class UMaterialInterface*                    DecalMaterial;                                     // 0x290(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SortOrder;                                         // 0x298(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeScreenSize;                                    // 0x29C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeStartDelay;                                    // 0x2A0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeDuration;                                      // 0x2A4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDestroyOwnerAfterFade : 1;                        // Mask: 0x1, PropSize: 0x10x2A8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_107 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1020[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               DecalSize;                                         // 0x2AC(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1021[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DecalComponent");
		return Clss;
	}

	void SetSortOrder(int32 Value);
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);
	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	float GetFadeStartDelay();
	float GetFadeDuration();
	class UMaterialInterface* GetDecalMaterial();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
};

// 0x80 (0x310 - 0x290)
// Class Engine.ExponentialHeightFogComponent
class UExponentialHeightFogComponent : public USceneComponent
{
public:
	float                                        FogDensity;                                        // 0x290(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          FogInscatteringColor;                              // 0x294(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1022[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextureCube*                          InscatteringColorCubemap;                          // 0x2A8(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InscatteringColorCubemapAngle;                     // 0x2B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          InscatteringTextureTint;                           // 0x2B4(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FullyDirectionalInscatteringColorDistance;         // 0x2C4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NonDirectionalInscatteringColorDistance;           // 0x2C8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DirectionalInscatteringExponent;                   // 0x2CC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DirectionalInscatteringStartDistance;              // 0x2D0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          DirectionalInscatteringColor;                      // 0x2D4(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FogHeightFalloff;                                  // 0x2E4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FogMaxOpacity;                                     // 0x2E8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        StartDistance;                                     // 0x2EC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FogCutoffDistance;                                 // 0x2F0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnableVolumetricFog;                              // 0x2F4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1023[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        VolumetricFogScatteringDistribution;               // 0x2F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumetricFogScatteringScale;                      // 0x2FC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumetricFogAbsorptionScale;                      // 0x300(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumetricFogDistance;                             // 0x304(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOverrideLightColorsWithFogInscatteringColors;     // 0x308(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1024[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ExponentialHeightFogComponent");
		return Clss;
	}

	void SetVolumetricFogScatteringScale(float NewValue);
	void SetVolumetricFogScatteringDistribution(float NewValue);
	void SetVolumetricFogDistance(float NewValue);
	void SetVolumetricFogAbsorptionScale(float NewValue);
	void SetVolumetricFog(bool bNewValue);
	void SetStartDistance(float Value);
	void SetNonDirectionalInscatteringColorDistance(float Value);
	void SetInscatteringTextureTint(const struct FLinearColor& Value);
	void SetInscatteringColorCubemapAngle(float Value);
	void SetInscatteringColorCubemap(class UTextureCube* Value);
	void SetFullyDirectionalInscatteringColorDistance(float Value);
	void SetFogMaxOpacity(float Value);
	void SetFogInscatteringColor(const struct FLinearColor& Value);
	void SetFogHeightFalloff(float Value);
	void SetFogDensity(float Value);
	void SetFogCutoffDistance(float Value);
	void SetDirectionalInscatteringStartDistance(float Value);
	void SetDirectionalInscatteringExponent(float Value);
	void SetDirectionalInscatteringColor(const struct FLinearColor& Value);
};

// 0xA8 (0xD0 - 0x28)
// Class Engine.ForceFeedbackAttenuation
class UForceFeedbackAttenuation : public UObject
{
public:
	struct FForceFeedbackAttenuationSettings     Attenuation;                                       // 0x28(0xA8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ForceFeedbackAttenuation");
		return Clss;
	}

};

// 0xE0 (0x370 - 0x290)
// Class Engine.ForceFeedbackComponent
class UForceFeedbackComponent : public USceneComponent
{
public:
	class UForceFeedbackEffect*                  ForceFeedbackEffect;                               // 0x290(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoDestroy : 1;                                  // Mask: 0x1, PropSize: 0x10x298(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStopWhenOwnerDestroyed : 1;                       // Mask: 0x2, PropSize: 0x10x298(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLooping : 1;                                      // Mask: 0x4, PropSize: 0x10x298(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideAttenuation : 1;                          // Mask: 0x8, PropSize: 0x10x298(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_108 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1026[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        IntensityMultiplier;                               // 0x29C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UForceFeedbackAttenuation*             AttenuationSettings;                               // 0x2A0(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FForceFeedbackAttenuationSettings     AttenuationOverrides;                              // 0x2A8(0xA8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnForceFeedbackFinished;                           // 0x350(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_1027[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ForceFeedbackComponent");
		return Clss;
	}

	void Stop();
	void SetIntensityMultiplier(float NewIntensityMultiplier);
	void SetForceFeedbackEffect(class UForceFeedbackEffect* NewForceFeedbackEffect);
	void Play(float StartTime);
	bool BP_GetAttenuationSettingsToApply(struct FForceFeedbackAttenuationSettings* OutAttenuationSettings);
	void AdjustAttenuation(struct FForceFeedbackAttenuationSettings& InAttenuationSettings);
};

// 0x28 (0x2B8 - 0x290)
// Class Engine.LightComponentBase
class ULightComponentBase : public USceneComponent
{
public:
	struct FGuid                                 LightGuid;                                         // 0x290(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Brightness;                                        // 0x2A0(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Intensity;                                         // 0x2A4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                LightColor;                                        // 0x2A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAffectsWorld : 1;                                 // Mask: 0x1, PropSize: 0x10x2AC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        CastShadows : 1;                                   // Mask: 0x2, PropSize: 0x10x2AC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        CastStaticShadows : 1;                             // Mask: 0x4, PropSize: 0x10x2AC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        CastDynamicShadows : 1;                            // Mask: 0x8, PropSize: 0x10x2AC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAffectTranslucentLighting : 1;                    // Mask: 0x10, PropSize: 0x10x2AC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastVolumetricShadow : 1;                         // Mask: 0x20, PropSize: 0x10x2AC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_109 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1028[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        IndirectLightingIntensity;                         // 0x2B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumetricScatteringIntensity;                     // 0x2B4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightComponentBase");
		return Clss;
	}

	void SetCastVolumetricShadow(bool bNewValue);
	void SetCastShadows(bool bNewValue);
	struct FLinearColor GetLightColor();
};

// 0x108 (0x3C0 - 0x2B8)
// Class Engine.LightComponent
class ULightComponent : public ULightComponentBase
{
public:
	float                                        Temperature;                                       // 0x2B8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDrawDistance;                                   // 0x2BC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDistanceFadeRange;                              // 0x2C0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseTemperature : 1;                               // Mask: 0x1, PropSize: 0x10x2C4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_10A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_102A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ShadowMapChannel;                                  // 0x2C8(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_102B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinRoughness;                                      // 0x2D0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShadowResolutionScale;                             // 0x2D4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShadowBias;                                        // 0x2D8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShadowSharpen;                                     // 0x2DC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ContactShadowLength;                               // 0x2E0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        InverseSquaredFalloff : 1;                         // Mask: 0x1, PropSize: 0x10x2E4(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        CastTranslucentShadows : 1;                        // Mask: 0x2, PropSize: 0x10x2E4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCastShadowsFromCinematicObjectsOnly : 1;          // Mask: 0x4, PropSize: 0x10x2E4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAffectDynamicIndirectLighting : 1;                // Mask: 0x8, PropSize: 0x10x2E4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceCachedShadowsForMovablePrimitives : 1;       // Mask: 0x10, PropSize: 0x10x2E4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_10B : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_102C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLightingChannels                     LightingChannels;                                  // 0x2E8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                        Pad_102D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialInterface*                    LightFunctionMaterial;                             // 0x2F0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LightFunctionScale;                                // 0x2F8(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_102E[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextureLightProfile*                  IESTexture;                                        // 0x308(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseIESBrightness : 1;                             // Mask: 0x1, PropSize: 0x10x310(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_10C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_102F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        IESBrightnessScale;                                // 0x314(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightFunctionFadeDistance;                         // 0x318(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DisabledBrightness;                                // 0x31C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableLightShaftBloom : 1;                        // Mask: 0x1, PropSize: 0x10x320(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_10D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1030[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BloomScale;                                        // 0x324(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BloomThreshold;                                    // 0x328(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                BloomTint;                                         // 0x32C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseRayTracedDistanceFieldShadows;                 // 0x330(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1031[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RayStartOffsetDepthScale;                          // 0x334(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1032[0x88];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightComponent");
		return Clss;
	}

	void SetVolumetricScatteringIntensity(float NewIntensity);
	void SetTemperature(float NewTemperature);
	void SetShadowBias(float NewValue);
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightFunctionDisabledBrightness(float NewValue);
	void SetLightColor(const struct FLinearColor& NewLightColor, bool bSRGB);
	void SetIntensity(float NewIntensity);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetIESTexture(class UTextureLightProfile* NewValue);
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);
	void SetEnableLightShaftBloom(bool bNewValue);
	void SetBloomTint(const struct FColor& NewValue);
	void SetBloomThreshold(float NewValue);
	void SetBloomScale(float NewValue);
	void SetAffectTranslucentLighting(bool bNewValue);
	void SetAffectDynamicIndirectLighting(bool bNewValue);
};

// 0x70 (0x430 - 0x3C0)
// Class Engine.DirectionalLightComponent
class UDirectionalLightComponent : public ULightComponent
{
public:
	uint8                                        bEnableLightShaftOcclusion : 1;                    // Mask: 0x1, PropSize: 0x10x3C0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_10E : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1033[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        OcclusionMaskDarkness;                             // 0x3C4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OcclusionDepthRange;                               // 0x3C8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LightShaftOverrideDirection;                       // 0x3CC(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WholeSceneDynamicShadowRadius;                     // 0x3D8(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DynamicShadowDistanceMovableLight;                 // 0x3DC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DynamicShadowDistanceStationaryLight;              // 0x3E0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        DynamicShadowCascades;                             // 0x3E4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CascadeDistributionExponent;                       // 0x3E8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CascadeTransitionFraction;                         // 0x3EC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ShadowDistanceFadeoutFraction;                     // 0x3F0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseInsetShadowsForMovableObjects : 1;             // Mask: 0x1, PropSize: 0x10x3F4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_10F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1034[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        FarShadowCascadeCount;                             // 0x3F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FarShadowDistance;                                 // 0x3FC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceFieldShadowDistance;                       // 0x400(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightSourceAngle;                                  // 0x404(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TraceDistance;                                     // 0x408(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightmassDirectionalLightSettings    LightmassSettings;                                 // 0x40C(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        bCastModulatedShadows : 1;                         // Mask: 0x1, PropSize: 0x10x41C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_110 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1035[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                ModulatedShadowColor;                              // 0x420(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedAsAtmosphereSunLight : 1;                     // Mask: 0x1, PropSize: 0x10x424(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1036[0xB];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DirectionalLightComponent");
		return Clss;
	}

	void SetShadowDistanceFadeoutFraction(float NewValue);
	void SetOcclusionMaskDarkness(float NewValue);
	void SetLightShaftOverrideDirection(const struct FVector& NewValue);
	void SetEnableLightShaftOcclusion(bool bNewValue);
	void SetDynamicShadowDistanceStationaryLight(float NewValue);
	void SetDynamicShadowDistanceMovableLight(float NewValue);
	void SetDynamicShadowCascades(int32 NewValue);
	void SetCascadeTransitionFraction(float NewValue);
	void SetCascadeDistributionExponent(float NewValue);
};

// 0x28 (0x3E8 - 0x3C0)
// Class Engine.PointLightComponent
class UPointLightComponent : public ULightComponent
{
public:
	float                                        Radius;                                            // 0x3C0(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AttenuationRadius;                                 // 0x3C4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseInverseSquaredFalloff : 1;                     // Mask: 0x1, PropSize: 0x10x3C8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_111 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1037[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LightFalloffExponent;                              // 0x3CC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SourceRadius;                                      // 0x3D0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SourceLength;                                      // 0x3D4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightmassPointLightSettings          LightmassSettings;                                 // 0x3D8(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1038[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PointLightComponent");
		return Clss;
	}

	void SetSourceRadius(float bNewValue);
	void SetSourceLength(float NewValue);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
	void SetAttenuationRadius(float NewRadius);
};

// 0x18 (0x400 - 0x3E8)
// Class Engine.SpotLightComponent
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                        InnerConeAngle;                                    // 0x3E8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OuterConeAngle;                                    // 0x3EC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LightShaftConeAngle;                               // 0x3F0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1039[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SpotLightComponent");
		return Clss;
	}

	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetInnerConeAngle(float NewInnerConeAngle);
};

// 0x1B8 (0x470 - 0x2B8)
// Class Engine.SkyLightComponent
class USkyLightComponent : public ULightComponentBase
{
public:
	enum class ESkyLightSourceType               SourceType;                                        // 0x2B8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_103B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextureCube*                          Cubemap;                                           // 0x2C0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SourceCubemapAngle;                                // 0x2C8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        CubemapResolution;                                 // 0x2CC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SkyDistanceThreshold;                              // 0x2D0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCaptureEmissiveOnly;                              // 0x2D4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLowerHemisphereIsBlack;                           // 0x2D5(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_103C[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          LowerHemisphereColor;                              // 0x2D8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OcclusionMaxDistance;                              // 0x2E8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Contrast;                                          // 0x2EC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OcclusionExponent;                                 // 0x2F0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinOcclusion;                                      // 0x2F4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                OcclusionTint;                                     // 0x2F8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EOcclusionCombineMode             OcclusionCombineMode;                              // 0x2FC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_103D[0xAB];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextureCube*                          BlendDestinationCubemap;                           // 0x3A8(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_103E[0xC0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkyLightComponent");
		return Clss;
	}

	void SetVolumetricScatteringIntensity(float NewIntensity);
	void SetOcclusionTint(struct FColor& InTint);
	void SetOcclusionExponent(float InOcclusionExponent);
	void SetOcclusionContrast(float InOcclusionContrast);
	void SetMinOcclusion(float InMinOcclusion);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetIntensity(float NewIntensity);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetCubemapBlend(class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap, float InBlendFraction);
	void SetCubemap(class UTextureCube* NewCubemap);
	void RecaptureSky();
};

// 0x10 (0x2A0 - 0x290)
// Class Engine.LightmassPortalComponent
class ULightmassPortalComponent : public USceneComponent
{
public:
	class UBoxComponent*                         PreviewBox;                                        // 0x290(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_103F[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightmassPortalComponent");
		return Clss;
	}

};

// 0x30 (0x2C0 - 0x290)
// Class Engine.NavigationGraphNodeComponent
class UNavigationGraphNodeComponent : public USceneComponent
{
public:
	struct FNavGraphNode                         Node;                                              // 0x290(0x18)(NativeAccessSpecifierPublic)
	class UNavigationGraphNodeComponent*         NextNodeComponent;                                 // 0x2A8(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavigationGraphNodeComponent*         PrevNodeComponent;                                 // 0x2B0(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1040[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavigationGraphNodeComponent");
		return Clss;
	}

};

// 0x240 (0x4D0 - 0x290)
// Class Engine.PhysicsConstraintComponent
class UPhysicsConstraintComponent : public USceneComponent
{
public:
	class AActor*                                ConstraintActor1;                                  // 0x290(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConstrainComponentPropName           ComponentName1;                                    // 0x298(0x8)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                ConstraintActor2;                                  // 0x2A0(0x8)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConstrainComponentPropName           ComponentName2;                                    // 0x2A8(0x8)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_104A[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UPhysicsConstraintTemplate*            ConstraintSetup;                                   // 0x2C0(0x8)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnConstraintBroken;                                // 0x2C8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_104B[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FConstraintInstance                   ConstraintInstance;                                // 0x2E0(0x1F0)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsConstraintComponent");
		return Clss;
	}

	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);
	void SetOrientationDriveSLERP(bool bEnableSLERP);
	void SetLinearZLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize);
	void SetLinearYLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize);
	void SetLinearXLimit(enum class ELinearConstraintMotion ConstraintType, float LimitSize);
	void SetLinearVelocityTarget(struct FVector& InVelTarget);
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearPositionTarget(struct FVector& InPosTarget);
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);
	void SetDisableCollision(bool bDisableCollision);
	void SetConstraintReferencePosition(enum class EConstraintFrame Frame, struct FVector& RefPosition);
	void SetConstraintReferenceOrientation(enum class EConstraintFrame Frame, struct FVector& PriAxis, struct FVector& SecAxis);
	void SetConstraintReferenceFrame(enum class EConstraintFrame Frame, struct FTransform& RefFrame);
	void SetConstrainedComponents(class UPrimitiveComponent* Component1, class FName BoneName1, class UPrimitiveComponent* Component2, class FName BoneName2);
	void SetAngularVelocityTarget(struct FVector& InVelTarget);
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularTwistLimit(enum class EAngularConstraintMotion ConstraintType, float TwistLimitAngle);
	void SetAngularSwing2Limit(enum class EAngularConstraintMotion MotionType, float Swing2LimitAngle);
	void SetAngularSwing1Limit(enum class EAngularConstraintMotion MotionType, float Swing1LimitAngle);
	void SetAngularOrientationTarget(struct FRotator& InPosTarget);
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);
	void SetAngularDriveMode(enum class EAngularDriveMode DriveMode);
	float GetCurrentTwist();
	float GetCurrentSwing2();
	float GetCurrentSwing1();
	void GetConstraintForce(struct FVector* OutLinearForce, struct FVector* OutAngularForce);
	void BreakConstraint();
};

// 0x30 (0x2C0 - 0x290)
// Class Engine.PhysicsSpringComponent
class UPhysicsSpringComponent : public USceneComponent
{
public:
	float                                        SpringStiffness;                                   // 0x290(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpringDamping;                                     // 0x294(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpringLengthAtRest;                                // 0x298(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpringRadius;                                      // 0x29C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECollisionChannel                 SpringChannel;                                     // 0x2A0(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIgnoreSelf;                                       // 0x2A1(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_104C[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SpringCompression;                                 // 0x2A4(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_104D[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsSpringComponent");
		return Clss;
	}

	struct FVector GetSpringRestingPoint();
	struct FVector GetSpringDirection();
	struct FVector GetSpringCurrentEndPoint();
	float GetNormalizedCompressionScalar();
};

// 0x10 (0x2A0 - 0x290)
// Class Engine.PhysicsThrusterComponent
class UPhysicsThrusterComponent : public USceneComponent
{
public:
	float                                        ThrustStrength;                                    // 0x290(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_104E[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsThrusterComponent");
		return Clss;
	}

};

// 0x4E0 (0x770 - 0x290)
// Class Engine.PostProcessComponent
class UPostProcessComponent : public USceneComponent
{
public:
	uint8                                        Pad_1050[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  Settings;                                          // 0x2A0(0x4C0)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	float                                        Priority;                                          // 0x760(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BlendRadius;                                       // 0x764(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        BlendWeight;                                       // 0x768(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x76C(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUnbound : 1;                                      // Mask: 0x2, PropSize: 0x10x76C(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1051[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PostProcessComponent");
		return Clss;
	}

	void AddOrUpdateBlendable(UInterfaceProperty_ InBlendableObject, float InWeight);
};

// 0x20 (0x690 - 0x670)
// Class Engine.ArrowComponent
class UArrowComponent : public UPrimitiveComponent
{
public:
	struct FColor                                ArrowColor;                                        // 0x670(0x4)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ArrowSize;                                         // 0x674(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsScreenSizeScaled;                               // 0x678(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1052[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ScreenSize;                                        // 0x67C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTreatAsASprite : 1;                               // Mask: 0x1, PropSize: 0x10x680(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1053[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ArrowComponent");
		return Clss;
	}

	void SetArrowColor(const struct FLinearColor& NewColor);
};

// 0x20 (0x690 - 0x670)
// Class Engine.BillboardComponent
class UBillboardComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                            Sprite;                                            // 0x670(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsScreenSizeScaled : 1;                           // Mask: 0x1, PropSize: 0x10x678(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_112 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1054[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ScreenSize;                                        // 0x67C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        U;                                                 // 0x680(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        UL;                                                // 0x684(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        V;                                                 // 0x688(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VL;                                                // 0x68C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BillboardComponent");
		return Clss;
	}

	void SetUV(int32 NewU, int32 NewUL, int32 NewV, int32 NewVL);
	void SetSpriteAndUV(class UTexture2D* NewSprite, int32 NewU, int32 NewUL, int32 NewV, int32 NewVL);
	void SetSprite(class UTexture2D* NewSprite);
};

// 0x20 (0x690 - 0x670)
// Class Engine.BrushComponent
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UModel*                                Brush;                                             // 0x670(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBodySetup*                            BrushBodySetup;                                    // 0x678(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               PrePivot;                                          // 0x680(0xC)(Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1055[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BrushComponent");
		return Clss;
	}

};

// 0x20 (0x690 - 0x670)
// Class Engine.DrawFrustumComponent
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	struct FColor                                FrustumColor;                                      // 0x670(0x4)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FrustumAngle;                                      // 0x674(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FrustumAspectRatio;                                // 0x678(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FrustumStartDist;                                  // 0x67C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FrustumEndDist;                                    // 0x680(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1056[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture*                              Texture;                                           // 0x688(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DrawFrustumComponent");
		return Clss;
	}

};

// 0x40 (0x6B0 - 0x670)
// Class Engine.LineBatchComponent
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	uint8                                        Pad_1057[0x40];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LineBatchComponent");
		return Clss;
	}

};

// 0x10 (0x680 - 0x670)
// Class Engine.MaterialBillboardComponent
class UMaterialBillboardComponent : public UPrimitiveComponent
{
public:
	TArray<struct FMaterialSpriteElement>        Elements;                                          // 0x670(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialBillboardComponent");
		return Clss;
	}

	void SetElements(TArray<struct FMaterialSpriteElement>& NewElements);
	void AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve);
};

// 0xD0 (0x9C0 - 0x8F0)
// Class Engine.DestructibleComponent
class UDestructibleComponent : public USkinnedMeshComponent
{
public:
	uint8                                        bFractureEffectOverride : 1;                       // Mask: 0x1, PropSize: 0x10x8F0(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_113 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_105B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FFractureEffect>               FractureEffects;                                   // 0x8F8(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bEnableHardSleeping;                               // 0x908(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_105C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LargeChunkThreshold;                               // 0x90C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_105D[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	UMulticastDelegateProperty_                  OnComponentFracture;                               // 0x920(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_105E[0x90];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DestructibleComponent");
		return Clss;
	}

	void SetDestructibleMesh(class UDestructibleMesh* NewMesh);
	class UDestructibleMesh* GetDestructibleMesh();
	void ApplyRadiusDamage(float BaseDamage, struct FVector& HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage);
	void ApplyDamage(float DamageAmount, struct FVector& HitLocation, struct FVector& ImpulseDir, float ImpulseStrength);
};

// 0xF0 (0x9E0 - 0x8F0)
// Class Engine.PoseableMeshComponent
class UPoseableMeshComponent : public USkinnedMeshComponent
{
public:
	uint8                                        Pad_1068[0xF0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PoseableMeshComponent");
		return Clss;
	}

	void SetBoneTransformByName(class FName BoneName, struct FTransform& InTransform, enum class EBoneSpaces BoneSpace);
	void SetBoneScaleByName(class FName BoneName, const struct FVector& InScale3D, enum class EBoneSpaces BoneSpace);
	void SetBoneRotationByName(class FName BoneName, const struct FRotator& InRotation, enum class EBoneSpaces BoneSpace);
	void SetBoneLocationByName(class FName BoneName, const struct FVector& InLocation, enum class EBoneSpaces BoneSpace);
	void ResetBoneTransformByName(class FName BoneName);
	struct FTransform GetBoneTransformByName(class FName BoneName, enum class EBoneSpaces BoneSpace);
	struct FVector GetBoneScaleByName(class FName BoneName, enum class EBoneSpaces BoneSpace);
	struct FRotator GetBoneRotationByName(class FName BoneName, enum class EBoneSpaces BoneSpace);
	struct FVector GetBoneLocationByName(class FName BoneName, enum class EBoneSpaces BoneSpace);
	void CopyPoseFromSkeletalComponent(class USkeletalMeshComponent* InComponentToCopy);
};

// 0xA0 (0x880 - 0x7E0)
// Class Engine.SplineMeshComponent
class USplineMeshComponent : public UStaticMeshComponent
{
public:
	uint8                                        Pad_1077[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FSplineMeshParams                     SplineParams;                                      // 0x7E8(0x58)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               SplineUpDir;                                       // 0x840(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowSplineEditingPerInstance : 1;                // Mask: 0x1, PropSize: 0x10x84C(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSmoothInterpRollScale : 1;                        // Mask: 0x2, PropSize: 0x10x84C(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_114 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1078[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ESplineMeshAxis                   ForwardAxis;                                       // 0x850(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1079[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SplineBoundaryMin;                                 // 0x854(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SplineBoundaryMax;                                 // 0x858(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_107A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBodySetup*                            BodySetup;                                         // 0x860(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 CachedMeshBodySetupGuid;                           // 0x868(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMeshDirty : 1;                                    // Mask: 0x1, PropSize: 0x10x878(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_107B[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SplineMeshComponent");
		return Clss;
	}

	void UpdateMesh();
	void SetStartTangent(const struct FVector& StartTangent, bool bUpdateMesh);
	void SetStartScale(const struct FVector2D& StartScale, bool bUpdateMesh);
	void SetStartRoll(float StartRoll, bool bUpdateMesh);
	void SetStartPosition(const struct FVector& StartPos, bool bUpdateMesh);
	void SetStartOffset(const struct FVector2D& StartOffset, bool bUpdateMesh);
	void SetStartAndEnd(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent, bool bUpdateMesh);
	void SetSplineUpDir(struct FVector& InSplineUpDir, bool bUpdateMesh);
	void SetForwardAxis(enum class ESplineMeshAxis InForwardAxis, bool bUpdateMesh);
	void SetEndTangent(const struct FVector& EndTangent, bool bUpdateMesh);
	void SetEndScale(const struct FVector2D& EndScale, bool bUpdateMesh);
	void SetEndRoll(float EndRoll, bool bUpdateMesh);
	void SetEndPosition(const struct FVector& EndPos, bool bUpdateMesh);
	void SetEndOffset(const struct FVector2D& EndOffset, bool bUpdateMesh);
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);
	struct FVector GetStartTangent();
	struct FVector2D GetStartScale();
	float GetStartRoll();
	struct FVector GetStartPosition();
	struct FVector2D GetStartOffset();
	struct FVector GetSplineUpDir();
	enum class ESplineMeshAxis GetForwardAxis();
	struct FVector GetEndTangent();
	struct FVector2D GetEndScale();
	float GetEndRoll();
	struct FVector GetEndPosition();
	struct FVector2D GetEndOffset();
	float GetBoundaryMin();
	float GetBoundaryMax();
};

// 0x40 (0x6B0 - 0x670)
// Class Engine.ModelComponent
class UModelComponent : public UPrimitiveComponent
{
public:
	uint8                                        Pad_107C[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UBodySetup*                            ModelBodySetup;                                    // 0x688(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_107D[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ModelComponent");
		return Clss;
	}

};

// 0x20 (0x690 - 0x670)
// Class Engine.NavLinkComponent
class UNavLinkComponent : public UPrimitiveComponent
{
public:
	uint8                                        Pad_107E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FNavigationLink>               Links;                                             // 0x678(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_107F[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavLinkComponent");
		return Clss;
	}

};

// 0x0 (0x670 - 0x670)
// Class Engine.NavLinkRenderingComponent
class UNavLinkRenderingComponent : public UPrimitiveComponent
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavLinkRenderingComponent");
		return Clss;
	}

};

// 0x10 (0x680 - 0x670)
// Class Engine.NavMeshRenderingComponent
class UNavMeshRenderingComponent : public UPrimitiveComponent
{
public:
	uint8                                        Pad_1080[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavMeshRenderingComponent");
		return Clss;
	}

};

// 0x0 (0x670 - 0x670)
// Class Engine.NavTestRenderingComponent
class UNavTestRenderingComponent : public UPrimitiveComponent
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavTestRenderingComponent");
		return Clss;
	}

};

// 0x10 (0x6A0 - 0x690)
// Class Engine.CapsuleComponent
class UCapsuleComponent : public UShapeComponent
{
public:
	float                                        CapsuleHalfHeight;                                 // 0x690(0x4)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CapsuleRadius;                                     // 0x694(0x4)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CapsuleHeight;                                     // 0x698(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1084[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CapsuleComponent");
		return Clss;
	}

	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);
	void GetUnscaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere);
	void GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetUnscaledCapsuleRadius();
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();
	float GetUnscaledCapsuleHalfHeight();
	float GetShapeScale();
	void GetScaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere);
	void GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetScaledCapsuleRadius();
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();
	float GetScaledCapsuleHalfHeight();
};

// 0x10 (0x6A0 - 0x690)
// Class Engine.SphereComponent
class USphereComponent : public UShapeComponent
{
public:
	float                                        SphereRadius;                                      // 0x690(0x4)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1086[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SphereComponent");
		return Clss;
	}

	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);
	float GetUnscaledSphereRadius();
	float GetShapeScale();
	float GetScaledSphereRadius();
};

// 0x0 (0x6A0 - 0x6A0)
// Class Engine.DrawSphereComponent
class UDrawSphereComponent : public USphereComponent
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DrawSphereComponent");
		return Clss;
	}

};

// 0xF0 (0x760 - 0x670)
// Class Engine.SplineComponent
class USplineComponent : public UPrimitiveComponent
{
public:
	struct FSplineCurves                         SplineCurves;                                      // 0x670(0x60)(Edit, NativeAccessSpecifierPublic)
	struct FInterpCurveVector                    SplineInfo;                                        // 0x6D0(0x18)(Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveQuat                      SplineRotInfo;                                     // 0x6E8(0x18)(Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveVector                    SplineScaleInfo;                                   // 0x700(0x18)(Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                     SplineReparamTable;                                // 0x718(0x18)(Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllowSplineEditingPerInstance;                    // 0x730(0x1)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10BE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ReparamStepsPerSegment;                            // 0x734(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Duration;                                          // 0x738(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStationaryEndpoints;                              // 0x73C(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSplineHasBeenEdited;                              // 0x73D(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bModifiedByConstructionScript;                     // 0x73E(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bInputSplinePointsToConstructionScript;            // 0x73F(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDrawDebug;                                        // 0x740(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bClosedLoop;                                       // 0x741(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                         bLoopPositionOverride;                             // 0x742(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_10BF[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LoopPosition;                                      // 0x744(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                               DefaultUpVector;                                   // 0x748(0xC)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10C0[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SplineComponent");
		return Clss;
	}

	void UpdateSpline();
	void SetWorldLocationAtSplinePoint(int32 PointIndex, struct FVector& InLocation);
	void SetUpVectorAtSplinePoint(int32 PointIndex, struct FVector& InUpVector, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void SetUnselectedSplineSegmentColor(struct FLinearColor& SegmentColor);
	void SetTangentsAtSplinePoint(int32 PointIndex, struct FVector& InArriveTangent, struct FVector& InLeaveTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void SetTangentAtSplinePoint(int32 PointIndex, struct FVector& InTangent, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void SetSplineWorldPoints(TArray<struct FVector>& Points);
	void SetSplinePointType(int32 PointIndex, enum class ESplinePointType Type, bool bUpdateSpline);
	void SetSplinePoints(TArray<struct FVector>& Points, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void SetSplineLocalPoints(TArray<struct FVector>& Points);
	void SetSelectedSplineSegmentColor(struct FLinearColor& SegmentColor);
	void SetLocationAtSplinePoint(int32 PointIndex, struct FVector& InLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void SetDrawDebug(bool bShow);
	void SetDefaultUpVector(struct FVector& UpVector, enum class ESplineCoordinateSpace CoordinateSpace);
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);
	void RemoveSplinePoint(int32 Index, bool bUpdateSpline);
	bool IsClosedLoop();
	struct FVector GetWorldTangentAtDistanceAlongSpline(float Distance);
	struct FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);
	struct FRotator GetWorldRotationAtDistanceAlongSpline(float Distance);
	struct FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetWorldLocationAtSplinePoint(int32 PointIndex);
	struct FVector GetWorldLocationAtDistanceAlongSpline(float Distance);
	struct FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetWorldDirectionAtDistanceAlongSpline(float Distance);
	struct FVector GetUpVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetUpVectorAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace);
	struct FVector GetUpVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace);
	struct FTransform GetTransformAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);
	struct FTransform GetTransformAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale);
	struct FTransform GetTransformAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale);
	struct FVector GetTangentAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetTangentAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace);
	struct FVector GetTangentAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace);
	enum class ESplinePointType GetSplinePointType(int32 PointIndex);
	float GetSplineLength();
	struct FVector GetScaleAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetScaleAtSplinePoint(int32 PointIndex);
	struct FVector GetScaleAtDistanceAlongSpline(float Distance);
	struct FRotator GetRotationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity);
	struct FRotator GetRotationAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace);
	struct FRotator GetRotationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace);
	float GetRollAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity);
	float GetRollAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace);
	float GetRollAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace);
	struct FVector GetRightVectorAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetRightVectorAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace);
	struct FVector GetRightVectorAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace);
	int32 GetNumberOfSplinePoints();
	struct FVector GetLocationAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetLocationAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace);
	struct FVector GetLocationAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace);
	void GetLocationAndTangentAtSplinePoint(int32 PointIndex, struct FVector* Location, struct FVector* Tangent, enum class ESplineCoordinateSpace CoordinateSpace);
	void GetLocalLocationAndTangentAtSplinePoint(int32 PointIndex, struct FVector* LocalLocation, struct FVector* LocalTangent);
	struct FVector GetLeaveTangentAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace);
	float GetInputKeyAtDistanceAlongSpline(float Distance);
	float GetDistanceAlongSplineAtSplinePoint(int32 PointIndex);
	struct FVector GetDirectionAtTime(float Time, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetDirectionAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace);
	struct FVector GetDirectionAtDistanceAlongSpline(float Distance, enum class ESplineCoordinateSpace CoordinateSpace);
	struct FVector GetDefaultUpVector(enum class ESplineCoordinateSpace CoordinateSpace);
	struct FVector GetArriveTangentAtSplinePoint(int32 PointIndex, enum class ESplineCoordinateSpace CoordinateSpace);
	struct FVector FindUpVectorClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace);
	struct FTransform FindTransformClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace, bool bUseScale);
	struct FVector FindTangentClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace);
	struct FVector FindScaleClosestToWorldLocation(struct FVector& WorldLocation);
	struct FRotator FindRotationClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace);
	float FindRollClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace);
	struct FVector FindRightVectorClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace);
	struct FVector FindLocationClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace);
	float FindInputKeyClosestToWorldLocation(struct FVector& WorldLocation);
	struct FVector FindDirectionClosestToWorldLocation(struct FVector& WorldLocation, enum class ESplineCoordinateSpace CoordinateSpace);
	void ClearSplinePoints(bool bUpdateSpline);
	void AddSplineWorldPoint(struct FVector& Position);
	void AddSplinePointAtIndex(struct FVector& Position, int32 Index, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void AddSplinePoint(struct FVector& Position, enum class ESplineCoordinateSpace CoordinateSpace, bool bUpdateSpline);
	void AddSplineLocalPoint(struct FVector& Position);
	void AddPoints(TArray<struct FSplinePoint>& Points, bool bUpdateSpline);
	void AddPoint(struct FSplinePoint& Point, bool bUpdateSpline);
};

// 0x20 (0x690 - 0x670)
// Class Engine.SubDSurfaceComponent
class USubDSurfaceComponent : public UPrimitiveComponent
{
public:
	class USubDSurface*                          Mesh;                                              // 0x670(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        DebugLevel;                                        // 0x678(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10C2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UStaticMeshComponent*                  DisplayMeshComponent;                              // 0x680(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10C3[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SubDSurfaceComponent");
		return Clss;
	}

	bool SetMesh(class USubDSurface* NewMesh);
};

// 0x50 (0x6C0 - 0x670)
// Class Engine.TextRenderComponent
class UTextRenderComponent : public UPrimitiveComponent
{
public:
	class FText                                  Text;                                              // 0x670(0x18)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UMaterialInterface*                    TextMaterial;                                      // 0x688(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                 Font;                                              // 0x690(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EHorizTextAligment                HorizontalAlignment;                               // 0x698(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EVerticalTextAligment             VerticalAlignment;                                 // 0x699(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10C4[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                TextRenderColor;                                   // 0x69C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        XScale;                                            // 0x6A0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        YScale;                                            // 0x6A4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WorldSize;                                         // 0x6A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InvDefaultSize;                                    // 0x6AC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HorizSpacingAdjust;                                // 0x6B0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VertSpacingAdjust;                                 // 0x6B4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAlwaysRenderAsText : 1;                           // Mask: 0x1, PropSize: 0x10x6B8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10C5[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextRenderComponent");
		return Clss;
	}

	void SetYScale(float Value);
	void SetXScale(float Value);
	void SetWorldSize(float Value);
	void SetVertSpacingAdjust(float Value);
	void SetVerticalAlignment(enum class EVerticalTextAligment Value);
	void SetTextRenderColor(const struct FColor& Value);
	void SetTextMaterial(class UMaterialInterface* Material);
	void SetText(const class FString& Value);
	void SetHorizSpacingAdjust(float Value);
	void SetHorizontalAlignment(enum class EHorizTextAligment Value);
	void SetFont(class UFont* Value);
	void K2_SetText(class FText& Value);
	struct FVector GetTextWorldSize();
	struct FVector GetTextLocalSize();
};

// 0x30 (0x6A0 - 0x670)
// Class Engine.VectorFieldComponent
class UVectorFieldComponent : public UPrimitiveComponent
{
public:
	class UVectorField*                          VectorField;                                       // 0x670(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Intensity;                                         // 0x678(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Tightness;                                         // 0x67C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPreviewVectorField : 1;                           // Mask: 0x1, PropSize: 0x10x680(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10C6[0x1F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VectorFieldComponent");
		return Clss;
	}

	void SetIntensity(float NewIntensity);
};

// 0x30 (0x2C0 - 0x290)
// Class Engine.RadialForceComponent
class URadialForceComponent : public USceneComponent
{
public:
	float                                        Radius;                                            // 0x290(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERadialImpulseFalloff             Falloff;                                           // 0x294(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10C7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ImpulseStrength;                                   // 0x298(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bImpulseVelChange : 1;                             // Mask: 0x1, PropSize: 0x10x29C(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreOwningActor : 1;                            // Mask: 0x2, PropSize: 0x10x29C(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_115 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_10C8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ForceStrength;                                     // 0x2A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DestructibleDamage;                                // 0x2A4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<enum class EObjectTypeQuery>          ObjectTypesToAffect;                               // 0x2A8(0x10)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_10C9[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RadialForceComponent");
		return Clss;
	}

	void RemoveObjectTypeToAffect(enum class EObjectTypeQuery ObjectType);
	void FireImpulse();
	void AddObjectTypeToAffect(enum class EObjectTypeQuery ObjectType);
};

// 0x90 (0x320 - 0x290)
// Class Engine.ReflectionCaptureComponent
class UReflectionCaptureComponent : public USceneComponent
{
public:
	class UBillboardComponent*                   CaptureOffsetComponent;                            // 0x290(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EReflectionSourceType             ReflectionSourceType;                              // 0x298(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10CA[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextureCube*                          Cubemap;                                           // 0x2A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SourceCubemapAngle;                                // 0x2A8(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Brightness;                                        // 0x2AC(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               CaptureOffset;                                     // 0x2B0(0xC)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10CB[0x24];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 StateId;                                           // 0x2E0(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_10CC[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ReflectionCaptureComponent");
		return Clss;
	}

};

// 0x20 (0x340 - 0x320)
// Class Engine.BoxReflectionCaptureComponent
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                        BoxTransitionDistance;                             // 0x320(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10CD[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBoxComponent*                         PreviewInfluenceBox;                               // 0x328(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                         PreviewCaptureBox;                                 // 0x330(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10CE[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BoxReflectionCaptureComponent");
		return Clss;
	}

};

// 0x20 (0x340 - 0x320)
// Class Engine.PlaneReflectionCaptureComponent
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                        InfluenceRadiusScale;                              // 0x320(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10CF[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDrawSphereComponent*                  PreviewInfluenceRadius;                            // 0x328(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                         PreviewCaptureBox;                                 // 0x330(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10D0[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlaneReflectionCaptureComponent");
		return Clss;
	}

};

// 0x10 (0x330 - 0x320)
// Class Engine.SphereReflectionCaptureComponent
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                        InfluenceRadius;                                   // 0x320(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CaptureDistanceScale;                              // 0x324(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDrawSphereComponent*                  PreviewInfluenceRadius;                            // 0x328(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SphereReflectionCaptureComponent");
		return Clss;
	}

};

// 0xC0 (0x350 - 0x290)
// Class Engine.SceneCaptureComponent
class USceneCaptureComponent : public USceneComponent
{
public:
	TArray<TWeakObjectPtr<class UPrimitiveComponent>> HiddenComponents;                                  // 0x290(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class AActor*>                        HiddenActors;                                      // 0x2A0(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>> ShowOnlyComponents;                                // 0x2B0(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class AActor*>                        ShowOnlyActors;                                    // 0x2C0(0x10)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bCaptureEveryFrame;                                // 0x2D0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCaptureOnMovement;                                // 0x2D1(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10D1[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LODDistanceFactor;                                 // 0x2D4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxViewDistanceOverride;                           // 0x2D8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10D2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FEngineShowFlagsSetting>       ShowFlagSettings;                                  // 0x2E0(0x10)(Edit, BlueprintVisible, ZeroConstructor, Interp, NativeAccessSpecifierPublic)
	uint8                                        Pad_10D3[0x60];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SceneCaptureComponent");
		return Clss;
	}

	void ShowOnlyComponent(class UPrimitiveComponent* InComponent);
	void ShowOnlyActorComponents(class AActor* InActor);
	void RemoveShowOnlyComponent(class UPrimitiveComponent* InComponent);
	void RemoveShowOnlyActorComponents(class AActor* InActor);
	void HideComponent(class UPrimitiveComponent* InComponent);
	void HideActorComponents(class AActor* InActor);
	void ClearShowOnlyComponents(class UPrimitiveComponent* InComponent);
};

// 0xE0 (0x430 - 0x350)
// Class Engine.PlanarReflectionComponent
class UPlanarReflectionComponent : public USceneCaptureComponent
{
public:
	class UBoxComponent*                         PreviewBox;                                        // 0x350(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NormalDistortionStrength;                          // 0x358(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PrefilterRoughness;                                // 0x35C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PrefilterRoughnessDistance;                        // 0x360(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ScreenPercentage;                                  // 0x364(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ExtraFOV;                                          // 0x368(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceFromPlaneFadeStart;                        // 0x36C(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceFromPlaneFadeEnd;                          // 0x370(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceFromPlaneFadeoutStart;                     // 0x374(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceFromPlaneFadeoutEnd;                       // 0x378(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AngleFromPlaneFadeStart;                           // 0x37C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AngleFromPlaneFadeEnd;                             // 0x380(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRenderSceneTwoSided;                              // 0x384(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10D4[0xAB];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlanarReflectionComponent");
		return Clss;
	}

};

// 0x550 (0x8A0 - 0x350)
// Class Engine.SceneCaptureComponent2D
class USceneCaptureComponent2D : public USceneCaptureComponent
{
public:
	enum class ECameraProjectionMode             ProjectionType;                                    // 0x350(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10D6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FOVAngle;                                          // 0x354(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OrthoWidth;                                        // 0x358(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10D7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTextureRenderTarget2D*                TextureTarget;                                     // 0x360(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESceneCaptureSource               CaptureSource;                                     // 0x368(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESceneCaptureCompositeMode        CompositeMode;                                     // 0x369(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10D8[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  PostProcessSettings;                               // 0x370(0x4C0)(Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	float                                        PostProcessBlendWeight;                            // 0x830(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bUseCustomProjectionMatrix;                        // 0x834(0x1)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10D9[0xB];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FMatrix                               CustomProjectionMatrix;                            // 0x840(0x40)(BlueprintVisible, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                         bEnableClipPlane;                                  // 0x880(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10DA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               ClipPlaneBase;                                     // 0x884(0xC)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               ClipPlaneNormal;                                   // 0x890(0xC)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10DB[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SceneCaptureComponent2D");
		return Clss;
	}

	void CaptureScene();
	void AddOrUpdateBlendable(UInterfaceProperty_ InBlendableObject, float InWeight);
};

// 0x10 (0x360 - 0x350)
// Class Engine.SceneCaptureComponentCube
class USceneCaptureComponentCube : public USceneCaptureComponent
{
public:
	class UTextureRenderTargetCube*              TextureTarget;                                     // 0x350(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10DC[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SceneCaptureComponentCube");
		return Clss;
	}

	void CaptureScene();
};

// 0x90 (0x320 - 0x290)
// Class Engine.SpringArmComponent
class USpringArmComponent : public USceneComponent
{
public:
	float                                        TargetArmLength;                                   // 0x290(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               SocketOffset;                                      // 0x294(0xC)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               TargetOffset;                                      // 0x2A0(0xC)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ProbeSize;                                         // 0x2AC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECollisionChannel                 ProbeChannel;                                      // 0x2B0(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10DD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bDoCollisionTest : 1;                              // Mask: 0x1, PropSize: 0x10x2B4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsePawnControlRotation : 1;                       // Mask: 0x2, PropSize: 0x10x2B4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInheritPitch : 1;                                 // Mask: 0x4, PropSize: 0x10x2B4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInheritYaw : 1;                                   // Mask: 0x8, PropSize: 0x10x2B4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInheritRoll : 1;                                  // Mask: 0x10, PropSize: 0x10x2B4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableCameraLag : 1;                              // Mask: 0x20, PropSize: 0x10x2B4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableCameraRotationLag : 1;                      // Mask: 0x40, PropSize: 0x10x2B4(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseCameraLagSubstepping : 1;                      // Mask: 0x80, PropSize: 0x10x2B4(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDrawDebugLagMarkers : 1;                          // Mask: 0x1, PropSize: 0x10x2B5(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_116 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_10DE[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        CameraLagSpeed;                                    // 0x2B8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraRotationLagSpeed;                            // 0x2BC(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraLagMaxTimeStep;                              // 0x2C0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CameraLagMaxDistance;                              // 0x2C4(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10DF[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SpringArmComponent");
		return Clss;
	}

};

// 0xA0 (0x330 - 0x290)
// Class Engine.StereoLayerComponent
class UStereoLayerComponent : public USceneComponent
{
public:
	uint8                                        bLiveTexture : 1;                                  // Mask: 0x1, PropSize: 0x10x290(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportsDepth : 1;                                // Mask: 0x2, PropSize: 0x10x290(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNoAlphaChannel : 1;                               // Mask: 0x4, PropSize: 0x10x290(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_117 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_10E0[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture*                              Texture;                                           // 0x298(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                              LeftTexture;                                       // 0x2A0(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        bQuadPreserveTextureRatio : 1;                     // Mask: 0x1, PropSize: 0x10x2A8(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_118 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_10E1[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector2D                             QuadSize;                                          // 0x2AC(0x8)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FBox2D                                UVRect;                                            // 0x2B4(0x14)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CylinderRadius;                                    // 0x2C8(0x4)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        CylinderOverlayArc;                                // 0x2CC(0x4)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        CylinderHeight;                                    // 0x2D0(0x4)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EStereoLayerType                  StereoLayerType;                                   // 0x2D4(0x1)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class EStereoLayerShape                 StereoLayerShape;                                  // 0x2D5(0x1)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_10E2[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Priority;                                          // 0x2D8(0x4)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_10E3[0x54];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StereoLayerComponent");
		return Clss;
	}

	void SetUVRect(const struct FBox2D& InUVRect);
	void SetTexture(class UTexture* InTexture);
	void SetQuadSize(const struct FVector2D& InQuadSize);
	void SetPriority(int32 InPriority);
	void MarkTextureForUpdate();
	struct FBox2D GetUVRect();
	class UTexture* GetTexture();
	struct FVector2D GetQuadSize();
	int32 GetPriority();
};

// 0x20 (0x2B0 - 0x290)
// Class Engine.WindDirectionalSourceComponent
class UWindDirectionalSourceComponent : public USceneComponent
{
public:
	float                                        Strength;                                          // 0x290(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Speed;                                             // 0x294(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinGustAmount;                                     // 0x298(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxGustAmount;                                     // 0x29C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Radius;                                            // 0x2A0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPointWind : 1;                                    // Mask: 0x1, PropSize: 0x10x2A4(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10E4[0xB];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WindDirectionalSourceComponent");
		return Clss;
	}

	void SetWindType(enum class EWindSourceType InNewType);
	void SetStrength(float InNewStrength);
	void SetSpeed(float InNewSpeed);
	void SetRadius(float InNewRadius);
	void SetMinimumGustAmount(float InNewMinGust);
	void SetMaximumGustAmount(float InNewMaxGust);
};

// 0xF0 (0x1E0 - 0xF0)
// Class Engine.TimelineComponent
class UTimelineComponent : public UActorComponent
{
public:
	struct FTimeline                             TheTimeline;                                       // 0xF0(0xE0)(Net, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                        bIgnoreTimeDilation : 1;                           // Mask: 0x1, PropSize: 0x10x1D0(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_10E6[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TimelineComponent");
		return Clss;
	}

	void Stop();
	void SetVectorCurve(class UCurveVector* NewVectorCurve, class FName VectorTrackName);
	void SetTimelineLengthMode(enum class ETimelineLengthMode NewLengthMode);
	void SetTimelineLength(float NewLength);
	void SetPlayRate(float NewRate);
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);
	void SetNewTime(float NewTime);
	void SetLooping(bool bNewLooping);
	void SetLinearColorCurve(class UCurveLinearColor* NewLinearColorCurve, class FName LinearColorTrackName);
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);
	void SetFloatCurve(class UCurveFloat* NewFloatCurve, class FName FloatTrackName);
	void ReverseFromEnd();
	void Reverse();
	void PlayFromStart();
	void Play();
	void OnRep_Timeline();
	bool IsReversing();
	bool IsPlaying();
	bool IsLooping();
	float GetTimelineLength();
	float GetPlayRate();
	float GetPlaybackPosition();
	bool GetIgnoreTimeDilation();
};

// 0x10 (0xB0 - 0xA0)
// Class Engine.AnimComposite
class UAnimComposite : public UAnimCompositeBase
{
public:
	struct FAnimTrack                            AnimationTrack;                                    // 0xA0(0x10)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimComposite");
		return Clss;
	}

};

// 0xF8 (0x198 - 0xA0)
// Class Engine.AnimSequence
class UAnimSequence : public UAnimSequenceBase
{
public:
	int32                                        NumFrames;                                         // 0xA0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10E7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FTrackToSkeletonMap>           TrackToSkeletonMapTable;                           // 0xA8(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_10E8[0x90];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAdditiveAnimationType            AdditiveAnimType;                                  // 0x148(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAdditiveBasePoseType             RefPoseType;                                       // 0x149(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10E9[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAnimSequence*                         RefPoseSeq;                                        // 0x150(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        RefFrameIndex;                                     // 0x158(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        EncodingPkgVersion;                                // 0x15C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  RetargetSource;                                    // 0x160(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAnimInterpolationType            Interpolation;                                     // 0x168(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnableRootMotion;                                 // 0x169(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERootMotionRootLock               RootMotionRootLock;                                // 0x16A(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bForceRootLock;                                    // 0x16B(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRootMotionSettingsCopiedFromMontage;              // 0x16C(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10EA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FAnimSyncMarker>               AuthoredSyncMarkers;                               // 0x170(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_10EB[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimSequence");
		return Clss;
	}

};

// 0xC8 (0x140 - 0x78)
// Class Engine.BlendSpaceBase
class UBlendSpaceBase : public UAnimationAsset
{
public:
	uint8                                        Pad_10EC[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bRotationBlendInMeshSpace;                         // 0x80(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10ED[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AnimLength;                                        // 0x84(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPerBoneInterpolation>         PerBoneBlend;                                      // 0x88(0x10)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FInterpolationParameter               InterpolationParam;                                // 0x98(0x8)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_10EE[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TargetWeightInterpolationSpeedPerSec;              // 0xB0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	enum class ENotifyTriggerMode                NotifyTriggerMode;                                 // 0xB4(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_10EF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SampleIndexWithMarkers;                            // 0xB8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_10F0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBlendSample>                  SampleData;                                        // 0xC0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FEditorElement>                GridSamples;                                       // 0xD0(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FBlendParameter                       BlendParameters;                                   // 0xE0(0x20)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_10F1[0x40];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlendSpaceBase");
		return Clss;
	}

};

// 0x8 (0x148 - 0x140)
// Class Engine.BlendSpace
class UBlendSpace : public UBlendSpaceBase
{
public:
	enum class EBlendSpaceAxis                   AxisToScaleAnimation;                              // 0x140(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_10F2[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlendSpace");
		return Clss;
	}

};

// 0x0 (0x148 - 0x148)
// Class Engine.AimOffsetBlendSpace
class UAimOffsetBlendSpace : public UBlendSpace
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AimOffsetBlendSpace");
		return Clss;
	}

};

// 0x8 (0x148 - 0x140)
// Class Engine.BlendSpace1D
class UBlendSpace1D : public UBlendSpaceBase
{
public:
	bool                                         bScaleAnimation;                                   // 0x140(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10F3[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlendSpace1D");
		return Clss;
	}

};

// 0x0 (0x148 - 0x148)
// Class Engine.AimOffsetBlendSpace1D
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AimOffsetBlendSpace1D");
		return Clss;
	}

};

// 0x118 (0x190 - 0x78)
// Class Engine.PoseAsset
class UPoseAsset : public UAnimationAsset
{
public:
	struct FPoseDataContainer                    PoseContainer;                                     // 0x78(0x90)(NativeAccessSpecifierPrivate)
	bool                                         bAdditivePose;                                     // 0x108(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_10F4[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        BasePoseIndex;                                     // 0x10C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  RetargetSource;                                    // 0x110(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10F5[0x78];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PoseAsset");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimStateMachineTypes
class UAnimStateMachineTypes : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimStateMachineTypes");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimClassInterface
class UAnimClassInterface : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimClassInterface");
		return Clss;
	}

};

// 0x70 (0x98 - 0x28)
// Class Engine.AnimClassData
class UAnimClassData : public UObject
{
public:
	uint8                                        Pad_10F6[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBakedAnimationStateMachine>   BakedStateMachines;                                // 0x30(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class USkeleton*                             TargetSkeleton;                                    // 0x40(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>              AnimNotifies;                                      // 0x48(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                        RootAnimNodeIndex;                                 // 0x58(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10F7[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                OrderedSavedPoseIndices;                           // 0x60(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UStructProperty*                       RootAnimNodeProperty;                              // 0x70(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStructProperty*>               AnimNodeProperties;                                // 0x78(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                          SyncGroupNames;                                    // 0x88(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimClassData");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.AnimCompress
class UAnimCompress : public UObject
{
public:
	class FString                                Description;                                       // 0x28(0x10)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNeedsSkeleton : 1;                                // Mask: 0x1, PropSize: 0x10x38(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_119 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_10F8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAnimationCompressionFormat       TranslationCompressionFormat;                      // 0x3C(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAnimationCompressionFormat       RotationCompressionFormat;                         // 0x3D(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAnimationCompressionFormat       ScaleCompressionFormat;                            // 0x3E(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10F9[0x1];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCompress");
		return Clss;
	}

};

// 0x8 (0x48 - 0x40)
// Class Engine.AnimCompress_Automatic
class UAnimCompress_Automatic : public UAnimCompress
{
public:
	float                                        MaxEndEffectorError;                               // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTryFixedBitwiseCompression : 1;                   // Mask: 0x1, PropSize: 0x10x44(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTryPerTrackBitwiseCompression : 1;                // Mask: 0x2, PropSize: 0x10x44(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTryLinearKeyRemovalCompression : 1;               // Mask: 0x4, PropSize: 0x10x44(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTryIntervalKeyRemoval : 1;                        // Mask: 0x8, PropSize: 0x10x44(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRunCurrentDefaultCompressor : 1;                  // Mask: 0x10, PropSize: 0x10x44(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoReplaceIfExistingErrorTooGreat : 1;           // Mask: 0x20, PropSize: 0x10x44(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRaiseMaxErrorToExisting : 1;                      // Mask: 0x40, PropSize: 0x10x44(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10FA[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCompress_Automatic");
		return Clss;
	}

};

// 0x0 (0x40 - 0x40)
// Class Engine.AnimCompress_BitwiseCompressOnly
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCompress_BitwiseCompressOnly");
		return Clss;
	}

};

// 0x0 (0x40 - 0x40)
// Class Engine.AnimCompress_LeastDestructive
class UAnimCompress_LeastDestructive : public UAnimCompress
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCompress_LeastDestructive");
		return Clss;
	}

};

// 0x8 (0x48 - 0x40)
// Class Engine.AnimCompress_RemoveEverySecondKey
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{
public:
	int32                                        MinKeys;                                           // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStartAtSecondKey : 1;                             // Mask: 0x1, PropSize: 0x10x44(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10FB[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCompress_RemoveEverySecondKey");
		return Clss;
	}

};

// 0x20 (0x60 - 0x40)
// Class Engine.AnimCompress_RemoveLinearKeys
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{
public:
	float                                        MaxPosDiff;                                        // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxAngleDiff;                                      // 0x44(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxScaleDiff;                                      // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxEffectorDiff;                                   // 0x4C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinEffectorDiff;                                   // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        EffectorDiffSocket;                                // 0x54(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ParentKeyScale;                                    // 0x58(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRetarget : 1;                                     // Mask: 0x1, PropSize: 0x10x5C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bActuallyFilterLinearKeys : 1;                     // Mask: 0x2, PropSize: 0x10x5C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_10FC[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCompress_RemoveLinearKeys");
		return Clss;
	}

};

// 0x80 (0xE0 - 0x60)
// Class Engine.AnimCompress_PerTrackCompression
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{
public:
	float                                        MaxZeroingThreshold;                               // 0x60(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxPosDiffBitwise;                                 // 0x64(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxAngleDiffBitwise;                               // 0x68(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxScaleDiffBitwise;                               // 0x6C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<enum class EAnimationCompressionFormat> AllowedRotationFormats;                            // 0x70(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<enum class EAnimationCompressionFormat> AllowedTranslationFormats;                         // 0x80(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<enum class EAnimationCompressionFormat> AllowedScaleFormats;                               // 0x90(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bResampleAnimation : 1;                            // Mask: 0x1, PropSize: 0x10xA0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_11A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_10FD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ResampledFramerate;                                // 0xA4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MinKeysForResampling;                              // 0xA8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseAdaptiveError : 1;                             // Mask: 0x1, PropSize: 0x10xAC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseOverrideForEndEffectors : 1;                   // Mask: 0x2, PropSize: 0x10xAC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_11B : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_10FE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TrackHeightBias;                                   // 0xB0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ParentingDivisor;                                  // 0xB4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ParentingDivisorExponent;                          // 0xB8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseAdaptiveError2 : 1;                            // Mask: 0x1, PropSize: 0x10xBC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_11C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_10FF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RotationErrorSourceRatio;                          // 0xC0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TranslationErrorSourceRatio;                       // 0xC4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ScaleErrorSourceRatio;                             // 0xC8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxErrorPerTrackRatio;                             // 0xCC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PerturbationProbeSize;                             // 0xD0(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1100[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCompress_PerTrackCompression");
		return Clss;
	}

};

// 0x10 (0x50 - 0x40)
// Class Engine.AnimCompress_RemoveTrivialKeys
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{
public:
	float                                        MaxPosDiff;                                        // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxAngleDiff;                                      // 0x44(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxScaleDiff;                                      // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1101[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimCompress_RemoveTrivialKeys");
		return Clss;
	}

};

// 0x18 (0x370 - 0x358)
// Class Engine.AnimSingleNodeInstance
class UAnimSingleNodeInstance : public UAnimInstance
{
public:
	class UAnimationAsset*                       CurrentAsset;                                      // 0x358(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	UDelegateProperty_                           PostEvaluateAnimEvent;                             // 0x360(0x10)(ZeroConstructor, Transient, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimSingleNodeInstance");
		return Clss;
	}

	void StopAnim();
	void SetReverse(bool bInReverse);
	void SetPreviewCurveOverride(class FName& PoseName, float Value, bool bRemoveIfZero);
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);
	void SetPosition(float InPosition, bool bFireNotifies);
	void SetPlayRate(float InPlayRate);
	void SetPlaying(bool bIsPlaying);
	void SetLooping(bool bIsLooping);
	void SetBlendSpaceInput(struct FVector& InBlendInput);
	void SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);
	float GetLength();
};

// 0x0 (0x28 - 0x28)
// Class Engine.AnimMetaData
class UAnimMetaData : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimMetaData");
		return Clss;
	}

};

// 0x0 (0x38 - 0x38)
// Class Engine.AnimNotify_ResetClothingSimulation
class UAnimNotify_ResetClothingSimulation : public UAnimNotify
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotify_ResetClothingSimulation");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.AnimNotifyState_DisableRootMotion
class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotifyState_DisableRootMotion");
		return Clss;
	}

};

// 0x30 (0x60 - 0x30)
// Class Engine.AnimNotifyState_TimedParticleEffect
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{
public:
	class UParticleSystem*                       PSTemplate;                                        // 0x30(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  SocketName;                                        // 0x38(0x8)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               LocationOffset;                                    // 0x40(0xC)(Edit, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              RotationOffset;                                    // 0x4C(0xC)(Edit, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                         bDestroyAtEnd;                                     // 0x58(0x1)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1107[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotifyState_TimedParticleEffect");
		return Clss;
	}

};

// 0x30 (0x60 - 0x30)
// Class Engine.AnimNotifyState_Trail
class UAnimNotifyState_Trail : public UAnimNotifyState
{
public:
	class UParticleSystem*                       PSTemplate;                                        // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  FirstSocketName;                                   // 0x38(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  SecondSocketName;                                  // 0x40(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETrailWidthMode                   WidthScaleMode;                                    // 0x48(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1108[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  WidthScaleCurve;                                   // 0x50(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRecycleSpawnedSystems : 1;                        // Mask: 0x1, PropSize: 0x10x58(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1109[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimNotifyState_Trail");
		return Clss;
	}

	class UParticleSystem* OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
};

// 0xC8 (0xF0 - 0x28)
// Class Engine.AnimSet
class UAnimSet : public UObject
{
public:
	uint8                                        bAnimRotationOnly : 1;                             // Mask: 0x1, PropSize: 0x10x28(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_11D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_110A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          TrackBoneNames;                                    // 0x30(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAnimSetMeshLinkup>            LinkupCache;                                       // 0x40(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<uint8>                                BoneUseAnimTranslation;                            // 0x50(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<uint8>                                ForceUseMeshTranslation;                           // 0x60(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class FName>                          UseTranslationBoneNames;                           // 0x70(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FName>                          ForceMeshTranslationBoneNames;                     // 0x80(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	class FName                                  PreviewSkelMeshName;                               // 0x90(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  BestRatioSkelMeshName;                             // 0x98(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_110B[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimSet");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.AssetImportData
class UAssetImportData : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AssetImportData");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.AssetMappingTable
class UAssetMappingTable : public UObject
{
public:
	TArray<struct FAssetMapping>                 MappedAssets;                                      // 0x28(0x10)(Edit, EditFixedSize, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AssetMappingTable");
		return Clss;
	}

};

// 0x2F8 (0x320 - 0x28)
// Class Engine.AutomationTestSettings
class UAutomationTestSettings : public UObject
{
public:
	struct FStringAssetReference                 AutomationTestmap;                                 // 0x28(0x10)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps;                         // 0x38(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FBuildPromotionTestSettings           BuildPromotionTest;                                // 0x48(0x1F0)(Edit, Config, NativeAccessSpecifierPublic)
	struct FMaterialEditorPromotionSettings      MaterialEditorPromotionTest;                       // 0x238(0x30)(Edit, Config, NativeAccessSpecifierPublic)
	struct FParticleEditorPromotionSettings      ParticleEditorPromotionTest;                       // 0x268(0x10)(Edit, Config, NativeAccessSpecifierPublic)
	struct FBlueprintEditorPromotionSettings     BlueprintEditorPromotionTest;                      // 0x278(0x30)(Edit, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                        EngineTestModules;                                 // 0x2A8(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                        EditorTestModules;                                 // 0x2B8(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                        TestLevelFolders;                                  // 0x2C8(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FOpenTestAsset>                TestAssetsToOpen;                                  // 0x2D8(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FExternalToolDefinition>       ExternalTools;                                     // 0x2E8(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FEditorImportExportTestDefinition> ImportExportTestDefinitions;                       // 0x2F8(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FLaunchOnTestSettings>         LaunchOnSettings;                                  // 0x308(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FIntPoint                             DefaultScreenshotResolution;                       // 0x318(0x8)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AutomationTestSettings");
		return Clss;
	}

};

// 0xB8 (0xE0 - 0x28)
// Class Engine.AvoidanceManager
class UAvoidanceManager : public UObject
{
public:
	uint8                                        Pad_110E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        DefaultTimeToLive;                                 // 0x30(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LockTimeAfterAvoid;                                // 0x34(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LockTimeAfterClean;                                // 0x38(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DeltaTimeToPredict;                                // 0x3C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ArtificialRadiusExpansion;                         // 0x40(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TestHeightDifference;                              // 0x44(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HeightCheckMargin;                                 // 0x48(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_110F[0x94];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AvoidanceManager");
		return Clss;
	}

	bool RegisterMovementComponent(class UMovementComponent* MovementComp, float AvoidanceWeight);
	int32 GetObjectCount();
	int32 GetNewAvoidanceUID();
	struct FVector GetAvoidanceVelocityIgnoringUID(struct FNavAvoidanceData& AvoidanceData, float DeltaTime, int32 IgnoreThisUID);
	struct FVector GetAvoidanceVelocityForComponent(class UMovementComponent* MovementComp);
	struct FVector GetAvoidanceVelocity(struct FNavAvoidanceData& AvoidanceData, float DeltaTime);
};

// 0x20 (0x48 - 0x28)
// Class Engine.BlendProfile
class UBlendProfile : public UObject
{
public:
	uint8                                        Pad_1110[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeleton*                             OwningSkeleton;                                    // 0x30(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBlendProfileBoneEntry>        ProfileEntries;                                    // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlendProfile");
		return Clss;
	}

};

// 0x28 (0x50 - 0x28)
// Class Engine.BlueprintCore
class UBlueprintCore : public UObject
{
public:
	TSubclassOf<class UObject>                   SkeletonGeneratedClass;                            // 0x28(0x8)(ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                   GeneratedClass;                                    // 0x30(0x8)(ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLegacyNeedToPurgeSkelRefs;                        // 0x38(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLegacyGeneratedClassIsAuthoritative;              // 0x39(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1111[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 BlueprintGuid;                                     // 0x3C(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1112[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlueprintCore");
		return Clss;
	}

};

// 0x148 (0x198 - 0x50)
// Class Engine.Blueprint
class UBlueprint : public UBlueprintCore
{
public:
	uint8                                        bRecompileOnLoad : 1;                              // Mask: 0x1, PropSize: 0x10x50(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_11E : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1113[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TSubclassOf<class UObject>                   ParentClass;                                       // 0x58(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                               PRIVATE_InnermostPreviousCDO;                      // 0x60(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasBeenRegenerated : 1;                           // Mask: 0x1, PropSize: 0x10x68(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsRegeneratingOnLoad : 1;                         // Mask: 0x2, PropSize: 0x10x68(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_11F : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1114[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USimpleConstructionScript*             SimpleConstructionScript;                          // 0x70(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UActorComponent*>               ComponentTemplates;                                // 0x78(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTimelineTemplate*>             Timelines;                                         // 0x88(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UInheritableComponentHandler*          InheritableComponentHandler;                       // 0x98(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EBlueprintType                    BlueprintType;                                     // 0xA0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1115[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        BlueprintSystemVersion;                            // 0xA4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1116[0xE8];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bNativize;                                         // 0x190(0x1)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1117[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Blueprint");
		return Clss;
	}

};

// 0x28 (0x1C0 - 0x198)
// Class Engine.AnimBlueprint
class UAnimBlueprint : public UBlueprint
{
public:
	class USkeleton*                             TargetSkeleton;                                    // 0x198(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimGroupInfo>                Groups;                                            // 0x1A0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                         bUseMultiThreadedAnimationUpdate;                  // 0x1B0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bWarnAboutBlueprintUsage;                          // 0x1B1(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1118[0xE];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimBlueprint");
		return Clss;
	}

};

// 0x8 (0x1A0 - 0x198)
// Class Engine.LevelScriptBlueprint
class ULevelScriptBlueprint : public UBlueprint
{
public:
	uint8                                        Pad_1119[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelScriptBlueprint");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.BlueprintMapLibrary
class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlueprintMapLibrary");
		return Clss;
	}

	void Map_Values(TMap<int32, int32>& TargetMap, TArray<int32>* Values);
	bool Map_Remove(TMap<int32, int32>& TargetMap, int32& Key);
	int32 Map_Length(TMap<int32, int32>& TargetMap);
	void Map_Keys(TMap<int32, int32>& TargetMap, TArray<int32>* Keys);
	bool Map_Find(TMap<int32, int32>& TargetMap, int32& Key, int32* Value);
	bool Map_Contains(TMap<int32, int32>& TargetMap, int32& Key);
	void Map_Clear(TMap<int32, int32>& TargetMap);
	bool Map_Add(TMap<int32, int32>& TargetMap, int32& Key, int32& Value);
};

// 0xB8 (0x1A0 - 0xE8)
// Class Engine.PlatformGameInstance
class UPlatformGameInstance : public UGameInstance
{
public:
	UMulticastDelegateProperty_                  ApplicationWillDeactivateDelegate;                 // 0xE8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  ApplicationHasReactivatedDelegate;                 // 0xF8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  ApplicationWillEnterBackgroundDelegate;            // 0x108(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  ApplicationHasEnteredForegroundDelegate;           // 0x118(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  ApplicationWillTerminateDelegate;                  // 0x128(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  ApplicationRegisteredForRemoteNotificationsDelegate; // 0x138(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  ApplicationRegisteredForUserNotificationsDelegate; // 0x148(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  ApplicationFailedToRegisterForRemoteNotificationsDelegate; // 0x158(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  ApplicationReceivedRemoteNotificationDelegate;     // 0x168(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  ApplicationReceivedLocalNotificationDelegate;      // 0x178(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  ApplicationReceivedScreenOrientationChangedNotificationDelegate; // 0x188(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                        Pad_1120[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlatformGameInstance");
		return Clss;
	}

	void PlatformScreenOrientationChangedDelegate__DelegateSignature(enum class EScreenOrientation InScreenOrientation);
	void PlatformRegisteredForUserNotificationsDelegate__DelegateSignature(int32 InInt);
	void PlatformRegisteredForRemoteNotificationsDelegate__DelegateSignature(TArray<uint8>& InArray);
	void PlatformReceivedRemoteNotificationDelegate__DelegateSignature(const class FString& InString);
	void PlatformReceivedLocalNotificationDelegate__DelegateSignature(const class FString& InString, int32 InInt);
	void PlatformFailedToRegisterForRemoteNotificationsDelegate__DelegateSignature(const class FString& InString);
	void PlatformDelegate__DelegateSignature();
};

// 0x0 (0x28 - 0x28)
// Class Engine.BlueprintPlatformLibrary
class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlueprintPlatformLibrary");
		return Clss;
	}

	void ScheduleLocalNotificationFromNow(int32 InSecondsFromNow, class FText& Title, class FText& Body, class FText& Action, const class FString& ActivationEvent);
	void ScheduleLocalNotificationAtTime(struct FDateTime& FireDateTime, bool LocalTime, class FText& Title, class FText& Body, class FText& Action, const class FString& ActivationEvent);
	void GetLaunchNotification(bool* NotificationLaunchedApp, class FString* ActivationEvent, int32* FireDate);
	void ClearAllLocalNotifications();
	void CancelLocalNotification(const class FString& ActivationEvent);
};

// 0x0 (0x28 - 0x28)
// Class Engine.BlueprintSetLibrary
class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BlueprintSetLibrary");
		return Clss;
	}

	void Set_Union(TSet<int32>& A, TSet<int32>& B, TSet<int32>* Result);
	void Set_ToArray(TSet<int32>& A, TArray<int32>* Result);
	void Set_RemoveItems(TSet<int32>& TargetSet, TArray<int32>& Items);
	bool Set_Remove(TSet<int32>& TargetSet, int32& Item);
	int32 Set_Length(TSet<int32>& TargetSet);
	void Set_Intersection(TSet<int32>& A, TSet<int32>& B, TSet<int32>* Result);
	void Set_Difference(TSet<int32>& A, TSet<int32>& B, TSet<int32>* Result);
	bool Set_Contains(TSet<int32>& TargetSet, int32& ItemToFind);
	void Set_Clear(TSet<int32>& TargetSet);
	void Set_AddItems(TSet<int32>& TargetSet, TArray<int32>& NewItems);
	bool Set_Add(TSet<int32>& TargetSet, int32& NewItem);
};

// 0x0 (0x28 - 0x28)
// Class Engine.DataTableFunctionLibrary
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DataTableFunctionLibrary");
		return Clss;
	}

	void GetDataTableRowNames(class UDataTable* Table, TArray<class FName>* OutRowNames);
	bool GetDataTableRowFromName(class UDataTable* Table, class FName RowName, struct FTableRowBase* OutRow);
	void EvaluateCurveTableRow(class UCurveTable* CurveTable, class FName RowName, float InXY, enum class EEvaluateCurveTableResult* OutResult, float* OutXY, const class FString& ContextString);
};

// 0x0 (0x28 - 0x28)
// Class Engine.DebugDrawService
class UDebugDrawService : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DebugDrawService");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetSystemLibrary
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetSystemLibrary");
		return Clss;
	}

	void StackTrace();
	bool SphereTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool SphereTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool SphereTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool SphereTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool SphereOverlapComponents(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*>& ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool SphereOverlapActors(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*>& ActorsToIgnore, TArray<class AActor*>* OutActors);
	void ShowPlatformSpecificLeaderboardScreen(const class FString& CategoryName);
	void ShowPlatformSpecificAchievementsScreen(class APlayerController* SpecificPlayer);
	void ShowInterstitialAd();
	void ShowAdBanner(int32 AdIdIndex, bool bShowOnBottomOfScreen);
	void SetWindowTitle(class FText& Title);
	void SetVolumeButtonsHandledBySystem(bool bEnabled);
	void SetVectorPropertyByName(class UObject* Object, class FName PropertyName, struct FVector& Value);
	void SetUserActivity(struct FUserActivity& UserActivity);
	void SetTransformPropertyByName(class UObject* Object, class FName PropertyName, struct FTransform& Value);
	void SetTextPropertyByName(class UObject* Object, class FName PropertyName, class FText& Value);
	void SetSuppressViewportTransitionMessage(class UObject* WorldContextObject, bool bState);
	void SetStructurePropertyByName(class UObject* Object, class FName PropertyName, struct FGenericStruct& Value);
	void SetStringPropertyByName(class UObject* Object, class FName PropertyName, const class FString& Value);
	void SetRotatorPropertyByName(class UObject* Object, class FName PropertyName, struct FRotator& Value);
	void SetObjectPropertyByName(class UObject* Object, class FName PropertyName, class UObject* Value);
	void SetNamePropertyByName(class UObject* Object, class FName PropertyName, class FName& Value);
	void SetLinearColorPropertyByName(class UObject* Object, class FName PropertyName, struct FLinearColor& Value);
	void SetIntPropertyByName(class UObject* Object, class FName PropertyName, int32 Value);
	void SetInterfacePropertyByName(class UObject* Object, class FName PropertyName, UInterfaceProperty_& Value);
	void SetFloatPropertyByName(class UObject* Object, class FName PropertyName, float Value);
	void SetCollisionProfileNameProperty(class UObject* Object, class FName PropertyName, struct FCollisionProfileName& Value);
	void SetClassPropertyByName(class UObject* Object, class FName PropertyName, TSubclassOf<class UObject> Value);
	void SetBytePropertyByName(class UObject* Object, class FName PropertyName, uint8 Value);
	void SetBoolPropertyByName(class UObject* Object, class FName PropertyName, bool Value);
	void SetAssetPropertyByName(class UObject* Object, class FName PropertyName, TSoftObjectPtr<class UObject>& Value);
	void SetAssetClassPropertyByName(class UObject* Object, class FName PropertyName, TSoftClassPtr<class UObject>& Value);
	void RetriggerableDelay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
	void ResetGamepadAssignmentToController(int32 ControllerId);
	void ResetGamepadAssignments();
	void RegisterForRemoteNotifications();
	void QuitGame(class UObject* WorldContextObject, class APlayerController* SpecificPlayer, enum class EQuitPreference QuitPreference);
	void PrintWarning(const class FString& InString);
	void PrintText(class UObject* WorldContextObject, class FText InText, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void PrintString(class UObject* WorldContextObject, const class FString& InString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void OnAssetLoaded__DelegateSignature(class UObject* Loaded);
	void OnAssetClassLoaded__DelegateSignature(TSubclassOf<class UObject> Loaded);
	void MoveComponentTo(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, enum class EMoveComponentAction MoveAction, const struct FLatentActionInfo& LatentInfo);
	class FText MakeLiteralText(class FText Value);
	class FString MakeLiteralString(const class FString& Value);
	class FName MakeLiteralName(class FName Value);
	int32 MakeLiteralInt(int32 Value);
	float MakeLiteralFloat(float Value);
	uint8 MakeLiteralByte(uint8 Value);
	bool MakeLiteralBool(bool Value);
	void LoadInterstitialAd(int32 AdIdIndex);
	void LoadAssetClass(class UObject* WorldContextObject, TSoftClassPtr<class UObject>& AssetClass, UDelegateProperty_ OnLoaded, const struct FLatentActionInfo& LatentInfo);
	void LoadAsset(class UObject* WorldContextObject, TSoftObjectPtr<class UObject>& Asset, UDelegateProperty_ OnLoaded, const struct FLatentActionInfo& LatentInfo);
	bool LineTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool LineTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool LineTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool LineTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	void LaunchURL(const class FString& URL);
	void K2_UnPauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	void K2_UnPauseTimerDelegate(UDelegateProperty_ Delegate);
	void K2_UnPauseTimer(class UObject* Object, const class FString& FunctionName);
	bool K2_TimerExistsHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	bool K2_TimerExistsDelegate(UDelegateProperty_ Delegate);
	bool K2_TimerExists(class UObject* Object, const class FString& FunctionName);
	struct FTimerHandle K2_SetTimerDelegate(UDelegateProperty_ Delegate, float Time, bool bLooping);
	struct FTimerHandle K2_SetTimer(class UObject* Object, const class FString& FunctionName, float Time, bool bLooping);
	void K2_PauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	void K2_PauseTimerDelegate(UDelegateProperty_ Delegate);
	void K2_PauseTimer(class UObject* Object, const class FString& FunctionName);
	bool K2_IsValidTimerHandle(const struct FTimerHandle& Handle);
	bool K2_IsTimerPausedHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	bool K2_IsTimerPausedDelegate(UDelegateProperty_ Delegate);
	bool K2_IsTimerPaused(class UObject* Object, const class FString& FunctionName);
	bool K2_IsTimerActiveHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	bool K2_IsTimerActiveDelegate(UDelegateProperty_ Delegate);
	bool K2_IsTimerActive(class UObject* Object, const class FString& FunctionName);
	struct FTimerHandle K2_InvalidateTimerHandle(struct FTimerHandle& Handle);
	float K2_GetTimerRemainingTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	float K2_GetTimerRemainingTimeDelegate(UDelegateProperty_ Delegate);
	float K2_GetTimerRemainingTime(class UObject* Object, const class FString& FunctionName);
	float K2_GetTimerElapsedTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	float K2_GetTimerElapsedTimeDelegate(UDelegateProperty_ Delegate);
	float K2_GetTimerElapsedTime(class UObject* Object, const class FString& FunctionName);
	void K2_ClearTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	void K2_ClearTimerDelegate(UDelegateProperty_ Delegate);
	void K2_ClearTimer(class UObject* Object, const class FString& FunctionName);
	void K2_ClearAndInvalidateTimerHandle(class UObject* WorldContextObject, struct FTimerHandle& Handle);
	bool IsValidClass(class UClass* Class);
	bool IsValid(class UObject* Object);
	bool IsStandalone(class UObject* WorldContextObject);
	bool IsServer(class UObject* WorldContextObject);
	bool IsPackagedForDistribution();
	bool IsLoggedIn(class APlayerController* SpecificPlayer);
	bool IsInterstitialAdRequested();
	bool IsInterstitialAdAvailable();
	bool IsDedicatedServer(class UObject* WorldContextObject);
	bool IsControllerAssignedToGamepad(int32 ControllerId);
	void HideAdBanner();
	bool GetVolumeButtonsHandledBySystem();
	class FString GetUniqueDeviceId();
	bool GetSupportedFullscreenResolutions(TArray<struct FIntPoint>* Resolutions);
	int32 GetRenderingMaterialQualityLevel();
	int32 GetRenderingDetailMode();
	TArray<class FString> GetPreferredLanguages();
	class FString GetPlatformUserName();
	class FString GetPathName(class UObject* Object);
	class FString GetObjectName(class UObject* Object);
	int32 GetMinYResolutionForUI();
	int32 GetMinYResolutionFor3DView();
	class FString GetLocalCurrencySymbol();
	class FString GetLocalCurrencyCode();
	float GetGameTimeInSeconds(class UObject* WorldContextObject);
	class FString GetGameName();
	class FString GetGameBundleId();
	class FString GetEngineVersion();
	class FString GetDisplayName(class UObject* Object);
	class FString GetDeviceId();
	bool GetConvenientWindowedResolutions(TArray<struct FIntPoint>* Resolutions);
	void GetComponentBounds(class USceneComponent* Component, struct FVector* Origin, struct FVector* BoxExtent, float* SphereRadius);
	class FString GetCommandLine();
	class FString GetClassDisplayName(class UClass* Class);
	int32 GetAdIDCount();
	void GetActorListFromComponentList(TArray<class UPrimitiveComponent*>& ComponentList, class UClass* ActorClassFilter, TArray<class AActor*>* OutActorList);
	void GetActorBounds(class AActor* Actor, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceCloseAdBanner();
	void FlushPersistentDebugLines(class UObject* WorldContextObject);
	void FlushDebugStrings(class UObject* WorldContextObject);
	void ExecuteConsoleCommand(class UObject* WorldContextObject, const class FString& Command, class APlayerController* SpecificPlayer);
	void DrawDebugString(class UObject* WorldContextObject, const struct FVector& TextLocation, const class FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration);
	void DrawDebugSphere(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int32 Segments, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void DrawDebugPoint(class UObject* WorldContextObject, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration);
	void DrawDebugPlane(class UObject* WorldContextObject, struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration);
	void DrawDebugLine(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void DrawDebugFrustum(class UObject* WorldContextObject, struct FTransform& FrustumTransform, const struct FLinearColor& FrustumColor, float Duration, float Thickness);
	void DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, struct FDebugFloatHistory& FloatHistory, struct FTransform& DrawTransform, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration);
	void DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, struct FDebugFloatHistory& FloatHistory, const struct FVector& DrawLocation, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration);
	void DrawDebugCylinder(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, int32 Segments, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void DrawDebugCoordinateSystem(class UObject* WorldContextObject, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration, float Thickness);
	void DrawDebugConeInDegrees(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int32 NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void DrawDebugCone(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int32 NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void DrawDebugCircle(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int32 NumSegments, const struct FLinearColor& LineColor, float Duration, float Thickness, const struct FVector& YAxis, const struct FVector& ZAxis, bool bDrawAxis);
	void DrawDebugCapsule(class UObject* WorldContextObject, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void DrawDebugCamera(class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration);
	void DrawDebugBox(class UObject* WorldContextObject, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, float Thickness);
	void DrawDebugArrow(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, float Thickness);
	bool DoesImplementInterface(class UObject* TestObject, TSubclassOf<class UInterface> Interface);
	void Delay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
	void CreateCopyForUndoBuffer(class UObject* ObjectToModify);
	class UObject* Conv_InterfaceToObject(UInterfaceProperty_& Interface);
	class UObject* Conv_AssetToObject(TSoftObjectPtr<class UObject>& Asset);
	TSubclassOf<class UObject> Conv_AssetClassToClass(TSoftClassPtr<class UObject>& AssetClass);
	void ControlScreensaver(bool bAllowScreenSaver);
	bool ComponentOverlapComponents(class UPrimitiveComponent* Component, struct FTransform& ComponentTransform, TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*>& ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool ComponentOverlapActors(class UPrimitiveComponent* Component, struct FTransform& ComponentTransform, TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*>& ActorsToIgnore, TArray<class AActor*>* OutActors);
	void CollectGarbage();
	bool CapsuleTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool CapsuleTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool CapsuleTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool CapsuleTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool CapsuleOverlapComponents(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*>& ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool CapsuleOverlapActors(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*>& ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool CanLaunchURL(const class FString& URL);
	bool BoxTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool BoxTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool BoxTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool BoxTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime);
	bool BoxOverlapComponents(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*>& ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool BoxOverlapActors(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TArray<enum class EObjectTypeQuery>& ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*>& ActorsToIgnore, TArray<class AActor*>* OutActors);
	struct FDebugFloatHistory AddFloatHistorySample(float Value, struct FDebugFloatHistory& FloatHistory);
};

// 0x0 (0x28 - 0x28)
// Class Engine.GameplayStatics
class UGameplayStatics : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GameplayStatics");
		return Clss;
	}

	void UnloadStreamLevel(class UObject* WorldContextObject, class FName LevelName, const struct FLatentActionInfo& LatentInfo);
	bool SuggestProjectileVelocity_CustomArc(class UObject* WorldContextObject, struct FVector* OutLaunchVelocity, const struct FVector& StartPos, const struct FVector& EndPos, float OverrideGravityZ, float ArcParam);
	class UAudioComponent* SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings);
	class UAudioComponent* SpawnSoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings);
	class UAudioComponent* SpawnSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition);
	class UObject* SpawnObject(TSubclassOf<class UObject> ObjectClass, class UObject* Outer);
	class UForceFeedbackComponent* SpawnForceFeedbackAttached(class UForceFeedbackEffect* ForceFeedbackEffect, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings);
	class UForceFeedbackComponent* SpawnForceFeedbackAtLocation(class UObject* WorldContextObject, class UForceFeedbackEffect* ForceFeedbackEffect, const struct FVector& Location, const struct FRotator& Rotation, bool bLooping, float IntensityMultiplier, float StartTime, class UForceFeedbackAttenuation* AttenuationSettings);
	class UParticleSystemComponent* SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, enum class EAttachLocation LocationType, bool bAutoDestroy);
	class UParticleSystemComponent* SpawnEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, bool bAutoDestroy);
	class UAudioComponent* SpawnDialogueAttached(class UDialogueWave* Dialogue, struct FDialogueContext& Context, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	class UAudioComponent* SpawnDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	class UAudioComponent* SpawnDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	class UDecalComponent* SpawnDecalAttached(class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, enum class EAttachLocation LocationType, float LifeSpan);
	class UDecalComponent* SpawnDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan);
	void SetWorldOriginLocation(class UObject* WorldContextObject, const struct FIntVector& NewLocation);
	void SetSubtitlesEnabled(bool bEnabled);
	void SetSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren);
	void SetPlayerControllerID(class APlayerController* Player, int32 ControllerId);
	void SetGlobalTimeDilation(class UObject* WorldContextObject, float TimeDilation);
	void SetGlobalPitchModulation(class UObject* WorldContextObject, float PitchModulation, float TimeSec);
	void SetGlobalListenerFocusParameters(class UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale);
	bool SetGamePaused(class UObject* WorldContextObject, bool bPaused);
	void SetBaseSoundMix(class UObject* WorldContextObject, class USoundMix* InSoundMix);
	bool SaveGameToSlot(class USaveGame* SaveGameObject, const class FString& SlotName, int32 UserIndex);
	void RemovePlayer(class APlayerController* Player, bool bDestroyPawn);
	struct FVector RebaseZeroOriginOntoLocal(class UObject* WorldContextObject, const struct FVector& WorldLocation);
	struct FVector RebaseLocalOriginOntoZero(class UObject* WorldContextObject, const struct FVector& WorldLocation);
	void PushSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);
	bool ProjectWorldToScreen(class APlayerController* Player, struct FVector& WorldPosition, struct FVector2D* ScreenPosition, bool bPlayerViewportRelative);
	void PopSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);
	void PlayWorldCameraShake(class UObject* WorldContextObject, TSubclassOf<class UCameraShake> Shake, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);
	void PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor);
	void PlaySound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, class AActor* OwningActor);
	void PlayDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	void PlayDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	class FString ParseOption(const class FString& Options, const class FString& Key);
	void OpenLevel(class UObject* WorldContextObject, class FName LevelName, bool bAbsolute, const class FString& Options);
	struct FHitResult MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, const struct FVector& Location, const struct FVector& ImpactPoint, const struct FVector& Normal, const struct FVector& ImpactNormal, class UPhysicalMaterial* PhysMat, class AActor* HitActor, class UPrimitiveComponent* HitComponent, class FName HitBoneName, int32 HitItem, int32 FaceIndex, const struct FVector& TraceStart, const struct FVector& TraceEnd);
	void LoadStreamLevel(class UObject* WorldContextObject, class FName LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo);
	class USaveGame* LoadGameFromSlot(const class FString& SlotName, int32 UserIndex);
	bool IsGamePaused(class UObject* WorldContextObject);
	bool HasOption(const class FString& Options, const class FString& InKey);
	bool HasLaunchOption(const class FString& OptionToCheck);
	int32 GrassOverlappingSphereCount(class UObject* WorldContextObject, class UStaticMesh* StaticMesh, const struct FVector& CenterPosition, float Radius);
	struct FIntVector GetWorldOriginLocation(class UObject* WorldContextObject);
	float GetWorldDeltaSeconds(class UObject* WorldContextObject);
	float GetUnpausedTimeSeconds(class UObject* WorldContextObject);
	float GetTimeSeconds(class UObject* WorldContextObject);
	enum class EPhysicalSurface GetSurfaceType(struct FHitResult& Hit);
	class ULevelStreaming* GetStreamingLevel(class UObject* WorldContextObject, class FName PackageName);
	float GetRealTimeSeconds(class UObject* WorldContextObject);
	class APawn* GetPlayerPawn(class UObject* WorldContextObject, int32 PlayerIndex);
	int32 GetPlayerControllerID(class APlayerController* Player);
	class APlayerController* GetPlayerController(class UObject* WorldContextObject, int32 PlayerIndex);
	class ACharacter* GetPlayerCharacter(class UObject* WorldContextObject, int32 PlayerIndex);
	class APlayerCameraManager* GetPlayerCameraManager(class UObject* WorldContextObject, int32 PlayerIndex);
	class FString GetPlatformName();
	class UClass* GetObjectClass(class UObject* Object);
	void GetKeyValue(const class FString& Pair, class FString* Key, class FString* Value);
	int32 GetIntOption(const class FString& Options, const class FString& Key, int32 DefaultValue);
	float GetGlobalTimeDilation(class UObject* WorldContextObject);
	class AGameStateBase* GetGameState(class UObject* WorldContextObject);
	class AGameModeBase* GetGameMode(class UObject* WorldContextObject);
	class UGameInstance* GetGameInstance(class UObject* WorldContextObject);
	class UReverbEffect* GetCurrentReverbEffect(class UObject* WorldContextObject);
	class FString GetCurrentLevelName(class UObject* WorldContextObject, bool bRemovePrefixString);
	float GetAudioTimeSeconds(class UObject* WorldContextObject);
	void GetAllActorsWithTag(class UObject* WorldContextObject, class FName Tag, TArray<class AActor*>* OutActors);
	void GetAllActorsWithInterface(class UObject* WorldContextObject, TSubclassOf<class UInterface> Interface, TArray<class AActor*>* OutActors);
	void GetAllActorsOfClass(class UObject* WorldContextObject, TSubclassOf<class AActor> ActorClass, TArray<class AActor*>* OutActors);
	void GetActorArrayBounds(TArray<class AActor*>& Actors, bool bOnlyCollidingComponents, struct FVector* Center, struct FVector* BoxExtent);
	struct FVector GetActorArrayAverageLocation(TArray<class AActor*>& Actors);
	void GetAccurateRealTime(class UObject* WorldContextObject, int32* Seconds, float* PartialSeconds);
	void FlushLevelStreaming(class UObject* WorldContextObject);
	class AActor* FinishSpawningActor(class AActor* Actor, struct FTransform& SpawnTransform);
	bool FindCollisionUV(struct FHitResult& Hit, int32 UVChannel, struct FVector2D* UV);
	void EnableLiveStreaming(bool Enable);
	bool DoesSaveGameExist(const class FString& SlotName, int32 UserIndex);
	bool DeprojectScreenToWorld(class APlayerController* Player, struct FVector2D& ScreenPosition, struct FVector* WorldPosition, struct FVector* WorldDirection);
	bool DeleteGameInSlot(const class FString& SlotName, int32 UserIndex);
	void DeactivateReverbEffect(class UObject* WorldContextObject, class FName TagName);
	class UAudioComponent* CreateSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition);
	class USaveGame* CreateSaveGameObjectFromBlueprint(class UBlueprint* SaveGameBlueprint);
	class USaveGame* CreateSaveGameObject(TSubclassOf<class USaveGame> SaveGameClass);
	class APlayerController* CreatePlayer(class UObject* WorldContextObject, int32 ControllerId, bool bSpawnPawn);
	void ClearSoundMixModifiers(class UObject* WorldContextObject);
	void ClearSoundMixClassOverride(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier, class USoundClass* InSoundClass, float FadeOutTime);
	void CancelAsyncLoading();
	void BreakHitResult(struct FHitResult& Hit, bool* bBlockingHit, bool* bInitialOverlap, float* Time, struct FVector* Location, struct FVector* ImpactPoint, struct FVector* Normal, struct FVector* ImpactNormal, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, class FName* HitBoneName, int32* HitItem, int32* FaceIndex, struct FVector* TraceStart, struct FVector* TraceEnd);
	bool BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, struct FVector* TossVelocity, const struct FVector& StartLocation, const struct FVector& EndLocation, float LaunchSpeed, float OverrideGravityZ, enum class ESuggestProjVelocityTraceOption TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug);
	bool Blueprint_PredictProjectilePath_ByTraceChannel(class UObject* WorldContextObject, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, enum class ECollisionChannel TraceChannel, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);
	bool Blueprint_PredictProjectilePath_ByObjectType(class UObject* WorldContextObject, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, TArray<enum class EObjectTypeQuery>& ObjectTypes, bool bTraceComplex, TArray<class AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ);
	bool Blueprint_PredictProjectilePath_Advanced(class UObject* WorldContextObject, struct FPredictProjectilePathParams& PredictParams, struct FPredictProjectilePathResult* PredictResult);
	class AActor* BeginSpawningActorFromClass(class UObject* WorldContextObject, TSubclassOf<class AActor> ActorClass, struct FTransform& SpawnTransform, bool bNoCollisionFail, class AActor* Owner);
	class AActor* BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UBlueprint* Blueprint, struct FTransform& SpawnTransform, bool bNoCollisionFail);
	class AActor* BeginDeferredActorSpawnFromClass(class UObject* WorldContextObject, TSubclassOf<class AActor> ActorClass, struct FTransform& SpawnTransform, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner);
	bool AreSubtitlesEnabled();
	bool AreAnyListenersWithinRange(class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange);
	bool ApplyRadialDamageWithFalloff(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, TSubclassOf<class UDamageType> DamageTypeClass, TArray<class AActor*>& IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, enum class ECollisionChannel DamagePreventionChannel);
	bool ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, struct FVector& Origin, float DamageRadius, TSubclassOf<class UDamageType> DamageTypeClass, TArray<class AActor*>& IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, enum class ECollisionChannel DamagePreventionChannel);
	float ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, struct FVector& HitFromDirection, struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, TSubclassOf<class UDamageType> DamageTypeClass);
	float ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, TSubclassOf<class UDamageType> DamageTypeClass);
	void ActivateReverbEffect(class UObject* WorldContextObject, class UReverbEffect* ReverbEffect, class FName TagName, float Priority, float Volume, float FadeTime);
};

// 0x0 (0x28 - 0x28)
// Class Engine.HeadMountedDisplayFunctionLibrary
class UHeadMountedDisplayFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HeadMountedDisplayFunctionLibrary");
		return Clss;
	}

	void SetWorldToMetersScale(class UObject* WorldContext, float NewScale);
	void SetTrackingOrigin(enum class EHMDTrackingOrigin Origin);
	void SetClippingPlanes(float Near, float Far);
	void ResetOrientationAndPosition(float Yaw, enum class EOrientPositionSelector Options);
	bool IsInLowPersistenceMode();
	bool IsHeadMountedDisplayEnabled();
	bool IsHeadMountedDisplayConnected();
	bool HasValidTrackingPosition();
	float GetWorldToMetersScale(class UObject* WorldContext);
	void GetVRFocusState(bool* bUseFocus, bool* bHasFocus);
	void GetTrackingSensorParameters(struct FVector* Origin, struct FRotator* Rotation, float* LeftFOV, float* RightFOV, float* TopFOV, float* BottomFOV, float* Distance, float* NearPlane, float* FarPlane, bool* IsActive, int32 Index);
	enum class EHMDTrackingOrigin GetTrackingOrigin();
	float GetScreenPercentage();
	void GetPositionalTrackingCameraParameters(struct FVector* CameraOrigin, struct FRotator* CameraRotation, float* HFOV, float* VFOV, float* CameraDistance, float* NearPlane, float* FarPlane);
	void GetOrientationAndPosition(struct FRotator* DeviceRotation, struct FVector* DevicePosition);
	int32 GetNumOfTrackingSensors();
	class FName GetHMDDeviceName();
	void EnableLowPersistenceMode(bool bEnable);
	bool EnableHMD(bool bEnable);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetArrayLibrary
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetArrayLibrary");
		return Clss;
	}

	void SetArrayPropertyByName(class UObject* Object, class FName PropertyName, TArray<int32>& Value);
	void FilterArray(TArray<class AActor*>& TargetArray, TSubclassOf<class AActor> FilterClass, TArray<class AActor*>* FilteredArray);
	void Array_Shuffle(TArray<int32>& TargetArray);
	void Array_Set(TArray<int32>& TargetArray, int32 Index, int32& Item, bool bSizeToFit);
	void Array_Resize(TArray<int32>& TargetArray, int32 Size);
	bool Array_RemoveItem(TArray<int32>& TargetArray, int32& Item);
	void Array_Remove(TArray<int32>& TargetArray, int32 IndexToRemove);
	int32 Array_Length(TArray<int32>& TargetArray);
	int32 Array_LastIndex(TArray<int32>& TargetArray);
	bool Array_IsValidIndex(TArray<int32>& TargetArray, int32 IndexToTest);
	void Array_Insert(TArray<int32>& TargetArray, int32& NewItem, int32 Index);
	void Array_Get(TArray<int32>& TargetArray, int32 Index, int32* Item);
	int32 Array_Find(TArray<int32>& TargetArray, int32& ItemToFind);
	bool Array_Contains(TArray<int32>& TargetArray, int32& ItemToFind);
	void Array_Clear(TArray<int32>& TargetArray);
	void Array_Append(TArray<int32>& TargetArray, TArray<int32>& SourceArray);
	int32 Array_AddUnique(TArray<int32>& TargetArray, int32& NewItem);
	int32 Array_Add(TArray<int32>& TargetArray, int32& NewItem);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetGuidLibrary
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetGuidLibrary");
		return Clss;
	}

	void Parse_StringToGuid(const class FString& GuidString, struct FGuid* OutGuid, bool* Success);
	bool NotEqual_GuidGuid(struct FGuid& A, struct FGuid& B);
	struct FGuid NewGuid();
	bool IsValid_Guid(struct FGuid& InGuid);
	void Invalidate_Guid(struct FGuid& InGuid);
	bool EqualEqual_GuidGuid(struct FGuid& A, struct FGuid& B);
	class FString Conv_GuidToString(struct FGuid& InGuid);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetInputLibrary
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetInputLibrary");
		return Clss;
	}

	bool PointerEvent_IsTouchEvent(struct FPointerEvent& Input);
	bool PointerEvent_IsMouseButtonDown(struct FPointerEvent& Input, const struct FKey& MouseButton);
	float PointerEvent_GetWheelDelta(struct FPointerEvent& Input);
	int32 PointerEvent_GetUserIndex(struct FPointerEvent& Input);
	int32 PointerEvent_GetTouchpadIndex(struct FPointerEvent& Input);
	struct FVector2D PointerEvent_GetScreenSpacePosition(struct FPointerEvent& Input);
	int32 PointerEvent_GetPointerIndex(struct FPointerEvent& Input);
	struct FVector2D PointerEvent_GetLastScreenSpacePosition(struct FPointerEvent& Input);
	struct FVector2D PointerEvent_GetGestureDelta(struct FPointerEvent& Input);
	struct FKey PointerEvent_GetEffectingButton(struct FPointerEvent& Input);
	struct FVector2D PointerEvent_GetCursorDelta(struct FPointerEvent& Input);
	bool Key_IsVectorAxis(struct FKey& Key);
	bool Key_IsMouseButton(struct FKey& Key);
	bool Key_IsModifierKey(struct FKey& Key);
	bool Key_IsKeyboardKey(struct FKey& Key);
	bool Key_IsGamepadKey(struct FKey& Key);
	bool Key_IsFloatAxis(struct FKey& Key);
	class FText Key_GetDisplayName(struct FKey& Key);
	bool InputEvent_IsShiftDown(struct FInputEvent& Input);
	bool InputEvent_IsRightShiftDown(struct FInputEvent& Input);
	bool InputEvent_IsRightControlDown(struct FInputEvent& Input);
	bool InputEvent_IsRightCommandDown(struct FInputEvent& Input);
	bool InputEvent_IsRightAltDown(struct FInputEvent& Input);
	bool InputEvent_IsRepeat(struct FInputEvent& Input);
	bool InputEvent_IsLeftShiftDown(struct FInputEvent& Input);
	bool InputEvent_IsLeftControlDown(struct FInputEvent& Input);
	bool InputEvent_IsLeftCommandDown(struct FInputEvent& Input);
	bool InputEvent_IsLeftAltDown(struct FInputEvent& Input);
	bool InputEvent_IsControlDown(struct FInputEvent& Input);
	bool InputEvent_IsCommandDown(struct FInputEvent& Input);
	bool InputEvent_IsAltDown(struct FInputEvent& Input);
	int32 GetUserIndex(struct FKeyEvent& Input);
	struct FKey GetKey(struct FKeyEvent& Input);
	float GetAnalogValue(struct FAnalogInputEvent& Input);
	bool EqualEqual_KeyKey(const struct FKey& A, const struct FKey& B);
	bool EqualEqual_InputChordInputChord(const struct FInputChord& A, const struct FInputChord& B);
	int32 ControllerEvent_GetUserIndex(struct FControllerEvent& Input);
	struct FKey ControllerEvent_GetEffectingButton(struct FControllerEvent& Input);
	float ControllerEvent_GetAnalogValue(struct FControllerEvent& Input);
	void CalibrateTilt();
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetMaterialLibrary
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetMaterialLibrary");
		return Clss;
	}

	void SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, class FName ParameterName, struct FLinearColor& ParameterValue);
	void SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, class FName ParameterName, float ParameterValue);
	struct FLinearColor GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, class FName ParameterName);
	float GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, class FName ParameterName);
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetMathLibrary
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetMathLibrary");
		return Clss;
	}

	int32 Xor_IntInt(int32 A, int32 B);
	float VSizeXY(const struct FVector& A);
	float VSizeSquared(const struct FVector& A);
	float VSize2DSquared(const struct FVector2D& A);
	float VSize2D(const struct FVector2D& A);
	float VSize(const struct FVector& A);
	struct FVector VLerp(const struct FVector& A, const struct FVector& B, float Alpha);
	struct FVector VInterpTo_Constant(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed);
	struct FVector VInterpTo(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed);
	struct FVector VectorSpringInterp(const struct FVector& Current, const struct FVector& Target, struct FVectorSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);
	struct FVector2D Vector2DInterpTo_Constant(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed);
	struct FVector2D Vector2DInterpTo(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed);
	struct FVector VEase(const struct FVector& A, const struct FVector& B, float Alpha, enum class EEasingFunc EasingFunc, float BlendExp, int32 Steps);
	struct FDateTime UtcNow();
	struct FVector TransformLocation(struct FTransform& T, const struct FVector& Location);
	struct FVector TransformDirection(struct FTransform& T, const struct FVector& Direction);
	struct FDateTime Today();
	struct FTransform TLerp(struct FTransform& A, struct FTransform& B, float Alpha, enum class ELerpInterpolationMode InterpMode);
	struct FTransform TInterpTo(struct FTransform& Current, struct FTransform& Target, float DeltaTime, float InterpSpeed);
	struct FTimespan TimespanZeroValue();
	float TimespanRatio(const struct FTimespan& A, const struct FTimespan& B);
	struct FTimespan TimespanMinValue();
	struct FTimespan TimespanMaxValue();
	bool TimespanFromString(const class FString& TimespanString, struct FTimespan* Result);
	struct FTransform TEase(struct FTransform& A, struct FTransform& B, float Alpha, enum class EEasingFunc EasingFunc, float BlendExp, int32 Steps);
	float Tan(float A);
	struct FVector Subtract_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector Subtract_VectorInt(const struct FVector& A, int32 B);
	struct FVector Subtract_VectorFloat(const struct FVector& A, float B);
	struct FVector2D Subtract_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D Subtract_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan Subtract_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	int32 Subtract_IntInt(int32 A, int32 B);
	float Subtract_FloatFloat(float A, float B);
	struct FDateTime Subtract_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
	struct FTimespan Subtract_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	uint8 Subtract_ByteByte(uint8 A, uint8 B);
	float Square(float A);
	float Sqrt(float A);
	float Sin(float A);
	int32 SignOfInteger(int32 A);
	float SignOfFloat(float A);
	void SetRandomStreamSeed(struct FRandomStream& Stream, int32 NewSeed);
	struct FVector SelectVector(const struct FVector& A, const struct FVector& B, bool bPickA);
	struct FTransform SelectTransform(struct FTransform& A, struct FTransform& B, bool bPickA);
	class FString SelectString(const class FString& A, const class FString& B, bool bPickA);
	struct FRotator SelectRotator(const struct FRotator& A, const struct FRotator& B, bool bPickA);
	class UObject* SelectObject(class UObject* A, class UObject* B, bool bSelectA);
	int32 SelectInt(int32 A, int32 B, bool bPickA);
	float SelectFloat(float A, float B, bool bPickA);
	struct FLinearColor SelectColor(const struct FLinearColor& A, const struct FLinearColor& B, bool bPickA);
	class UClass* SelectClass(class UClass* A, class UClass* B, bool bSelectA);
	void SeedRandomStream(struct FRandomStream& Stream);
	int32 Round(float A);
	struct FRotator RotatorFromAxisAndAngle(const struct FVector& Axis, float Angle);
	struct FVector RotateAngleAxis(const struct FVector& InVect, float AngleDeg, const struct FVector& Axis);
	struct FRotator RLerp(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath);
	struct FRotator RInterpTo_Constant(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
	struct FRotator RInterpTo(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
	void RGBToHSV_Vector(const struct FLinearColor& RGB, struct FLinearColor* HSV);
	void RGBToHSV(const struct FLinearColor& InColor, float* H, float* S, float* V, float* A);
	void ResetVectorSpringState(struct FVectorSpringState& SpringState);
	void ResetRandomStream(struct FRandomStream& Stream);
	void ResetFloatSpringState(struct FFloatSpringState& SpringState);
	struct FRotator REase(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, enum class EEasingFunc EasingFunc, float BlendExp, int32 Steps);
	struct FVector RandomUnitVectorInConeWithYawAndPitch(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);
	struct FVector RandomUnitVectorInCone(const struct FVector& ConeDir, float ConeHalfAngle);
	struct FVector RandomUnitVectorFromStream(struct FRandomStream& Stream);
	struct FVector RandomUnitVector();
	struct FRotator RandomRotatorFromStream(bool bRoll, struct FRandomStream& Stream);
	struct FRotator RandomRotator(bool bRoll);
	struct FVector RandomPointInBoundingBox(struct FVector& Origin, struct FVector& BoxExtent);
	int32 RandomIntegerInRangeFromStream(int32 Min, int32 Max, struct FRandomStream& Stream);
	int32 RandomIntegerInRange(int32 Min, int32 Max);
	int32 RandomIntegerFromStream(int32 Max, struct FRandomStream& Stream);
	int32 RandomInteger(int32 Max);
	float RandomFloatInRangeFromStream(float Min, float Max, struct FRandomStream& Stream);
	float RandomFloatInRange(float Min, float Max);
	float RandomFloatFromStream(struct FRandomStream& Stream);
	float RandomFloat();
	bool RandomBoolWithWeightFromStream(float Weight, struct FRandomStream& RandomStream);
	bool RandomBoolWithWeight(float Weight);
	bool RandomBoolFromStream(struct FRandomStream& Stream);
	bool RandomBool();
	float RadiansToDegrees(float A);
	struct FVector ProjectVectorOnToVector(const struct FVector& V, const struct FVector& Target);
	struct FVector ProjectVectorOnToPlane(const struct FVector& V, const struct FVector& PlaneNormal);
	struct FVector ProjectPointOnToPlane(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNormal);
	bool PointsAreCoplanar(TArray<struct FVector>& Points, float Tolerance);
	int32 Percent_IntInt(int32 A, int32 B);
	float Percent_FloatFloat(float A, float B);
	uint8 Percent_ByteByte(uint8 A, uint8 B);
	int32 Or_IntInt(int32 A, int32 B);
	struct FDateTime Now();
	bool NotEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance);
	bool NotEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance);
	bool NotEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool NotEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance);
	bool NotEqual_ObjectObject(class UObject* A, class UObject* B);
	bool NotEqual_NameName(class FName A, class FName B);
	bool NotEqual_IntInt(int32 A, int32 B);
	bool NotEqual_FloatFloat(float A, float B);
	bool NotEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool NotEqual_ClassClass(class UClass* A, class UClass* B);
	bool NotEqual_ByteByte(uint8 A, uint8 B);
	bool NotEqual_BoolBool(bool A, bool B);
	bool Not_PreBool(bool A);
	int32 Not_Int(int32 A);
	float NormalizeToRange(float Value, float RangeMin, float RangeMax);
	struct FRotator NormalizedDeltaRotator(const struct FRotator& A, const struct FRotator& B);
	float NormalizeAxis(float Angle);
	struct FVector2D Normal2D(const struct FVector2D& A);
	struct FVector Normal(const struct FVector& A);
	struct FVector NegateVector(const struct FVector& A);
	struct FRotator NegateRotator(const struct FRotator& A);
	bool NearlyEqual_TransformTransform(struct FTransform& A, struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);
	bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);
	float MultiplyMultiply_FloatFloat(float Base, float Exp);
	float MultiplyByPi(float Value);
	struct FVector Multiply_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector Multiply_VectorInt(const struct FVector& A, int32 B);
	struct FVector Multiply_VectorFloat(const struct FVector& A, float B);
	struct FVector2D Multiply_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D Multiply_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan Multiply_TimespanFloat(const struct FTimespan& A, float Scalar);
	struct FRotator Multiply_RotatorInt(const struct FRotator& A, int32 B);
	struct FRotator Multiply_RotatorFloat(const struct FRotator& A, float B);
	struct FLinearColor Multiply_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	struct FLinearColor Multiply_LinearColorFloat(const struct FLinearColor& A, float B);
	int32 Multiply_IntInt(int32 A, int32 B);
	float Multiply_IntFloat(int32 A, float B);
	float Multiply_FloatFloat(float A, float B);
	uint8 Multiply_ByteByte(uint8 A, uint8 B);
	struct FVector MirrorVectorByNormal(const struct FVector& InVect, const struct FVector& InNormal);
	void MinOfIntArray(TArray<int32>& IntArray, int32* IndexOfMinValue, int32* MinValue);
	void MinOfFloatArray(TArray<float>& FloatArray, int32* IndexOfMinValue, float* MinValue);
	void MinOfByteArray(TArray<uint8>& ByteArray, int32* IndexOfMinValue, uint8* MinValue);
	void MinimumAreaRectangle(class UObject* WorldContextObject, TArray<struct FVector>& InVerts, struct FVector& SampleSurfaceNormal, struct FVector* OutRectCenter, struct FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY, bool bDebugDraw);
	int32 Min(int32 A, int32 B);
	void MaxOfIntArray(TArray<int32>& IntArray, int32* IndexOfMaxValue, int32* MaxValue);
	void MaxOfFloatArray(TArray<float>& FloatArray, int32* IndexOfMaxValue, float* MaxValue);
	void MaxOfByteArray(TArray<uint8>& ByteArray, int32* IndexOfMaxValue, uint8* MaxValue);
	int32 Max(int32 A, int32 B);
	float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
	float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
	struct FVector2D MakeVector2D(float X, float Y);
	struct FVector MakeVector(float X, float Y, float Z);
	struct FTransform MakeTransform(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale);
	struct FTimespan MakeTimespan(int32 Days, int32 Hours, int32 Minutes, int32 Seconds, int32 Milliseconds);
	struct FRotator MakeRotFromZY(struct FVector& Z, struct FVector& Y);
	struct FRotator MakeRotFromZX(struct FVector& Z, struct FVector& X);
	struct FRotator MakeRotFromZ(struct FVector& Z);
	struct FRotator MakeRotFromYZ(struct FVector& Y, struct FVector& Z);
	struct FRotator MakeRotFromYX(struct FVector& Y, struct FVector& X);
	struct FRotator MakeRotFromY(struct FVector& Y);
	struct FRotator MakeRotFromXZ(struct FVector& X, struct FVector& Z);
	struct FRotator MakeRotFromXY(struct FVector& X, struct FVector& Y);
	struct FRotator MakeRotFromX(struct FVector& X);
	struct FRotator MakeRotator(float Roll, float Pitch, float Yaw);
	struct FRotator MakeRotationFromAxes(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up);
	struct FRandomStream MakeRandomStream(int32 InitialSeed);
	float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);
	struct FPlane MakePlaneFromPointAndNormal(const struct FVector& Point, const struct FVector& Normal);
	struct FDateTime MakeDateTime(int32 Year, int32 Month, int32 Day, int32 Hour, int32 Minute, int32 Second, int32 Millisecond);
	struct FLinearColor MakeColor(float R, float G, float B, float A);
	struct FBox2D MakeBox2D(const struct FVector2D& Min, const struct FVector2D& Max);
	struct FBox MakeBox(const struct FVector& Min, const struct FVector& Max);
	float Loge(float A);
	float Log(float A, float Base);
	bool LinePlaneIntersection_OriginNormal(struct FVector& LineStart, struct FVector& LineEnd, const struct FVector& PlaneOrigin, const struct FVector& PlaneNormal, float* T, struct FVector* Intersection);
	bool LinePlaneIntersection(struct FVector& LineStart, struct FVector& LineEnd, struct FPlane& APlane, float* T, struct FVector* Intersection);
	struct FLinearColor LinearColorLerpUsingHSV(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha);
	struct FLinearColor LinearColorLerp(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha);
	struct FVector LessLess_VectorRotator(const struct FVector& A, const struct FRotator& B);
	bool LessEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool LessEqual_IntInt(int32 A, int32 B);
	bool LessEqual_FloatFloat(float A, float B);
	bool LessEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool LessEqual_ByteByte(uint8 A, uint8 B);
	bool Less_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool Less_IntInt(int32 A, int32 B);
	bool Less_FloatFloat(float A, float B);
	bool Less_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool Less_ByteByte(uint8 A, uint8 B);
	float Lerp(float A, float B, float Alpha);
	bool IsPointInBoxWithTransform(const struct FVector& Point, struct FTransform& BoxWorldTransform, const struct FVector& BoxExtent);
	bool IsPointInBox(const struct FVector& Point, const struct FVector& BoxOrigin, const struct FVector& BoxExtent);
	bool IsMorning(const struct FDateTime& A);
	bool IsLeapYear(int32 Year);
	bool IsAfternoon(const struct FDateTime& A);
	struct FTransform InvertTransform(struct FTransform& T);
	struct FVector InverseTransformLocation(struct FTransform& T, const struct FVector& Location);
	struct FVector InverseTransformDirection(struct FTransform& T, const struct FVector& Direction);
	float InverseLerp(float A, float B, float Value);
	bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);
	float Hypotenuse(float Width, float Height);
	void HSVToRGB_Vector(const struct FLinearColor& HSV, struct FLinearColor* RGB);
	struct FLinearColor HSVToRGB(float H, float S, float V, float A);
	float GridSnap_Float(float Location, float GridSize);
	struct FVector GreaterGreater_VectorRotator(const struct FVector& A, const struct FRotator& B);
	bool GreaterEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool GreaterEqual_IntInt(int32 A, int32 B);
	bool GreaterEqual_FloatFloat(float A, float B);
	bool GreaterEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool GreaterEqual_ByteByte(uint8 A, uint8 B);
	bool Greater_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool Greater_IntInt(int32 A, int32 B);
	bool Greater_FloatFloat(float A, float B);
	bool Greater_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool Greater_ByteByte(uint8 A, uint8 B);
	int32 GetYear(const struct FDateTime& A);
	void GetYawPitchFromVector(const struct FVector& InVec, float* Yaw, float* Pitch);
	struct FVector GetVectorArrayAverage(TArray<struct FVector>& Vectors);
	struct FVector GetUpVector(const struct FRotator& InRot);
	float GetTotalSeconds(const struct FTimespan& A);
	float GetTotalMinutes(const struct FTimespan& A);
	float GetTotalMilliseconds(const struct FTimespan& A);
	float GetTotalHours(const struct FTimespan& A);
	float GetTotalDays(const struct FTimespan& A);
	struct FTimespan GetTimeOfDay(const struct FDateTime& A);
	float GetTAU();
	int32 GetSeconds(const struct FTimespan& A);
	int32 GetSecond(const struct FDateTime& A);
	struct FVector GetRightVector(const struct FRotator& InRot);
	struct FVector GetReflectionVector(const struct FVector& Direction, const struct FVector& SurfaceNormal);
	float GetPointDistanceToSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd);
	float GetPointDistanceToLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection);
	float GetPI();
	int32 GetMonth(const struct FDateTime& A);
	int32 GetMinutes(const struct FTimespan& A);
	int32 GetMinute(const struct FDateTime& A);
	float GetMinElement(const struct FVector& A);
	int32 GetMilliseconds(const struct FTimespan& A);
	int32 GetMillisecond(const struct FDateTime& A);
	float GetMaxElement(const struct FVector& A);
	int32 GetHours(const struct FTimespan& A);
	int32 GetHour12(const struct FDateTime& A);
	int32 GetHour(const struct FDateTime& A);
	struct FVector GetForwardVector(const struct FRotator& InRot);
	struct FTimespan GetDuration(const struct FTimespan& A);
	struct FVector GetDirectionUnitVector(const struct FVector& From, const struct FVector& To);
	int32 GetDays(const struct FTimespan& A);
	int32 GetDayOfYear(const struct FDateTime& A);
	int32 GetDay(const struct FDateTime& A);
	struct FDateTime GetDate(const struct FDateTime& A);
	void GetAxes(const struct FRotator& A, struct FVector* X, struct FVector* Y, struct FVector* Z);
	struct FIntVector FTruncVector(struct FVector& InVector);
	int32 FTrunc(float A);
	struct FTimespan FromSeconds(float Seconds);
	struct FTimespan FromMinutes(float Minutes);
	struct FTimespan FromMilliseconds(float Milliseconds);
	struct FTimespan FromHours(float Hours);
	struct FTimespan FromDays(float Days);
	float Fraction(float A);
	int32 FMod(float Dividend, float Divisor, float* Remainder);
	float FMin(float A, float B);
	float FMax(float A, float B);
	float FloatSpringInterp(float Current, float Target, struct FFloatSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);
	float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);
	float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);
	float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);
	float FInterpEaseInOut(float A, float B, float Alpha, float Exponent);
	void FindNearestPointsOnLineSegments(const struct FVector& Segment1Start, const struct FVector& Segment1End, const struct FVector& Segment2Start, const struct FVector& Segment2End, struct FVector* Segment1Point, struct FVector* Segment2Point);
	struct FRotator FindLookAtRotation(struct FVector& Start, struct FVector& Target);
	struct FVector FindClosestPointOnSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd);
	struct FVector FindClosestPointOnLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection);
	int32 FFloor(float A);
	float FClamp(float Value, float Min, float Max);
	int32 FCeil(float A);
	float Exp(float A);
	bool EqualEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance);
	bool EqualEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance);
	bool EqualEqual_TransformTransform(struct FTransform& A, struct FTransform& B);
	bool EqualEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool EqualEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance);
	bool EqualEqual_ObjectObject(class UObject* A, class UObject* B);
	bool EqualEqual_NameName(class FName A, class FName B);
	bool EqualEqual_IntInt(int32 A, int32 B);
	bool EqualEqual_FloatFloat(float A, float B);
	bool EqualEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool EqualEqual_ClassClass(class UClass* A, class UClass* B);
	bool EqualEqual_ByteByte(uint8 A, uint8 B);
	bool EqualEqual_BoolBool(bool A, bool B);
	float Ease(float A, float B, float Alpha, enum class EEasingFunc EasingFunc, float BlendExp, int32 Steps);
	float DotProduct2D(const struct FVector2D& A, const struct FVector2D& B);
	float Dot_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector Divide_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector Divide_VectorInt(const struct FVector& A, int32 B);
	struct FVector Divide_VectorFloat(const struct FVector& A, float B);
	struct FVector2D Divide_Vector2DFloat(const struct FVector2D& A, float B);
	int32 Divide_IntInt(int32 A, int32 B);
	float Divide_FloatFloat(float A, float B);
	uint8 Divide_ByteByte(uint8 A, uint8 B);
	float DegTan(float A);
	float DegSin(float A);
	float DegreesToRadians(float A);
	float DegCos(float A);
	float DegAtan2(float A, float B);
	float DegAtan(float A);
	float DegAsin(float A);
	float DegAcos(float A);
	int32 DaysInYear(int32 Year);
	int32 DaysInMonth(int32 Year, int32 Month);
	struct FDateTime DateTimeMinValue();
	struct FDateTime DateTimeMaxValue();
	bool DateTimeFromString(const class FString& DateTimeString, struct FDateTime* Result);
	bool DateTimeFromIsoString(const class FString& IsoString, struct FDateTime* Result);
	float CrossProduct2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector Cross_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);
	float Cos(float A);
	struct FTransform ConvertTransformToRelative(struct FTransform& Transform, struct FTransform& ParentTransform);
	struct FVector2D Conv_VectorToVector2D(const struct FVector& InVector);
	struct FTransform Conv_VectorToTransform(const struct FVector& InLocation);
	struct FRotator Conv_VectorToRotator(const struct FVector& InVec);
	struct FLinearColor Conv_VectorToLinearColor(const struct FVector& InVec);
	struct FVector Conv_Vector2DToVector(const struct FVector2D& InVector2D, float Z);
	struct FVector Conv_RotatorToVector(const struct FRotator& InRot);
	struct FVector Conv_LinearColorToVector(const struct FLinearColor& InLinearColor);
	struct FColor Conv_LinearColorToColor(const struct FLinearColor& InLinearColor);
	struct FVector Conv_IntVectorToVector(struct FIntVector& InIntVector);
	struct FIntVector Conv_IntToIntVector(int32 InInt);
	float Conv_IntToFloat(int32 InInt);
	uint8 Conv_IntToByte(int32 InInt);
	bool Conv_IntToBool(int32 InInt);
	struct FVector Conv_FloatToVector(float InFloat);
	struct FLinearColor Conv_FloatToLinearColor(float InFloat);
	struct FLinearColor Conv_ColorToLinearColor(const struct FColor& InColor);
	int32 Conv_ByteToInt(uint8 InByte);
	float Conv_ByteToFloat(uint8 InByte);
	int32 Conv_BoolToInt(bool InBool);
	float Conv_BoolToFloat(bool InBool);
	uint8 Conv_BoolToByte(bool InBool);
	struct FTransform ComposeTransforms(struct FTransform& A, struct FTransform& B);
	struct FRotator ComposeRotators(const struct FRotator& A, const struct FRotator& B);
	bool ClassIsChildOf(TSubclassOf<class UObject> TestClass, TSubclassOf<class UObject> ParentClass);
	struct FVector ClampVectorSize(const struct FVector& A, float Min, float Max);
	float ClampAxis(float Angle);
	float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);
	int32 Clamp(int32 Value, int32 Min, int32 Max);
	struct FLinearColor CInterpTo(const struct FLinearColor& Current, const struct FLinearColor& Target, float DeltaTime, float InterpSpeed);
	void BreakVector2D(const struct FVector2D& InVec, float* X, float* Y);
	void BreakVector(const struct FVector& InVec, float* X, float* Y, float* Z);
	void BreakTransform(struct FTransform& InTransform, struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale);
	void BreakTimespan(const struct FTimespan& InTimespan, int32* Days, int32* Hours, int32* Minutes, int32* Seconds, int32* Milliseconds);
	void BreakRotIntoAxes(struct FRotator& InRot, struct FVector* X, struct FVector* Y, struct FVector* Z);
	void BreakRotator(const struct FRotator& InRot, float* Roll, float* Pitch, float* Yaw);
	void BreakRandomStream(struct FRandomStream& InRandomStream, int32* InitialSeed);
	void BreakDateTime(const struct FDateTime& InDateTime, int32* Year, int32* Month, int32* Day, int32* Hour, int32* Minute, int32* Second, int32* Millisecond);
	void BreakColor(const struct FLinearColor& InColor, float* R, float* G, float* B, float* A);
	bool BooleanXOR(bool A, bool B);
	bool BooleanOR(bool A, bool B);
	bool BooleanNOR(bool A, bool B);
	bool BooleanNAND(bool A, bool B);
	bool BooleanAND(bool A, bool B);
	uint8 BMin(uint8 A, uint8 B);
	uint8 BMax(uint8 A, uint8 B);
	float Atan2(float A, float B);
	float Atan(float A);
	float Asin(float A);
	int32 And_IntInt(int32 A, int32 B);
	struct FVector Add_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector Add_VectorInt(const struct FVector& A, int32 B);
	struct FVector Add_VectorFloat(const struct FVector& A, float B);
	struct FVector2D Add_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D Add_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan Add_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	int32 Add_IntInt(int32 A, int32 B);
	float Add_FloatFloat(float A, float B);
	struct FDateTime Add_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
	uint8 Add_ByteByte(uint8 A, uint8 B);
	float Acos(float A);
	int32 Abs_Int(int32 A);
	float Abs(float A);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetNodeHelperLibrary
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetNodeHelperLibrary");
		return Clss;
	}

	void MarkBit(int32* Data, int32 Index);
	bool HasUnmarkedBit(int32 Data, int32 NumBits);
	bool HasMarkedBit(int32 Data, int32 NumBits);
	uint8 GetValidValue(class UEnum* Enum, uint8 EnumeratorValue);
	int32 GetUnmarkedBit(int32 Data, int32 StartIdx, int32 NumBits, bool bRandom);
	int32 GetRandomUnmarkedBit(int32 Data, int32 StartIdx, int32 NumBits);
	int32 GetFirstUnmarkedBit(int32 Data, int32 StartIdx, int32 NumBits);
	uint8 GetEnumeratorValueFromIndex(class UEnum* Enum, uint8 EnumeratorIndex);
	class FString GetEnumeratorUserFriendlyName(class UEnum* Enum, uint8 EnumeratorValue);
	class FName GetEnumeratorName(class UEnum* Enum, uint8 EnumeratorValue);
	void ClearBit(int32* Data, int32 Index);
	void ClearAllBits(int32* Data);
	bool BitIsMarked(int32 Data, int32 Index);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetRenderingLibrary
class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetRenderingLibrary");
		return Clss;
	}

	struct FSkelMeshSkinWeightInfo MakeSkinWeightInfo(int32 Bone0, uint8 Weight0, int32 Bone1, uint8 Weight1, int32 Bone2, uint8 Weight2, int32 Bone3, uint8 Weight3);
	void ExportTexture2D(class UObject* WorldContextObject, class UTexture2D* Texture, const class FString& FilePath, const class FString& Filename);
	void ExportRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const class FString& FilePath, const class FString& Filename);
	void EndDrawCanvasToRenderTarget(class UObject* WorldContextObject, struct FDrawToRenderTargetContext& Context);
	void DrawMaterialToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UMaterialInterface* Material);
	class UTextureRenderTarget2D* CreateRenderTarget2D(class UObject* WorldContextObject, int32 Width, int32 Height);
	void ClearRenderTarget2D(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, const struct FLinearColor& ClearColor);
	void BreakSkinWeightInfo(const struct FSkelMeshSkinWeightInfo& InWeight, int32* Bone0, uint8* Weight0, int32* Bone1, uint8* Weight1, int32* Bone2, uint8* Weight2, int32* Bone3, uint8* Weight3);
	void BeginDrawCanvasToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* TextureRenderTarget, class UCanvas** Canvas, struct FVector2D* Size, struct FDrawToRenderTargetContext* Context);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetStringLibrary
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetStringLibrary");
		return Clss;
	}

	class FString TrimTrailing(const class FString& SourceString);
	class FString Trim(const class FString& SourceString);
	class FString ToUpper(const class FString& SourceString);
	class FString ToLower(const class FString& SourceString);
	class FString TimeSecondsToString(float InSeconds);
	bool StartsWith(const class FString& SourceString, const class FString& InPrefix, enum class ESearchCase SearchCase);
	bool Split(const class FString& SourceString, const class FString& InStr, class FString* LeftS, class FString* RightS, enum class ESearchCase SearchCase, enum class ESearchDir SearchDir);
	class FString RightPad(const class FString& SourceString, int32 ChCount);
	class FString RightChop(const class FString& SourceString, int32 Count);
	class FString Right(const class FString& SourceString, int32 Count);
	class FString Reverse(const class FString& SourceString);
	int32 ReplaceInline(class FString& SourceString, const class FString& SearchText, const class FString& ReplacementText, enum class ESearchCase SearchCase);
	class FString Replace(const class FString& SourceString, const class FString& From, const class FString& To, enum class ESearchCase SearchCase);
	TArray<class FString> ParseIntoArray(const class FString& SourceString, const class FString& Delimiter, bool CullEmptyStrings);
	bool NotEqual_StrStr(const class FString& A, const class FString& B);
	bool NotEqual_StriStri(const class FString& A, const class FString& B);
	class FString Mid(const class FString& SourceString, int32 Start, int32 Count);
	bool MatchesWildcard(const class FString& SourceString, const class FString& Wildcard, enum class ESearchCase SearchCase);
	int32 Len(const class FString& S);
	class FString LeftPad(const class FString& SourceString, int32 ChCount);
	class FString LeftChop(const class FString& SourceString, int32 Count);
	class FString Left(const class FString& SourceString, int32 Count);
	class FString JoinStringArray(TArray<class FString>& SourceArray, const class FString& Separator);
	bool IsNumeric(const class FString& SourceString);
	class FString GetSubstring(const class FString& SourceString, int32 StartIndex, int32 Length);
	int32 GetCharacterAsNumber(const class FString& SourceString, int32 Index);
	TArray<class FString> GetCharacterArrayFromString(const class FString& SourceString);
	int32 FindSubstring(const class FString& SearchIn, const class FString& Substring, bool bUseCase, bool bSearchFromEnd, int32 StartPosition);
	bool EqualEqual_StrStr(const class FString& A, const class FString& B);
	bool EqualEqual_StriStri(const class FString& A, const class FString& B);
	bool EndsWith(const class FString& SourceString, const class FString& InSuffix, enum class ESearchCase SearchCase);
	int32 CullArray(const class FString& SourceString, TArray<class FString>* InArray);
	class FString Conv_VectorToString(const struct FVector& InVec);
	class FString Conv_Vector2dToString(const struct FVector2D& InVec);
	class FString Conv_TransformToString(struct FTransform& InTrans);
	void Conv_StringToVector2D(const class FString& InString, struct FVector2D* OutConvertedVector2D, bool* OutIsValid);
	void Conv_StringToVector(const class FString& InString, struct FVector* OutConvertedVector, bool* OutIsValid);
	void Conv_StringToRotator(const class FString& InString, struct FRotator* OutConvertedRotator, bool* OutIsValid);
	class FName Conv_StringToName(const class FString& InString);
	int32 Conv_StringToInt(const class FString& InString);
	float Conv_StringToFloat(const class FString& InString);
	void Conv_StringToColor(const class FString& InString, struct FLinearColor* OutConvertedColor, bool* OutIsValid);
	class FString Conv_RotatorToString(const struct FRotator& InRot);
	class FString Conv_ObjectToString(class UObject* InObj);
	class FString Conv_NameToString(class FName InName);
	class FString Conv_IntVectorToString(const struct FIntVector& InIntVec);
	class FString Conv_IntToString(int32 InInt);
	class FString Conv_FloatToString(float InFloat);
	class FString Conv_ColorToString(const struct FLinearColor& InColor);
	class FString Conv_ByteToString(uint8 InByte);
	class FString Conv_BoolToString(bool InBool);
	bool Contains(const class FString& SearchIn, const class FString& Substring, bool bUseCase, bool bSearchFromEnd);
	class FString Concat_StrStr(const class FString& A, const class FString& B);
	class FString BuildString_Vector2d(const class FString& AppendTo, const class FString& Prefix, const struct FVector2D& InVector2D, const class FString& Suffix);
	class FString BuildString_Vector(const class FString& AppendTo, const class FString& Prefix, const struct FVector& InVector, const class FString& Suffix);
	class FString BuildString_Rotator(const class FString& AppendTo, const class FString& Prefix, const struct FRotator& InRot, const class FString& Suffix);
	class FString BuildString_Object(const class FString& AppendTo, const class FString& Prefix, class UObject* InObj, const class FString& Suffix);
	class FString BuildString_Name(const class FString& AppendTo, const class FString& Prefix, class FName InName, const class FString& Suffix);
	class FString BuildString_IntVector(const class FString& AppendTo, const class FString& Prefix, const struct FIntVector& InIntVector, const class FString& Suffix);
	class FString BuildString_Int(const class FString& AppendTo, const class FString& Prefix, int32 InInt, const class FString& Suffix);
	class FString BuildString_Float(const class FString& AppendTo, const class FString& Prefix, float InFloat, const class FString& Suffix);
	class FString BuildString_Color(const class FString& AppendTo, const class FString& Prefix, const struct FLinearColor& InColor, const class FString& Suffix);
	class FString BuildString_Bool(const class FString& AppendTo, const class FString& Prefix, bool InBool, const class FString& Suffix);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetStringTableLibrary
class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetStringTableLibrary");
		return Clss;
	}

	bool IsRegisteredTableId(class FName TableId);
	bool IsRegisteredTableEntry(class FName TableId, const class FString& Key);
	class FString GetTableNamespace(class FName TableId);
	class FString GetTableEntrySourceString(class FName TableId, const class FString& Key);
	class FString GetTableEntryMetaData(class FName TableId, const class FString& Key, class FName MetaDataId);
	TArray<class FName> GetRegisteredStringTables();
	TArray<class FName> GetMetaDataIdsFromStringTableEntry(class FName TableId, const class FString& Key);
	TArray<class FString> GetKeysFromStringTable(class FName TableId);
};

// 0x0 (0x28 - 0x28)
// Class Engine.KismetTextLibrary
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("KismetTextLibrary");
		return Clss;
	}

	class FText TextTrimTrailing(class FText& InText);
	class FText TextTrimPrecedingAndTrailing(class FText& InText);
	class FText TextTrimPreceding(class FText& InText);
	class FText TextToUpper(class FText& InText);
	class FText TextToLower(class FText& InText);
	bool TextIsTransient(class FText& InText);
	bool TextIsFromStringTable(class FText& Text);
	bool TextIsEmpty(class FText& InText);
	bool TextIsCultureInvariant(class FText& InText);
	class FText TextFromStringTable(class FName TableId, const class FString& Key);
	bool StringTableIdAndKeyFromText(class FText Text, class FName* OutTableId, class FString* OutKey);
	bool NotEqual_TextText(class FText& A, class FText& B);
	bool NotEqual_IgnoreCase_TextText(class FText& A, class FText& B);
	class FText GetEmptyText();
	class FText Format(class FText InPattern, const TArray<struct FFormatArgumentData>& InArgs);
	bool FindTextInLocalizationTable(const class FString& Namespace, const class FString& Key, class FText* OutText);
	bool EqualEqual_TextText(class FText& A, class FText& B);
	bool EqualEqual_IgnoreCase_TextText(class FText& A, class FText& B);
	class FText Conv_VectorToText(const struct FVector& InVec);
	class FText Conv_Vector2dToText(const struct FVector2D& InVec);
	class FText Conv_TransformToText(struct FTransform& InTrans);
	class FString Conv_TextToString(class FText& InText);
	class FText Conv_StringToText(const class FString& InString);
	class FText Conv_RotatorToText(const struct FRotator& InRot);
	class FText Conv_ObjectToText(class UObject* InObj);
	class FText Conv_NameToText(class FName InName);
	class FText Conv_IntToText(int32 Value, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits);
	class FText Conv_FloatToText(float Value, enum class ERoundingMode RoundingMode, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits, int32 MinimumFractionalDigits, int32 MaximumFractionalDigits);
	class FText Conv_ColorToText(const struct FLinearColor& InColor);
	class FText Conv_ByteToText(uint8 Value);
	class FText Conv_BoolToText(bool InBool);
	class FText AsTimeZoneTime_DateTime(struct FDateTime& InDateTime, const class FString& InTimeZone);
	class FText AsTimeZoneDateTime_DateTime(struct FDateTime& InDateTime, const class FString& InTimeZone);
	class FText AsTimeZoneDate_DateTime(struct FDateTime& InDateTime, const class FString& InTimeZone);
	class FText AsTimespan_Timespan(struct FTimespan& InTimespan);
	class FText AsTime_DateTime(struct FDateTime& In);
	class FText AsPercent_Float(float Value, enum class ERoundingMode RoundingMode, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits, int32 MinimumFractionalDigits, int32 MaximumFractionalDigits);
	class FText AsDateTime_DateTime(struct FDateTime& In);
	class FText AsDate_DateTime(struct FDateTime& InDateTime);
	class FText AsCurrencyBase(int32 BaseValue, const class FString& CurrencyCode);
	class FText AsCurrency_Integer(int32 Value, enum class ERoundingMode RoundingMode, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits, int32 MinimumFractionalDigits, int32 MaximumFractionalDigits, const class FString& CurrencyCode);
	class FText AsCurrency_Float(float Value, enum class ERoundingMode RoundingMode, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits, int32 MinimumFractionalDigits, int32 MaximumFractionalDigits, const class FString& CurrencyCode);
};

// 0x0 (0x28 - 0x28)
// Class Engine.MeshVertexPainterKismetLibrary
class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MeshVertexPainterKismetLibrary");
		return Clss;
	}

	void RemovePaintedVertices(class UStaticMeshComponent* StaticMeshComponent);
	void PaintVerticesSingleColor(class UStaticMeshComponent* StaticMeshComponent, struct FLinearColor& FillColor, bool bConvertToSRGB);
	void PaintVerticesLerpAlongAxis(class UStaticMeshComponent* StaticMeshComponent, struct FLinearColor& StartColor, struct FLinearColor& EndColor, enum class EVertexPaintAxis Axis, bool bConvertToSRGB);
};

// 0x0 (0x28 - 0x28)
// Class Engine.StereoLayerFunctionLibrary
class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StereoLayerFunctionLibrary");
		return Clss;
	}

	void ShowSplashScreen();
	void SetSplashScreen(class UTexture* Texture, const struct FVector2D& Scale, const struct FVector2D& Offset, bool bShowLoadingMovie, bool bShowOnSet);
	void HideSplashScreen();
	void EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);
};

// 0x0 (0x28 - 0x28)
// Class Engine.VisualLoggerKismetLibrary
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VisualLoggerKismetLibrary");
		return Clss;
	}

	void LogText(class UObject* WorldContextObject, const class FString& Text, class FName LogCategory);
	void LogLocation(class UObject* WorldContextObject, const struct FVector& Location, const class FString& Text, const struct FLinearColor& ObjectColor, float Radius, class FName LogCategory);
	void LogBox(class UObject* WorldContextObject, const struct FBox& BoxShape, const class FString& Text, const struct FLinearColor& ObjectColor, class FName LogCategory);
};

// 0x10 (0x38 - 0x28)
// Class Engine.PoseWatch
class UPoseWatch : public UObject
{
public:
	class UEdGraphNode*                          Node;                                              // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                PoseWatchColour;                                   // 0x30(0x4)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1317[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PoseWatch");
		return Clss;
	}

};

// 0x70 (0x3A0 - 0x330)
// Class Engine.AnimBlueprintGeneratedClass
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{
public:
	uint8                                        Pad_1318[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FBakedAnimationStateMachine>   BakedStateMachines;                                // 0x338(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class USkeleton*                             TargetSkeleton;                                    // 0x348(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimNotifyEvent>              AnimNotifies;                                      // 0x350(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                        RootAnimNodeIndex;                                 // 0x360(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1319[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                OrderedSavedPoseIndices;                           // 0x368(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_131A[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          SyncGroupNames;                                    // 0x390(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimBlueprintGeneratedClass");
		return Clss;
	}

};

// 0x360 (0x388 - 0x28)
// Class Engine.BodySetup
class UBodySetup : public UObject
{
public:
	struct FKAggregateGeom                       AggGeom;                                           // 0x28(0x48)(Edit, NativeAccessSpecifierPublic)
	class FName                                  BoneName;                                          // 0x70(0x8)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPhysicsType                      PhysicsType;                                       // 0x78(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_131B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bAlwaysFullAnimWeight : 1;                         // Mask: 0x1, PropSize: 0x10x7C(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bConsiderForBounds : 1;                            // Mask: 0x2, PropSize: 0x10x7C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMeshCollideAll : 1;                               // Mask: 0x4, PropSize: 0x10x7C(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDoubleSidedGeometry : 1;                          // Mask: 0x8, PropSize: 0x10x7C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGenerateNonMirroredCollision : 1;                 // Mask: 0x10, PropSize: 0x10x7C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSharedCookedData : 1;                             // Mask: 0x20, PropSize: 0x10x7C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGenerateMirroredCollision : 1;                    // Mask: 0x40, PropSize: 0x10x7C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_120 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_131C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPhysicalMaterial*                     PhysMaterial;                                      // 0x80(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EBodyCollisionResponse            CollisionReponse;                                  // 0x88(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECollisionTraceFlag               CollisionTraceFlag;                                // 0x89(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_131D[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBodyInstance                         DefaultInstance;                                   // 0x90(0x220)(Edit, NativeAccessSpecifierPublic)
	struct FWalkableSlopeOverride                WalkableSlopeOverride;                             // 0x2B0(0x10)(Edit, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                        BuildScale;                                        // 0x2C0(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               BuildScale3D;                                      // 0x2C4(0xC)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_131E[0xB8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BodySetup");
		return Clss;
	}

};

// 0x38 (0x3C0 - 0x388)
// Class Engine.BodySetup2D
class UBodySetup2D : public UBodySetup
{
public:
	struct FAggregateGeometry2D                  AggGeom2D;                                         // 0x388(0x30)(NativeAccessSpecifierPublic)
	uint8                                        Pad_131F[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BodySetup2D");
		return Clss;
	}

};

// 0xE8 (0x110 - 0x28)
// Class Engine.PhysicsAsset
class UPhysicsAsset : public UObject
{
public:
	TArray<int32>                                BoundsBodies;                                      // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USkeletalBodySetup*>            SkeletalBodySetups;                                // 0x38(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UPhysicsConstraintTemplate*>    ConstraintSetup;                                   // 0x48(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bUseAsyncScene : 1;                                // Mask: 0x1, PropSize: 0x10x58(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_121 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1320[0xA7];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UBodySetup*>                    BodySetup;                                         // 0x100(0x10)(ExportObject, ZeroConstructor, Deprecated, ContainsInstancedReference, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsAsset");
		return Clss;
	}

};

// 0x18 (0x3A0 - 0x388)
// Class Engine.SkeletalBodySetup
class USkeletalBodySetup : public UBodySetup
{
public:
	TArray<struct FPhysicalAnimationProfile>     PhysicalAnimationData;                             // 0x388(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1321[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkeletalBodySetup");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.BoneMaskFilter
class UBoneMaskFilter : public UObject
{
public:
	TArray<struct FInputBlendPose>               BlendPoses;                                        // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BoneMaskFilter");
		return Clss;
	}

};

// 0x28 (0x50 - 0x28)
// Class Engine.BookMark
class UBookMark : public UObject
{
public:
	struct FVector                               Location;                                          // 0x28(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              Rotation;                                          // 0x34(0xC)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class FString>                        HiddenLevels;                                      // 0x40(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BookMark");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.BookMark2D
class UBookMark2D : public UObject
{
public:
	float                                        Zoom2D;                                            // 0x28(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                             Location;                                          // 0x2C(0x8)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1322[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BookMark2D");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.Breakpoint
class UBreakpoint : public UObject
{
public:
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x28(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_122 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1323[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UEdGraphNode*                          Node;                                              // 0x30(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bStepOnce : 1;                                     // Mask: 0x1, PropSize: 0x10x38(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bStepOnce_WasPreviouslyDisabled : 1;               // Mask: 0x2, PropSize: 0x10x38(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bStepOnce_RemoveAfterHit : 1;                      // Mask: 0x4, PropSize: 0x10x38(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1324[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Breakpoint");
		return Clss;
	}

};

// 0x58 (0x80 - 0x28)
// Class Engine.BrushBuilder
class UBrushBuilder : public UObject
{
public:
	class FString                                BitmapFilename;                                    // 0x28(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                Tooltip;                                           // 0x38(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        NotifyBadParams : 1;                               // Mask: 0x1, PropSize: 0x10x48(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_123 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1325[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FVector>                       Vertices;                                          // 0x50(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FBuilderPoly>                  Polys;                                             // 0x60(0x10)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FName                                  Layer;                                             // 0x70(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        MergeCoplanars : 1;                                // Mask: 0x1, PropSize: 0x10x78(0x1)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1326[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("BrushBuilder");
		return Clss;
	}

};

// 0x2A8 (0x2D0 - 0x28)
// Class Engine.ButtonStyleAsset
class UButtonStyleAsset : public UObject
{
public:
	struct FButtonStyle                          ButtonStyle;                                       // 0x28(0x2A8)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ButtonStyleAsset");
		return Clss;
	}

};

// 0x508 (0x530 - 0x28)
// Class Engine.CameraAnim
class UCameraAnim : public UObject
{
public:
	class UInterpGroup*                          CameraInterpGroup;                                 // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AnimLength;                                        // 0x30(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                  BoundingBox;                                       // 0x34(0x1C)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        bRelativeToInitialTransform : 1;                   // Mask: 0x1, PropSize: 0x10x50(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRelativeToInitialFOV : 1;                         // Mask: 0x2, PropSize: 0x10x50(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_124 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1327[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BaseFOV;                                           // 0x54(0x4)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1328[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPostProcessSettings                  BasePostProcessSettings;                           // 0x60(0x4C0)(NativeAccessSpecifierPublic)
	float                                        BasePostProcessBlendWeight;                        // 0x520(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1329[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CameraAnim");
		return Clss;
	}

};

// 0xE8 (0x110 - 0x28)
// Class Engine.CameraAnimInst
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                           CamAnim;                                           // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterpGroupInst*                      InterpGroupInst;                                   // 0x30(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_132A[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        PlayRate;                                          // 0x50(0x4)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_132B[0x14];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UInterpTrackMove*                      MoveTrack;                                         // 0x68(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterpTrackInstMove*                  MoveInst;                                          // 0x70(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECameraAnimPlaySpace              PlaySpace;                                         // 0x78(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_132C[0x97];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CameraAnimInst");
		return Clss;
	}

	void Stop(bool bImmediate);
	void SetScale(float NewDuration);
	void SetDuration(float NewDuration);
};

// 0x20 (0x48 - 0x28)
// Class Engine.CameraModifier
class UCameraModifier : public UObject
{
public:
	uint8                                        bDebug : 1;                                        // Mask: 0x1, PropSize: 0x10x28(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bExclusive : 1;                                    // Mask: 0x2, PropSize: 0x10x28(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_125 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_132E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        Priority;                                          // 0x2C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_132F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class APlayerCameraManager*                  CameraOwner;                                       // 0x30(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AlphaInTime;                                       // 0x38(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AlphaOutTime;                                      // 0x3C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        Alpha;                                             // 0x40(0x4)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1330[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CameraModifier");
		return Clss;
	}

	bool IsDisabled();
	class AActor* GetViewTarget();
	void EnableModifier();
	void DisableModifier(bool bImmediate);
	void BlueprintModifyPostProcess(float DeltaTime, float* PostProcessBlendWeight, struct FPostProcessSettings* PostProcessSettings);
	void BlueprintModifyCamera(float DeltaTime, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float FOV, struct FVector* NewViewLocation, struct FRotator* NewViewRotation, float* NewFOV);
};

// 0x18 (0x60 - 0x48)
// Class Engine.CameraModifier_CameraShake
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	TArray<class UCameraShake*>                  ActiveShakes;                                      // 0x48(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        SplitScreenShakeScale;                             // 0x58(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1331[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CameraModifier_CameraShake");
		return Clss;
	}

};

// 0x2A8 (0x2D0 - 0x28)
// Class Engine.Canvas
class UCanvas : public UObject
{
public:
	float                                        OrgX;                                              // 0x28(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OrgY;                                              // 0x2C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ClipX;                                             // 0x30(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ClipY;                                             // 0x34(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                DrawColor;                                         // 0x38(0x4)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCenterX : 1;                                      // Mask: 0x1, PropSize: 0x10x3C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCenterY : 1;                                      // Mask: 0x2, PropSize: 0x10x3C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNoSmooth : 1;                                     // Mask: 0x4, PropSize: 0x10x3C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_126 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1337[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SizeX;                                             // 0x40(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SizeY;                                             // 0x44(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1338[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FPlane                                ColorModulate;                                     // 0x50(0x10)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UTexture2D*                            DefaultTexture;                                    // 0x60(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                            GradientTexture0;                                  // 0x68(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReporterGraph*                        ReporterGraph;                                     // 0x70(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1339[0x258];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Canvas");
		return Clss;
	}

	struct FVector2D K2_TextSize(class UFont* RenderFont, const class FString& RenderText, const struct FVector2D& Scale);
	struct FVector2D K2_StrLen(class UFont* RenderFont, const class FString& RenderText);
	struct FVector K2_Project(const struct FVector& WorldLocation);
	void K2_DrawTriangle(class UTexture* RenderTexture, const TArray<struct FCanvasUVTri>& Triangles);
	void K2_DrawTexture(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, enum class EBlendMode BlendMode, float Rotation, const struct FVector2D& PivotPoint);
	void K2_DrawText(class UFont* RenderFont, const class FString& RenderText, const struct FVector2D& ScreenPosition, const struct FLinearColor& RenderColor, float Kerning, const struct FLinearColor& ShadowColor, const struct FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const struct FLinearColor& OutlineColor);
	void K2_DrawPolygon(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& Radius, int32 NumberOfSides, const struct FLinearColor& RenderColor);
	void K2_DrawMaterialTriangle(class UMaterialInterface* RenderMaterial, const TArray<struct FCanvasUVTri>& Triangles);
	void K2_DrawMaterial(class UMaterialInterface* RenderMaterial, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, float Rotation, const struct FVector2D& PivotPoint);
	void K2_DrawLine(const struct FVector2D& ScreenPositionA, const struct FVector2D& ScreenPositionB, float Thickness, const struct FLinearColor& RenderColor);
	void K2_DrawBox(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness);
	void K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, const struct FVector2D& BorderScale, const struct FVector2D& BackgroundScale, float Rotation, const struct FVector2D& PivotPoint, const struct FVector2D& CornerSize);
	void K2_Deproject(const struct FVector2D& ScreenPosition, struct FVector* WorldOrigin, struct FVector* WorldDirection);
};

// 0x40 (0x68 - 0x28)
// Class Engine.Channel
class UChannel : public UObject
{
public:
	class UNetConnection*                        Connection;                                        // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_133A[0x38];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Channel");
		return Clss;
	}

};

// 0x1C8 (0x230 - 0x68)
// Class Engine.ActorChannel
class UActorChannel : public UChannel
{
public:
	class AActor*                                Actor;                                             // 0x68(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_133B[0xE0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UObject*>                       CreateSubObjects;                                  // 0x150(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_133C[0xD0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ActorChannel");
		return Clss;
	}

};

// 0x18 (0x80 - 0x68)
// Class Engine.ControlChannel
class UControlChannel : public UChannel
{
public:
	uint8                                        Pad_133D[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ControlChannel");
		return Clss;
	}

};

// 0x10 (0x78 - 0x68)
// Class Engine.VoiceChannel
class UVoiceChannel : public UChannel
{
public:
	uint8                                        Pad_133E[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VoiceChannel");
		return Clss;
	}

};

// 0x5E0 (0x608 - 0x28)
// Class Engine.CheckBoxStyleAsset
class UCheckBoxStyleAsset : public UObject
{
public:
	struct FCheckBoxStyle                        CheckBoxStyle;                                     // 0x28(0x5E0)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CheckBoxStyleAsset");
		return Clss;
	}

};

// 0x58 (0x80 - 0x28)
// Class Engine.Commandlet
class UCommandlet : public UObject
{
public:
	class FString                                HelpDescription;                                   // 0x28(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                HelpUsage;                                         // 0x38(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                HelpWebLink;                                       // 0x48(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                        HelpParamNames;                                    // 0x58(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                        HelpParamDescriptions;                             // 0x68(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        IsServer : 1;                                      // Mask: 0x1, PropSize: 0x10x78(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        IsClient : 1;                                      // Mask: 0x2, PropSize: 0x10x78(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        IsEditor : 1;                                      // Mask: 0x4, PropSize: 0x10x78(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        LogToConsole : 1;                                  // Mask: 0x8, PropSize: 0x10x78(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        ShowErrorCount : 1;                                // Mask: 0x10, PropSize: 0x10x78(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_133F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Commandlet");
		return Clss;
	}

};

// 0x20 (0xA0 - 0x80)
// Class Engine.PluginCommandlet
class UPluginCommandlet : public UCommandlet
{
public:
	uint8                                        Pad_1340[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PluginCommandlet");
		return Clss;
	}

};

// 0x0 (0x80 - 0x80)
// Class Engine.SmokeTestCommandlet
class USmokeTestCommandlet : public UCommandlet
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SmokeTestCommandlet");
		return Clss;
	}

};

// 0x1C0 (0x1F0 - 0x30)
// Class Engine.CurveLinearColor
class UCurveLinearColor : public UCurveBase
{
public:
	struct FRichCurve                            FloatCurves;                                       // 0x30(0x70)(NativeAccessSpecifierPublic)
	uint8                                        Pad_1341[0x150];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CurveLinearColor");
		return Clss;
	}

	struct FLinearColor GetLinearColorValue(float InTime);
};

// 0x150 (0x180 - 0x30)
// Class Engine.CurveVector
class UCurveVector : public UCurveBase
{
public:
	struct FRichCurve                            FloatCurves;                                       // 0x30(0x70)(NativeAccessSpecifierPublic)
	uint8                                        Pad_1342[0xE0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CurveVector");
		return Clss;
	}

	struct FVector GetVectorValue(float InTime);
};

// 0x0 (0x28 - 0x28)
// Class Engine.CurveEdPresetCurve
class UCurveEdPresetCurve : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CurveEdPresetCurve");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.CurveSourceInterface
class UCurveSourceInterface : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CurveSourceInterface");
		return Clss;
	}

	float GetCurveValue(class FName CurveName);
	void GetCurves(TArray<struct FNamedCurveValue>* OutValues);
	class FName GetBindingName();
};

// 0x58 (0x80 - 0x28)
// Class Engine.CurveTable
class UCurveTable : public UObject
{
public:
	uint8                                        Pad_1344[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CurveTable");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.PreviewCollectionInterface
class UPreviewCollectionInterface : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PreviewCollectionInterface");
		return Clss;
	}

};

// 0x20 (0x48 - 0x28)
// Class Engine.PreviewMeshCollection
class UPreviewMeshCollection : public UDataAsset
{
public:
	uint8                                        Pad_1345[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USkeleton*                             Skeleton;                                          // 0x30(0x8)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPreviewMeshCollectionEntry>   SkeletalMeshes;                                    // 0x38(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PreviewMeshCollection");
		return Clss;
	}

};

// 0x38 (0x60 - 0x28)
// Class Engine.PrimaryAssetLabel
class UPrimaryAssetLabel : public UPrimaryDataAsset
{
public:
	struct FPrimaryAssetRules                    Rules;                                             // 0x28(0x10)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        bLabelAssetsInMyDirectory : 1;                     // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsRuntimeLabel : 1;                               // Mask: 0x2, PropSize: 0x10x38(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_127 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1346[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<TSoftObjectPtr<class UObject>>        ExplicitAssets;                                    // 0x40(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UObject>>         ExplicitBlueprints;                                // 0x50(0x10)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PrimaryAssetLabel");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.TireType
class UTireType : public UDataAsset
{
public:
	float                                        FrictionScale;                                     // 0x28(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1347[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TireType");
		return Clss;
	}

};

// 0x90 (0xB8 - 0x28)
// Class Engine.DestructibleFractureSettings
class UDestructibleFractureSettings : public UObject
{
public:
	int32                                        CellSiteCount;                                     // 0x28(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFractureMaterial                     FractureMaterialDesc;                              // 0x2C(0x24)(Edit, Transient, NoDestructor, NativeAccessSpecifierPublic)
	int32                                        RandomSeed;                                        // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1348[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FVector>                       VoronoiSites;                                      // 0x58(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        OriginalSubmeshCount;                              // 0x68(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1349[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMaterialInterface*>            Materials;                                         // 0x70(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDestructibleChunkParameters>  ChunkParameters;                                   // 0x80(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_134A[0x28];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DestructibleFractureSettings");
		return Clss;
	}

};

// 0x38 (0x70 - 0x38)
// Class Engine.AnimationSettings
class UAnimationSettings : public UDeveloperSettings
{
public:
	int32                                        CompressCommandletVersion;                         // 0x38(0x4)(Edit, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_134B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        KeyEndEffectorsMatchNameArray;                     // 0x40(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimCompress>             DefaultCompressionAlgorithm;                       // 0x50(0x8)(Edit, ZeroConstructor, Config, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAnimationCompressionFormat       RotationCompressionFormat;                         // 0x58(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EAnimationCompressionFormat       TranslationCompressionFormat;                      // 0x59(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_134C[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AlternativeCompressionThreshold;                   // 0x5C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         ForceRecompression;                                // 0x60(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOnlyCheckForMissingSkeletalMeshes;                // 0x61(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bForceBelowThreshold;                              // 0x62(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFirstRecompressUsingCurrentOrDefault;             // 0x63(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRaiseMaxErrorToExisting;                          // 0x64(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTryFixedBitwiseCompression;                       // 0x65(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTryPerTrackBitwiseCompression;                    // 0x66(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTryLinearKeyRemovalCompression;                   // 0x67(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bTryIntervalKeyRemoval;                            // 0x68(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnablePerformanceLog;                             // 0x69(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bStripAnimationDataOnDedicatedServer;              // 0x6A(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_134D[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AnimationSettings");
		return Clss;
	}

};

// 0x68 (0xA0 - 0x38)
// Class Engine.AssetManagerSettings
class UAssetManagerSettings : public UDeveloperSettings
{
public:
	TArray<struct FPrimaryAssetTypeInfo>         PrimaryAssetTypesToScan;                           // 0x38(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FDirectoryPath>                DirectoriesToExclude;                              // 0x48(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FPrimaryAssetRulesOverride>    PrimaryAssetRules;                                 // 0x58(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                         bOnlyCookProductionAssets;                         // 0x68(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_134E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FAssetManagerRedirect>         PrimaryAssetIdRedirects;                           // 0x70(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FAssetManagerRedirect>         PrimaryAssetTypeRedirects;                         // 0x80(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FAssetManagerRedirect>         AssetPathRedirects;                                // 0x90(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AssetManagerSettings");
		return Clss;
	}

};

// 0x70 (0xA8 - 0x38)
// Class Engine.AudioSettings
class UAudioSettings : public UDeveloperSettings
{
public:
	struct FStringAssetReference                 DefaultSoundClassName;                             // 0x38(0x10)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                 DefaultSoundConcurrencyName;                       // 0x48(0x10)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                 DefaultBaseSoundMix;                               // 0x58(0x10)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStringAssetReference                 VoiPSoundClass;                                    // 0x68(0x10)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LowPassFilterResonance;                            // 0x78(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaximumConcurrentStreams;                          // 0x7C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAudioQualitySettings>         QualityLevels;                                     // 0x80(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                        bAllowVirtualizedSounds : 1;                       // Mask: 0x1, PropSize: 0x10x90(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableMasterEQ : 1;                              // Mask: 0x2, PropSize: 0x10x90(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableMasterReverb : 1;                          // Mask: 0x4, PropSize: 0x10x90(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowCenterChannel3DPanning : 1;                  // Mask: 0x8, PropSize: 0x10x90(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_128 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_134F[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                DialogueFilenameFormat;                            // 0x98(0x10)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("AudioSettings");
		return Clss;
	}

};

// 0x120 (0x158 - 0x38)
// Class Engine.CollisionProfile
class UCollisionProfile : public UDeveloperSettings
{
public:
	TArray<struct FCollisionResponseTemplate>    Profiles;                                          // 0x38(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	TArray<struct FCustomChannelSetup>           DefaultChannelResponses;                           // 0x48(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	TArray<struct FCustomProfile>                EditProfiles;                                      // 0x58(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	TArray<struct FRedirector>                   ProfileRedirects;                                  // 0x68(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	TArray<struct FRedirector>                   CollisionChannelRedirects;                         // 0x78(0x10)(ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1350[0xD0];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CollisionProfile");
		return Clss;
	}

};

// 0x38 (0x70 - 0x38)
// Class Engine.StreamingSettings
class UStreamingSettings : public UDeveloperSettings
{
public:
	uint8                                        AsyncLoadingThreadEnabled : 1;                     // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        WarnIfTimeLimitExceeded : 1;                       // Mask: 0x2, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_129 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1351[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TimeLimitExceededMultiplier;                       // 0x3C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        TimeLimitExceededMinTime;                          // 0x40(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MinBulkDataSizeForAsyncLoading;                    // 0x44(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        AsyncIOBandwidthLimit;                             // 0x48(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        UseBackgroundLevelStreaming : 1;                   // Mask: 0x1, PropSize: 0x10x4C(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        AsyncLoadingUseFullTimeLimit : 1;                  // Mask: 0x2, PropSize: 0x10x4C(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_12A : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1352[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AsyncLoadingTimeLimit;                             // 0x50(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        PriorityAsyncLoadingExtraTime;                     // 0x54(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LevelStreamingActorsUpdateTimeLimit;               // 0x58(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        LevelStreamingComponentsRegistrationGranularity;   // 0x5C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                        LevelStreamingUnregisterComponentsTimeLimit;       // 0x60(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        LevelStreamingComponentsUnregistrationGranularity; // 0x64(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        EventDrivenLoaderEnabled : 1;                      // Mask: 0x1, PropSize: 0x10x68(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1353[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StreamingSettings");
		return Clss;
	}

};

// 0x20 (0x58 - 0x38)
// Class Engine.GarbageCollectionSettings
class UGarbageCollectionSettings : public UDeveloperSettings
{
public:
	float                                        TimeBetweenPurgingPendingKillObjects;              // 0x38(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        FlushStreamingOnGC : 1;                            // Mask: 0x1, PropSize: 0x10x3C(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        AllowParallelGC : 1;                               // Mask: 0x2, PropSize: 0x10x3C(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        CreateGCClusters : 1;                              // Mask: 0x4, PropSize: 0x10x3C(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        MergeGCClusters : 1;                               // Mask: 0x8, PropSize: 0x10x3C(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        ActorClusteringEnabled : 1;                        // Mask: 0x10, PropSize: 0x10x3C(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BlueprintClusteringEnabled : 1;                    // Mask: 0x20, PropSize: 0x10x3C(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        UseDisregardForGCOnDedicatedServers : 1;           // Mask: 0x40, PropSize: 0x10x3C(0x1)(Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        BitPad_12B : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1354[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumRetriesBeforeForcingGC;                         // 0x40(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxObjectsNotConsideredByGC;                       // 0x44(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        SizeOfPermanentObjectPool;                         // 0x48(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxObjectsInGame;                                  // 0x4C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                        MaxObjectsInEditor;                                // 0x50(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1355[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("GarbageCollectionSettings");
		return Clss;
	}

};

// 0x8 (0x40 - 0x38)
// Class Engine.MeshSimplificationSettings
class UMeshSimplificationSettings : public UDeveloperSettings
{
public:
	class FName                                  MeshReductionModuleName;                           // 0x38(0x8)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MeshSimplificationSettings");
		return Clss;
	}

};

// 0x10 (0x48 - 0x38)
// Class Engine.NetworkSettings
class UNetworkSettings : public UDeveloperSettings
{
public:
	uint8                                        bVerifyPeer : 1;                                   // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableMultiplayerWorldOriginRebasing : 1;         // Mask: 0x2, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_12C : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1356[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxRepArraySize;                                   // 0x3C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxRepArrayMemory;                                 // 0x40(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1357[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NetworkSettings");
		return Clss;
	}

};

// 0x78 (0xB0 - 0x38)
// Class Engine.PhysicsSettings
class UPhysicsSettings : public UDeveloperSettings
{
public:
	float                                        DefaultGravityZ;                                   // 0x38(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DefaultTerminalVelocity;                           // 0x3C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DefaultFluidFriction;                              // 0x40(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SimulateScratchMemorySize;                         // 0x44(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        RagdollAggregateThreshold;                         // 0x48(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TriangleMeshTriangleMinAreaThreshold;              // 0x4C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnableAsyncScene;                                 // 0x50(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnableShapeSharing;                               // 0x51(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnablePCM;                                        // 0x52(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bWarnMissingLocks;                                 // 0x53(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bEnable2DPhysics;                                  // 0x54(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESettingsLockedAxis               LockedAxis;                                        // 0x55(0x1)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESettingsDOF                      DefaultDegreesOfFreedom;                           // 0x56(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1358[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BounceThresholdVelocity;                           // 0x58(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EFrictionCombineMode              FrictionCombineMode;                               // 0x5C(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EFrictionCombineMode              RestitutionCombineMode;                            // 0x5D(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1359[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxAngularVelocity;                                // 0x60(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDepenetrationVelocity;                          // 0x64(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ContactOffsetMultiplier;                           // 0x68(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinContactOffset;                                  // 0x6C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxContactOffset;                                  // 0x70(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSimulateSkeletalMeshOnDedicatedServer;            // 0x74(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECollisionTraceFlag               DefaultShapeComplexity;                            // 0x75(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDefaultHasComplexCollision;                       // 0x76(0x1)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSuppressFaceRemapTable;                           // 0x77(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSupportUVFromHitResults;                          // 0x78(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDisableActiveActors;                              // 0x79(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDisableCCD;                                       // 0x7A(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_135A[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxPhysicsDeltaTime;                               // 0x7C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSubstepping;                                      // 0x80(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSubsteppingAsync;                                 // 0x81(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_135B[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxSubstepDeltaTime;                               // 0x84(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxSubsteps;                                       // 0x88(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SyncSceneSmoothingFactor;                          // 0x8C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AsyncSceneSmoothingFactor;                         // 0x90(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InitialAverageFrameRate;                           // 0x94(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        PhysXTreeRebuildRate;                              // 0x98(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_135C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FPhysicalSurfaceName>          PhysicalSurfaces;                                  // 0xA0(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsSettings");
		return Clss;
	}

};

// 0x80 (0xB8 - 0x38)
// Class Engine.RendererSettings
class URendererSettings : public UDeveloperSettings
{
public:
	uint8                                        bMobileHDR : 1;                                    // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobileDisableVertexFog : 1;                       // Mask: 0x2, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_12D : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_135D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxMobileCascades;                                 // 0x3C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMobileMSAASampleCount            MobileMSAASampleCount;                             // 0x40(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_135E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bDiscardUnusedQualityLevels : 1;                   // Mask: 0x1, PropSize: 0x10x44(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOcclusionCulling : 1;                             // Mask: 0x2, PropSize: 0x10x44(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_12E : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_135F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinScreenRadiusForLights;                          // 0x48(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinScreenRadiusForEarlyZPass;                      // 0x4C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinScreenRadiusForCSMdepth;                        // 0x50(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPrecomputedVisibilityWarning : 1;                 // Mask: 0x1, PropSize: 0x10x54(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTextureStreaming : 1;                             // Mask: 0x2, PropSize: 0x10x54(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseDXT5NormalMaps : 1;                            // Mask: 0x4, PropSize: 0x10x54(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClearCoatEnableSecondNormal : 1;                  // Mask: 0x8, PropSize: 0x10x54(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_12F : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1360[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        ReflectionCaptureResolution;                       // 0x58(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        ReflectionEnvironmentLightmapMixBasedOnRoughness : 1; // Mask: 0x1, PropSize: 0x10x5C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForwardShading : 1;                               // Mask: 0x2, PropSize: 0x10x5C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bVertexFoggingForOpaque : 1;                       // Mask: 0x4, PropSize: 0x10x5C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowStaticLighting : 1;                          // Mask: 0x8, PropSize: 0x10x5C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseNormalMapsForStaticLighting : 1;               // Mask: 0x10, PropSize: 0x10x5C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGenerateMeshDistanceFields : 1;                   // Mask: 0x20, PropSize: 0x10x5C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEightBitMeshDistanceFields : 1;                   // Mask: 0x40, PropSize: 0x10x5C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGenerateLandscapeGIData : 1;                      // Mask: 0x80, PropSize: 0x10x5C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCompressMeshDistanceFields : 1;                   // Mask: 0x1, PropSize: 0x10x5D(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_130 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1361[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TessellationAdaptivePixelsPerTriangle;             // 0x60(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSeparateTranslucency : 1;                         // Mask: 0x1, PropSize: 0x10x64(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_131 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1362[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ETranslucentSortPolicy            TranslucentSortPolicy;                             // 0x68(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1363[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               TranslucentSortAxis;                               // 0x6C(0xC)(Edit, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECustomDepthStencil               CustomDepthStencil;                                // 0x78(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1364[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bCustomDepthTaaJitter : 1;                         // Mask: 0x1, PropSize: 0x10x7C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDefaultFeatureBloom : 1;                          // Mask: 0x2, PropSize: 0x10x7C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDefaultFeatureAmbientOcclusion : 1;               // Mask: 0x4, PropSize: 0x10x7C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDefaultFeatureAmbientOcclusionStaticFraction : 1; // Mask: 0x8, PropSize: 0x10x7C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDefaultFeatureAutoExposure : 1;                   // Mask: 0x10, PropSize: 0x10x7C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_132 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1365[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAutoExposureMethodUI             DefaultFeatureAutoExposure;                        // 0x80(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1366[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bDefaultFeatureMotionBlur : 1;                     // Mask: 0x1, PropSize: 0x10x84(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDefaultFeatureLensFlare : 1;                      // Mask: 0x2, PropSize: 0x10x84(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_133 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1367[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAntiAliasingMethod               DefaultFeatureAntiAliasing;                        // 0x88(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1368[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bStencilForLODDither : 1;                          // Mask: 0x1, PropSize: 0x10x8C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_134 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1369[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EEarlyZPass                       EarlyZPass;                                        // 0x90(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_136A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bEarlyZPassMovable : 1;                            // Mask: 0x1, PropSize: 0x10x94(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEarlyZPassOnlyMaterialMasking : 1;                // Mask: 0x2, PropSize: 0x10x94(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDBuffer : 1;                                      // Mask: 0x4, PropSize: 0x10x94(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_135 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_136B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EClearSceneOptions                ClearSceneMethod;                                  // 0x98(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_136C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bBasePassOutputsVelocity : 1;                      // Mask: 0x1, PropSize: 0x10x9C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSelectiveBasePassOutputs : 1;                     // Mask: 0x2, PropSize: 0x10x9C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDefaultParticleCutouts : 1;                       // Mask: 0x4, PropSize: 0x10x9C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGlobalClipPlane : 1;                              // Mask: 0x8, PropSize: 0x10x9C(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_136 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_136D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EGBufferFormat                    GBufferFormat;                                     // 0xA0(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_136E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseGPUMorphTargets : 1;                           // Mask: 0x1, PropSize: 0x10xA4(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInstancedStereo : 1;                              // Mask: 0x2, PropSize: 0x10xA4(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMultiView : 1;                                    // Mask: 0x4, PropSize: 0x10xA4(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobileMultiView : 1;                              // Mask: 0x8, PropSize: 0x10xA4(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMonoscopicFarField : 1;                           // Mask: 0x10, PropSize: 0x10xA4(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_137 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_136F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        WireframeCullThreshold;                            // 0xA8(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportStationarySkylight : 1;                    // Mask: 0x1, PropSize: 0x10xAC(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportLowQualityLightmaps : 1;                   // Mask: 0x2, PropSize: 0x10xAC(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportPointLightWholeSceneShadows : 1;           // Mask: 0x4, PropSize: 0x10xAC(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportAtmosphericFog : 1;                        // Mask: 0x8, PropSize: 0x10xAC(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportSkinCacheShaders : 1;                      // Mask: 0x10, PropSize: 0x10xAC(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobileEnableStaticAndCSMShadowReceivers : 1;      // Mask: 0x20, PropSize: 0x10xAC(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobileAllowDistanceFieldShadows : 1;              // Mask: 0x40, PropSize: 0x10xAC(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobileAllowMovableDirectionalLights : 1;          // Mask: 0x80, PropSize: 0x10xAC(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1370[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       MobileNumDynamicPointLights;                       // 0xB0(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bMobileDynamicPointLightsUseStaticBranch : 1;      // Mask: 0x1, PropSize: 0x10xB4(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1371[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RendererSettings");
		return Clss;
	}

};

// 0x8 (0x40 - 0x38)
// Class Engine.RendererOverrideSettings
class URendererOverrideSettings : public UDeveloperSettings
{
public:
	uint8                                        bSupportAllShaderPermutations : 1;                 // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1372[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RendererOverrideSettings");
		return Clss;
	}

};

// 0x130 (0x168 - 0x38)
// Class Engine.UserInterfaceSettings
class UUserInterfaceSettings : public UDeveloperSettings
{
public:
	enum class ERenderFocusRule                  RenderFocusRule;                                   // 0x38(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1373[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FStringClassReference                 DefaultCursor;                                     // 0x40(0x10)(Edit, Config, NativeAccessSpecifierPublic)
	struct FStringClassReference                 TextEditBeamCursor;                                // 0x50(0x10)(Edit, Config, NativeAccessSpecifierPublic)
	struct FStringClassReference                 CrosshairsCursor;                                  // 0x60(0x10)(Edit, Config, NativeAccessSpecifierPublic)
	struct FStringClassReference                 HandCursor;                                        // 0x70(0x10)(Edit, Config, NativeAccessSpecifierPublic)
	struct FStringClassReference                 GrabHandCursor;                                    // 0x80(0x10)(Edit, Config, NativeAccessSpecifierPublic)
	struct FStringClassReference                 GrabHandClosedCursor;                              // 0x90(0x10)(Edit, Config, NativeAccessSpecifierPublic)
	struct FStringClassReference                 SlashedCircleCursor;                               // 0xA0(0x10)(Edit, Config, NativeAccessSpecifierPublic)
	float                                        ApplicationScale;                                  // 0xB0(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EUIScalingRule                    UIScaleRule;                                       // 0xB4(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1374[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FStringClassReference                 CustomScalingRuleClass;                            // 0xB8(0x10)(Edit, Config, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                    UIScaleCurve;                                      // 0xC8(0x78)(Edit, Config, NativeAccessSpecifierPublic)
	bool                                         bLoadWidgetsOnDedicatedServer;                     // 0x140(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1375[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UObject*>                       CursorClasses;                                     // 0x148(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UClass*                                CustomScalingRuleClassInstance;                    // 0x158(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDPICustomScalingRule*                 CustomScalingRule;                                 // 0x160(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("UserInterfaceSettings");
		return Clss;
	}

};

// 0xE8 (0x110 - 0x28)
// Class Engine.DeviceProfileManager
class UDeviceProfileManager : public UObject
{
public:
	TArray<class UObject*>                       Profiles;                                          // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1376[0xD8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DeviceProfileManager");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.DialogueVoice
class UDialogueVoice : public UObject
{
public:
	enum class EGrammaticalGender                Gender;                                            // 0x28(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EGrammaticalNumber                Plurality;                                         // 0x29(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1377[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 LocalizationGUID;                                  // 0x2C(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1378[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DialogueVoice");
		return Clss;
	}

};

// 0x48 (0x70 - 0x28)
// Class Engine.DialogueWave
class UDialogueWave : public UObject
{
public:
	uint8                                        bMature : 1;                                       // Mask: 0x1, PropSize: 0x10x28(0x1)(Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverride_SubtitleOverride : 1;                    // Mask: 0x2, PropSize: 0x10x28(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_138 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1379[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                SpokenText;                                        // 0x30(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                SubtitleOverride;                                  // 0x40(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDialogueContextMapping>       ContextMappings;                                   // 0x50(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                 LocalizationGUID;                                  // 0x60(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DialogueWave");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.Distribution
class UDistribution : public UObject
{
public:
	uint8                                        Pad_137A[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Distribution");
		return Clss;
	}

};

// 0x8 (0x38 - 0x30)
// Class Engine.DistributionFloat
class UDistributionFloat : public UDistribution
{
public:
	uint8                                        bCanBeBaked : 1;                                   // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_139 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bBakedDataSuccesfully : 1;                         // Mask: 0x4, PropSize: 0x10x30(0x1)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_137B[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionFloat");
		return Clss;
	}

};

// 0x8 (0x40 - 0x38)
// Class Engine.DistributionFloatConstant
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                        Constant;                                          // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_137C[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionFloatConstant");
		return Clss;
	}

};

// 0x20 (0x60 - 0x40)
// Class Engine.DistributionFloatParameterBase
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	class FName                                  ParameterName;                                     // 0x40(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinInput;                                          // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxInput;                                          // 0x4C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MinOutput;                                         // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxOutput;                                         // 0x54(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDistributionParamMode            ParamMode;                                         // 0x58(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_137D[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionFloatParameterBase");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.DistributionFloatParticleParameter
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionFloatParticleParameter");
		return Clss;
	}

};

// 0x18 (0x50 - 0x38)
// Class Engine.DistributionFloatConstantCurve
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                     ConstantCurve;                                     // 0x38(0x18)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionFloatConstantCurve");
		return Clss;
	}

};

// 0x8 (0x40 - 0x38)
// Class Engine.DistributionFloatUniform
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                        Min;                                               // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Max;                                               // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionFloatUniform");
		return Clss;
	}

};

// 0x18 (0x50 - 0x38)
// Class Engine.DistributionFloatUniformCurve
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                  ConstantCurve;                                     // 0x38(0x18)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionFloatUniformCurve");
		return Clss;
	}

};

// 0x8 (0x38 - 0x30)
// Class Engine.DistributionVector
class UDistributionVector : public UDistribution
{
public:
	uint8                                        bCanBeBaked : 1;                                   // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsDirty : 1;                                      // Mask: 0x2, PropSize: 0x10x30(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bBakedDataSuccesfully : 1;                         // Mask: 0x4, PropSize: 0x10x30(0x1)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_137E[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionVector");
		return Clss;
	}

};

// 0x18 (0x50 - 0x38)
// Class Engine.DistributionVectorConstant
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                               Constant;                                          // 0x38(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLockAxes : 1;                                     // Mask: 0x1, PropSize: 0x10x44(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_13A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_137F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EDistributionVectorLockFlags      LockedAxes;                                        // 0x48(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1380[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionVectorConstant");
		return Clss;
	}

};

// 0x40 (0x90 - 0x50)
// Class Engine.DistributionVectorParameterBase
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	class FName                                  ParameterName;                                     // 0x50(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               MinInput;                                          // 0x58(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               MaxInput;                                          // 0x64(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               MinOutput;                                         // 0x70(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               MaxOutput;                                         // 0x7C(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDistributionParamMode            ParamModes;                                        // 0x88(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1381[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionVectorParameterBase");
		return Clss;
	}

};

// 0x0 (0x90 - 0x90)
// Class Engine.DistributionVectorParticleParameter
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionVectorParticleParameter");
		return Clss;
	}

};

// 0x20 (0x58 - 0x38)
// Class Engine.DistributionVectorConstantCurve
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                    ConstantCurve;                                     // 0x38(0x18)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLockAxes : 1;                                     // Mask: 0x1, PropSize: 0x10x50(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_13B : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1382[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EDistributionVectorLockFlags      LockedAxes;                                        // 0x54(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1383[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionVectorConstantCurve");
		return Clss;
	}

};

// 0x28 (0x60 - 0x38)
// Class Engine.DistributionVectorUniform
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                               Max;                                               // 0x38(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               Min;                                               // 0x44(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLockAxes : 1;                                     // Mask: 0x1, PropSize: 0x10x50(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_13C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1384[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EDistributionVectorLockFlags      LockedAxes;                                        // 0x54(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDistributionVectorMirrorFlags    MirrorFlags;                                       // 0x55(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1385[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseExtremes : 1;                                  // Mask: 0x1, PropSize: 0x10x58(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1386[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionVectorUniform");
		return Clss;
	}

};

// 0x28 (0x60 - 0x38)
// Class Engine.DistributionVectorUniformCurve
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                ConstantCurve;                                     // 0x38(0x18)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLockAxes1 : 1;                                    // Mask: 0x1, PropSize: 0x10x50(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLockAxes2 : 1;                                    // Mask: 0x2, PropSize: 0x10x50(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_13D : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1387[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EDistributionVectorLockFlags      LockedAxes;                                        // 0x54(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1388[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EDistributionVectorMirrorFlags    MirrorFlags;                                       // 0x56(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1389[0x5];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseExtremes : 1;                                  // Mask: 0x1, PropSize: 0x10x5C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_138A[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DistributionVectorUniformCurve");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.DPICustomScalingRule
class UDPICustomScalingRule : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DPICustomScalingRule");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.DynamicBlueprintBinding
class UDynamicBlueprintBinding : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DynamicBlueprintBinding");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.ComponentDelegateBinding
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{
public:
	TArray<struct FBlueprintComponentDelegateBinding> ComponentDelegateBindings;                         // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ComponentDelegateBinding");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.InputDelegateBinding
class UInputDelegateBinding : public UDynamicBlueprintBinding
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InputDelegateBinding");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.InputActionDelegateBinding
class UInputActionDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings;                       // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InputActionDelegateBinding");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.InputAxisDelegateBinding
class UInputAxisDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisDelegateBinding> InputAxisDelegateBindings;                         // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InputAxisDelegateBinding");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.InputAxisKeyDelegateBinding
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings;                      // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InputAxisKeyDelegateBinding");
		return Clss;
	}

};

// 0x0 (0x38 - 0x38)
// Class Engine.InputVectorAxisDelegateBinding
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InputVectorAxisDelegateBinding");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.InputKeyDelegateBinding
class UInputKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputKeyDelegateBinding> InputKeyDelegateBindings;                          // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InputKeyDelegateBinding");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.InputTouchDelegateBinding
class UInputTouchDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings;                        // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InputTouchDelegateBinding");
		return Clss;
	}

};

// 0x98 (0xC0 - 0x28)
// Class Engine.EdGraph
class UEdGraph : public UObject
{
public:
	TSubclassOf<class UEdGraphSchema>            Schema;                                            // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UEdGraphNode*>                  Nodes;                                             // 0x30(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bEditable : 1;                                     // Mask: 0x1, PropSize: 0x10x40(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowDeletion : 1;                                // Mask: 0x2, PropSize: 0x10x40(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowRenaming : 1;                                // Mask: 0x4, PropSize: 0x10x40(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_138B[0x7F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EdGraph");
		return Clss;
	}

};

// 0x20 (0xC0 - 0xA0)
// Class Engine.EdGraphNode_Documentation
class UEdGraphNode_Documentation : public UEdGraphNode
{
public:
	class FString                                Link;                                              // 0xA0(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                Excerpt;                                           // 0xB0(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EdGraphNode_Documentation");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.EdGraphSchema
class UEdGraphSchema : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EdGraphSchema");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.ImportantToggleSettingInterface
class UImportantToggleSettingInterface : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ImportantToggleSettingInterface");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.EndUserSettings
class UEndUserSettings : public UObject
{
public:
	uint8                                        Pad_138C[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	bool                                         bSendAnonymousUsageDataToEpic;                     // 0x30(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bSendMeanTimeBetweenFailureDataToEpic;             // 0x31(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllowUserIdInUsageData;                           // 0x32(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_138D[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EndUserSettings");
		return Clss;
	}

};

// 0xA0 (0xC8 - 0x28)
// Class Engine.PendingNetGame
class UPendingNetGame : public UObject
{
public:
	uint8                                        Pad_138E[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UNetDriver*                            NetDriver;                                         // 0x30(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDemoNetDriver*                        DemoNetDriver;                                     // 0x38(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_138F[0x88];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PendingNetGame");
		return Clss;
	}

};

// 0x3E8 (0x410 - 0x28)
// Class Engine.NetDriver
class UNetDriver : public UObject
{
public:
	uint8                                        Pad_1390[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                NetConnectionClassName;                            // 0x30(0x10)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxDownloadSize;                                   // 0x40(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClampListenServerTickRate : 1;                    // Mask: 0x1, PropSize: 0x10x44(0x1)(Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_13E : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1391[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NetServerMaxTickRate;                              // 0x48(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxInternetClientRate;                             // 0x4C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxClientRate;                                     // 0x50(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ServerTravelPause;                                 // 0x54(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpawnPrioritySeconds;                              // 0x58(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RelevantTimeout;                                   // 0x5C(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        KeepAliveTime;                                     // 0x60(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InitialConnectTimeout;                             // 0x64(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConnectionTimeout;                                 // 0x68(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bNoTimeouts;                                       // 0x6C(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1392[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UNetConnection*                        ServerConnection;                                  // 0x70(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UNetConnection*>                ClientConnections;                                 // 0x78(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1393[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UWorld*                                World;                                             // 0xA0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPackage*                              WorldPackage;                                      // 0xA8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1394[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	class UClass*                                NetConnectionClass;                                // 0xD0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UProperty*                             RoleProperty;                                      // 0xD8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UProperty*                             RemoteRoleProperty;                                // 0xE0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  NetDriverName;                                     // 0xE8(0x8)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1395[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Time;                                              // 0xF8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1396[0x314];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NetDriver");
		return Clss;
	}

};

// 0x290 (0x370 - 0xE0)
// Class Engine.PackageMapClient
class UPackageMapClient : public UPackageMap
{
public:
	uint8                                        Pad_1397[0x290];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PackageMapClient");
		return Clss;
	}

};

// 0x33748 (0x33790 - 0x48)
// Class Engine.NetConnection
class UNetConnection : public UPlayer
{
public:
	TArray<class UChildConnection*>              Children;                                          // 0x48(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class UNetDriver*                            Driver;                                            // 0x58(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPackageMap*                           PackageMap;                                        // 0x60(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UChannel*>                      OpenChannels;                                      // 0x68(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                        SentTemporaries;                                   // 0x78(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                ViewTarget;                                        // 0x88(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                OwningActor;                                       // 0x90(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxPacket;                                         // 0x98(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        InternalAck : 1;                                   // Mask: 0x1, PropSize: 0x10x9C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_13F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1398[0xB3];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FUniqueNetIdRepl                      PlayerID;                                          // 0x150(0x18)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1399[0x68];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       LastReceiveTime;                                   // 0x1D0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_139A[0x33528];                                 // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UChannel*>                      ChannelsToTick;                                    // 0x33700(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_139B[0x80];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NetConnection");
		return Clss;
	}

};

// 0x20 (0x337B0 - 0x33790)
// Class Engine.DemoNetConnection
class UDemoNetConnection : public UNetConnection
{
public:
	uint8                                        Pad_139C[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DemoNetConnection");
		return Clss;
	}

};

// 0x590 (0x9A0 - 0x410)
// Class Engine.DemoNetDriver
class UDemoNetDriver : public UNetDriver
{
public:
	uint8                                        Pad_139D[0xF8];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TMap<class FString, struct FRollbackNetStartupActorInfo> RollbackNetStartupActors;                          // 0x508(0x50)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                        Pad_139E[0x448];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DemoNetDriver");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.EngineHandlerComponentFactory
class UEngineHandlerComponentFactory : public UHandlerComponentFactory
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EngineHandlerComponentFactory");
		return Clss;
	}

};

// 0x40 (0x68 - 0x28)
// Class Engine.Exporter
class UExporter : public UObject
{
public:
	TSubclassOf<class UObject>                   SupportedClass;                                    // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                               ExportRootScope;                                   // 0x30(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                        FormatExtension;                                   // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                        FormatDescription;                                 // 0x48(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        PreferredFormatIndex;                              // 0x58(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        TextIndent;                                        // 0x5C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bText : 1;                                         // Mask: 0x1, PropSize: 0x10x60(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSelectedOnly : 1;                                 // Mask: 0x2, PropSize: 0x10x60(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceFileOperations : 1;                          // Mask: 0x4, PropSize: 0x10x60(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_139F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Exporter");
		return Clss;
	}

};

// 0xB0 (0xD8 - 0x28)
// Class Engine.FontImportOptions
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                Data;                                              // 0x28(0xB0)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("FontImportOptions");
		return Clss;
	}

};

// 0x198 (0x1C0 - 0x28)
// Class Engine.Font
class UFont : public UObject
{
public:
	uint8                                        Pad_13A0[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EFontCacheType                    FontCacheType;                                     // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13A1[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FFontCharacter>                Characters;                                        // 0x38(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UTexture2D*>                    Textures;                                          // 0x48(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        IsRemapped;                                        // 0x58(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        EmScale;                                           // 0x5C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Ascent;                                            // 0x60(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Descent;                                           // 0x64(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Leading;                                           // 0x68(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Kerning;                                           // 0x6C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFontImportOptionsData                ImportOptions;                                     // 0x70(0xB0)(Edit, NativeAccessSpecifierPublic)
	int32                                        NumCharacters;                                     // 0x120(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13A2[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<int32>                                MaxCharHeight;                                     // 0x128(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	float                                        ScalingFactor;                                     // 0x138(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        LegacyFontSize;                                    // 0x13C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  LegacyFontName;                                    // 0x140(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCompositeFont                        CompositeFont;                                     // 0x148(0x28)(NativeAccessSpecifierPublic)
	uint8                                        Pad_13A3[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Font");
		return Clss;
	}

};

// 0x30 (0x58 - 0x28)
// Class Engine.FontFace
class UFontFace : public UObject
{
public:
	uint8                                        Pad_13A4[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                SourceFilename;                                    // 0x30(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EFontHinting                      Hinting;                                           // 0x40(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EFontLoadingPolicy                LoadingPolicy;                                     // 0x41(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13A5[0x16];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("FontFace");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.HapticFeedbackEffect_Base
class UHapticFeedbackEffect_Base : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HapticFeedbackEffect_Base");
		return Clss;
	}

};

// 0x40 (0x68 - 0x28)
// Class Engine.HapticFeedbackEffect_Buffer
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
{
public:
	TArray<uint8>                                Amplitudes;                                        // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        SampleRate;                                        // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13A6[0x2C];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HapticFeedbackEffect_Buffer");
		return Clss;
	}

};

// 0xF0 (0x118 - 0x28)
// Class Engine.HapticFeedbackEffect_Curve
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
{
public:
	struct FHapticFeedbackDetails_Curve          HapticDetails;                                     // 0x28(0xF0)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HapticFeedbackEffect_Curve");
		return Clss;
	}

};

// 0x38 (0x60 - 0x28)
// Class Engine.HapticFeedbackEffect_SoundWave
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
{
public:
	class USoundWave*                            SoundWave;                                         // 0x28(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13A7[0x30];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("HapticFeedbackEffect_SoundWave");
		return Clss;
	}

};

// 0x20 (0x48 - 0x28)
// Class Engine.InheritableComponentHandler
class UInheritableComponentHandler : public UObject
{
public:
	TArray<struct FComponentOverrideRecord>      Records;                                           // 0x28(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UActorComponent*>               UnnecessaryComponents;                             // 0x38(0x10)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InheritableComponentHandler");
		return Clss;
	}

};

// 0x80 (0xA8 - 0x28)
// Class Engine.InputSettings
class UInputSettings : public UObject
{
public:
	TArray<struct FInputAxisConfigEntry>         AxisConfig;                                        // 0x28(0x10)(Edit, EditFixedSize, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                        bAltEnterTogglesFullscreen : 1;                    // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bF11TogglesFullscreen : 1;                         // Mask: 0x2, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseMouseForTouch : 1;                             // Mask: 0x4, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableMouseSmoothing : 1;                         // Mask: 0x8, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableFOVScaling : 1;                             // Mask: 0x10, PropSize: 0x10x38(0x1)(Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_140 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_13A8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FOVScale;                                          // 0x3C(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DoubleClickTime;                                   // 0x40(0x4)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bCaptureMouseOnLaunch;                             // 0x44(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMouseCaptureMode                 DefaultViewportMouseCaptureMode;                   // 0x45(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bDefaultViewportMouseLock;                         // 0x46(0x1)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMouseLockMode                    DefaultViewportMouseLockMode;                      // 0x47(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInputActionKeyMapping>        ActionMappings;                                    // 0x48(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FInputAxisKeyMapping>          AxisMappings;                                      // 0x58(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                         bAlwaysShowTouchInterface;                         // 0x68(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShowConsoleOnFourFingerTap;                       // 0x69(0x1)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13A9[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FStringAssetReference                 DefaultTouchInterface;                             // 0x70(0x10)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                  ConsoleKey;                                        // 0x80(0x18)(Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                          ConsoleKeys;                                       // 0x98(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InputSettings");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.InterpCurveEdSetup
class UInterpCurveEdSetup : public UObject
{
public:
	TArray<struct FCurveEdTab>                   Tabs;                                              // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        ActiveTab;                                         // 0x38(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13AA[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpCurveEdSetup");
		return Clss;
	}

};

// 0x48 (0x70 - 0x28)
// Class Engine.InterpData
class UInterpData : public UObject
{
public:
	float                                        InterpLength;                                      // 0x28(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PathBuildTime;                                     // 0x2C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInterpGroup*>                  InterpGroups;                                      // 0x30(0x10)(ExportObject, ZeroConstructor, NativeAccessSpecifierPublic)
	class UInterpCurveEdSetup*                   CurveEdSetup;                                      // 0x40(0x8)(ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        EdSectionStart;                                    // 0x48(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        EdSectionEnd;                                      // 0x4C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldBakeAndPrune : 1;                           // Mask: 0x1, PropSize: 0x10x50(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_141 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_13AB[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UInterpGroupDirector*                  CachedDirectorGroup;                               // 0x58(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                          AllEventNames;                                     // 0x60(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpData");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.InterpFilter
class UInterpFilter : public UObject
{
public:
	class FString                                Caption;                                           // 0x28(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpFilter");
		return Clss;
	}

};

// 0x0 (0x38 - 0x38)
// Class Engine.InterpFilter_Classes
class UInterpFilter_Classes : public UInterpFilter
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpFilter_Classes");
		return Clss;
	}

};

// 0x0 (0x38 - 0x38)
// Class Engine.InterpFilter_Custom
class UInterpFilter_Custom : public UInterpFilter
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpFilter_Custom");
		return Clss;
	}

};

// 0x28 (0x50 - 0x28)
// Class Engine.InterpGroup
class UInterpGroup : public UObject
{
public:
	uint8                                        Pad_13AC[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UInterpTrack*>                  InterpTracks;                                      // 0x30(0x10)(ExportObject, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                  GroupName;                                         // 0x40(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                GroupColor;                                        // 0x48(0x4)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCollapsed : 1;                                    // Mask: 0x1, PropSize: 0x10x4C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bVisible : 1;                                      // Mask: 0x2, PropSize: 0x10x4C(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsFolder : 1;                                     // Mask: 0x4, PropSize: 0x10x4C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsParented : 1;                                   // Mask: 0x8, PropSize: 0x10x4C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsSelected : 1;                                   // Mask: 0x10, PropSize: 0x10x4C(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_13AD[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpGroup");
		return Clss;
	}

};

// 0x10 (0x60 - 0x50)
// Class Engine.InterpGroupCamera
class UInterpGroupCamera : public UInterpGroup
{
public:
	class UCameraAnim*                           CameraAnimInst;                                    // 0x50(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CompressTolerance;                                 // 0x58(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13AE[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpGroupCamera");
		return Clss;
	}

};

// 0x0 (0x50 - 0x50)
// Class Engine.InterpGroupDirector
class UInterpGroupDirector : public UInterpGroup
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpGroupDirector");
		return Clss;
	}

};

// 0x20 (0x48 - 0x28)
// Class Engine.InterpGroupInst
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                          Group;                                             // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                GroupActor;                                        // 0x30(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInterpTrackInst*>              TrackInst;                                         // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpGroupInst");
		return Clss;
	}

};

// 0x0 (0x48 - 0x48)
// Class Engine.InterpGroupInstCamera
class UInterpGroupInstCamera : public UInterpGroupInst
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpGroupInstCamera");
		return Clss;
	}

};

// 0x0 (0x48 - 0x48)
// Class Engine.InterpGroupInstDirector
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpGroupInstDirector");
		return Clss;
	}

};

// 0x48 (0x70 - 0x28)
// Class Engine.InterpTrack
class UInterpTrack : public UObject
{
public:
	uint8                                        Pad_13AF[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UInterpTrack*>                  SubTracks;                                         // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UInterpTrackInst>          TrackInstClass;                                    // 0x48(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETrackActiveCondition             ActiveCondition;                                   // 0x50(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13B0[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                TrackTitle;                                        // 0x58(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOnePerGroup : 1;                                  // Mask: 0x1, PropSize: 0x10x68(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDirGroupOnly : 1;                                 // Mask: 0x2, PropSize: 0x10x68(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableTrack : 1;                                 // Mask: 0x4, PropSize: 0x10x68(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bIsSelected : 1;                                   // Mask: 0x8, PropSize: 0x10x68(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bIsAnimControlTrack : 1;                           // Mask: 0x10, PropSize: 0x10x68(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSubTrackOnly : 1;                                 // Mask: 0x20, PropSize: 0x10x68(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bVisible : 1;                                      // Mask: 0x40, PropSize: 0x10x68(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsRecording : 1;                                  // Mask: 0x80, PropSize: 0x10x68(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13B1[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrack");
		return Clss;
	}

};

// 0x18 (0x88 - 0x70)
// Class Engine.InterpTrackBoolProp
class UInterpTrackBoolProp : public UInterpTrack
{
public:
	TArray<struct FBoolTrackKey>                 BoolTrack;                                         // 0x70(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                  PropertyName;                                      // 0x80(0x8)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackBoolProp");
		return Clss;
	}

};

// 0x18 (0x88 - 0x70)
// Class Engine.InterpTrackDirector
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray<struct FDirectorTrackCut>             CutTrack;                                          // 0x70(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bSimulateCameraCutsOnClients : 1;                  // Mask: 0x1, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_13B2[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackDirector");
		return Clss;
	}

};

// 0x18 (0x88 - 0x70)
// Class Engine.InterpTrackEvent
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray<struct FEventTrackKey>                EventTrack;                                        // 0x70(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bFireEventsWhenForwards : 1;                       // Mask: 0x1, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFireEventsWhenBackwards : 1;                      // Mask: 0x2, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFireEventsWhenJumpingForwards : 1;                // Mask: 0x4, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseCustomEventName : 1;                           // Mask: 0x8, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13B3[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackEvent");
		return Clss;
	}

};

// 0x20 (0x90 - 0x70)
// Class Engine.InterpTrackFloatBase
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                     FloatTrack;                                        // 0x70(0x18)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CurveTension;                                      // 0x88(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13B4[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackFloatBase");
		return Clss;
	}

};

// 0x20 (0xB0 - 0x90)
// Class Engine.InterpTrackAnimControl
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	class FName                                  SlotName;                                          // 0x90(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimControlTrackKey>          AnimSeqs;                                          // 0x98(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bSkipAnimNotifiers : 1;                            // Mask: 0x1, PropSize: 0x10xA8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13B5[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackAnimControl");
		return Clss;
	}

};

// 0x18 (0xA8 - 0x90)
// Class Engine.InterpTrackFade
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	uint8                                        bPersistFade : 1;                                  // Mask: 0x1, PropSize: 0x10x90(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFadeAudio : 1;                                    // Mask: 0x2, PropSize: 0x10x90(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_142 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_13B6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          FadeColor;                                         // 0x94(0x10)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13B7[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackFade");
		return Clss;
	}

};

// 0x20 (0xB0 - 0x90)
// Class Engine.InterpTrackFloatAnimBPParam
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
{
public:
	class UClass*                                AnimBlueprintClass;                                // 0x90(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>             AnimClass;                                         // 0x98(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  ParamName;                                         // 0xA0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13B8[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackFloatAnimBPParam");
		return Clss;
	}

};

// 0x18 (0xA8 - 0x90)
// Class Engine.InterpTrackFloatMaterialParam
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	TArray<class UMaterialInterface*>            TargetMaterials;                                   // 0x90(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                  ParamName;                                         // 0xA0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackFloatMaterialParam");
		return Clss;
	}

};

// 0x8 (0x98 - 0x90)
// Class Engine.InterpTrackFloatParticleParam
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	class FName                                  ParamName;                                         // 0x90(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackFloatParticleParam");
		return Clss;
	}

};

// 0x8 (0x98 - 0x90)
// Class Engine.InterpTrackFloatProp
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	class FName                                  PropertyName;                                      // 0x90(0x8)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackFloatProp");
		return Clss;
	}

};

// 0x58 (0xC8 - 0x70)
// Class Engine.InterpTrackMove
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                    PosTrack;                                          // 0x70(0x18)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveVector                    EulerTrack;                                        // 0x88(0x18)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpLookupTrack                    LookupTrack;                                       // 0xA0(0x10)(NativeAccessSpecifierPublic)
	class FName                                  LookAtGroupName;                                   // 0xB0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LinCurveTension;                                   // 0xB8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AngCurveTension;                                   // 0xBC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseQuatInterpolation : 1;                         // Mask: 0x1, PropSize: 0x10xC0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowArrowAtKeys : 1;                              // Mask: 0x2, PropSize: 0x10xC0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableMovement : 1;                              // Mask: 0x4, PropSize: 0x10xC0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowTranslationOnCurveEd : 1;                     // Mask: 0x8, PropSize: 0x10xC0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShowRotationOnCurveEd : 1;                        // Mask: 0x10, PropSize: 0x10xC0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHide3DTrack : 1;                                  // Mask: 0x20, PropSize: 0x10xC0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_143 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_13B9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EInterpTrackMoveRotMode           RotMode;                                           // 0xC4(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13BA[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackMove");
		return Clss;
	}

};

// 0x18 (0xA8 - 0x90)
// Class Engine.InterpTrackMoveAxis
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{
public:
	enum class EInterpMoveAxis                   MoveAxis;                                          // 0x90(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13BB[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FInterpLookupTrack                    LookupTrack;                                       // 0x98(0x10)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackMoveAxis");
		return Clss;
	}

};

// 0x0 (0x90 - 0x90)
// Class Engine.InterpTrackSlomo
class UInterpTrackSlomo : public UInterpTrackFloatBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackSlomo");
		return Clss;
	}

};

// 0x20 (0x90 - 0x70)
// Class Engine.InterpTrackLinearColorBase
class UInterpTrackLinearColorBase : public UInterpTrack
{
public:
	struct FInterpCurveLinearColor               LinearColorTrack;                                  // 0x70(0x18)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CurveTension;                                      // 0x88(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13BC[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackLinearColorBase");
		return Clss;
	}

};

// 0x8 (0x98 - 0x90)
// Class Engine.InterpTrackLinearColorProp
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{
public:
	class FName                                  PropertyName;                                      // 0x90(0x8)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackLinearColorProp");
		return Clss;
	}

};

// 0x10 (0x80 - 0x70)
// Class Engine.InterpTrackParticleReplay
class UInterpTrackParticleReplay : public UInterpTrack
{
public:
	TArray<struct FParticleReplayTrackKey>       TrackKeys;                                         // 0x70(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackParticleReplay");
		return Clss;
	}

};

// 0x18 (0x88 - 0x70)
// Class Engine.InterpTrackToggle
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray<struct FToggleTrackKey>               ToggleTrack;                                       // 0x70(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bActivateSystemEachUpdate : 1;                     // Mask: 0x1, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bActivateWithJustAttachedFlag : 1;                 // Mask: 0x2, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFireEventsWhenForwards : 1;                       // Mask: 0x4, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFireEventsWhenBackwards : 1;                      // Mask: 0x8, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFireEventsWhenJumpingForwards : 1;                // Mask: 0x10, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13BD[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackToggle");
		return Clss;
	}

};

// 0x20 (0x90 - 0x70)
// Class Engine.InterpTrackVectorBase
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                    VectorTrack;                                       // 0x70(0x18)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CurveTension;                                      // 0x88(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13BE[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackVectorBase");
		return Clss;
	}

};

// 0x0 (0x90 - 0x90)
// Class Engine.InterpTrackAudioMaster
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackAudioMaster");
		return Clss;
	}

};

// 0x8 (0x98 - 0x90)
// Class Engine.InterpTrackColorProp
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	class FName                                  PropertyName;                                      // 0x90(0x8)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackColorProp");
		return Clss;
	}

};

// 0x0 (0x90 - 0x90)
// Class Engine.InterpTrackColorScale
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackColorScale");
		return Clss;
	}

};

// 0x18 (0xA8 - 0x90)
// Class Engine.InterpTrackSound
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray<struct FSoundTrackKey>                Sounds;                                            // 0x90(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bPlayOnReverse : 1;                                // Mask: 0x1, PropSize: 0x10xA0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bContinueSoundOnMatineeEnd : 1;                    // Mask: 0x2, PropSize: 0x10xA0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSuppressSubtitles : 1;                            // Mask: 0x4, PropSize: 0x10xA0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTreatAsDialogue : 1;                              // Mask: 0x8, PropSize: 0x10xA0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAttach : 1;                                       // Mask: 0x10, PropSize: 0x10xA0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13BF[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackSound");
		return Clss;
	}

};

// 0x18 (0xA8 - 0x90)
// Class Engine.InterpTrackVectorMaterialParam
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	TArray<class UMaterialInterface*>            TargetMaterials;                                   // 0x90(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                  ParamName;                                         // 0xA0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackVectorMaterialParam");
		return Clss;
	}

};

// 0x8 (0x98 - 0x90)
// Class Engine.InterpTrackVectorProp
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	class FName                                  PropertyName;                                      // 0x90(0x8)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackVectorProp");
		return Clss;
	}

};

// 0x18 (0x88 - 0x70)
// Class Engine.InterpTrackVisibility
class UInterpTrackVisibility : public UInterpTrack
{
public:
	TArray<struct FVisibilityTrackKey>           VisibilityTrack;                                   // 0x70(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bFireEventsWhenForwards : 1;                       // Mask: 0x1, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFireEventsWhenBackwards : 1;                      // Mask: 0x2, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFireEventsWhenJumpingForwards : 1;                // Mask: 0x4, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13C0[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackVisibility");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.InterpTrackInst
class UInterpTrackInst : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInst");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.InterpTrackInstAnimControl
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                        LastUpdatePosition;                                // 0x28(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13C1[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstAnimControl");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.InterpTrackInstAudioMaster
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstAudioMaster");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.InterpTrackInstColorScale
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstColorScale");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.InterpTrackInstDirector
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                OldViewTarget;                                     // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstDirector");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.InterpTrackInstEvent
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                        LastUpdatePosition;                                // 0x28(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13C2[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstEvent");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.InterpTrackInstFade
class UInterpTrackInstFade : public UInterpTrackInst
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstFade");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.InterpTrackInstFloatAnimBPParam
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
{
public:
	class UAnimInstance*                         AnimScriptInstance;                                // 0x28(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ResetFloat;                                        // 0x30(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13C3[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstFloatAnimBPParam");
		return Clss;
	}

};

// 0x38 (0x60 - 0x28)
// Class Engine.InterpTrackInstFloatMaterialParam
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>      MaterialInstances;                                 // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                ResetFloats;                                       // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPrimitiveMaterialRef>         PrimitiveMaterialRefs;                             // 0x48(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UInterpTrackFloatMaterialParam*        InstancedTrack;                                    // 0x58(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstFloatMaterialParam");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.InterpTrackInstFloatParticleParam
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                        ResetFloat;                                        // 0x28(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13C4[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstFloatParticleParam");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.InterpTrackInstMove
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct FVector                               ResetLocation;                                     // 0x28(0xC)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              ResetRotation;                                     // 0x34(0xC)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstMove");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.InterpTrackInstParticleReplay
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{
public:
	float                                        LastUpdatePosition;                                // 0x28(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13C5[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstParticleReplay");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.InterpTrackInstProperty
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	class UProperty*                             InterpProperty;                                    // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                               PropertyOuterObjectInst;                           // 0x30(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstProperty");
		return Clss;
	}

};

// 0x18 (0x50 - 0x38)
// Class Engine.InterpTrackInstBoolProp
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{
public:
	uint8                                        Pad_13C6[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBoolProperty*                         BoolProperty;                                      // 0x40(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         ResetBool;                                         // 0x48(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13C7[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstBoolProp");
		return Clss;
	}

};

// 0x10 (0x48 - 0x38)
// Class Engine.InterpTrackInstColorProp
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	uint8                                        Pad_13C8[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                ResetColor;                                        // 0x40(0x4)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13C9[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstColorProp");
		return Clss;
	}

};

// 0x10 (0x48 - 0x38)
// Class Engine.InterpTrackInstFloatProp
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	uint8                                        Pad_13CA[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        ResetFloat;                                        // 0x40(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13CB[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstFloatProp");
		return Clss;
	}

};

// 0x18 (0x50 - 0x38)
// Class Engine.InterpTrackInstLinearColorProp
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{
public:
	uint8                                        Pad_13CC[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FLinearColor                          ResetColor;                                        // 0x40(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstLinearColorProp");
		return Clss;
	}

};

// 0x18 (0x50 - 0x38)
// Class Engine.InterpTrackInstVectorProp
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	uint8                                        Pad_13CD[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               ResetVector;                                       // 0x40(0xC)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13CE[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstVectorProp");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.InterpTrackInstSlomo
class UInterpTrackInstSlomo : public UInterpTrackInst
{
public:
	float                                        OldTimeDilation;                                   // 0x28(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13CF[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstSlomo");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.InterpTrackInstSound
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                        LastUpdatePosition;                                // 0x28(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13D0[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UAudioComponent*                       PlayAudioComp;                                     // 0x30(0x8)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstSound");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.InterpTrackInstToggle
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	enum class ETrackToggleAction                Action;                                            // 0x28(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13D1[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LastUpdatePosition;                                // 0x2C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSavedActiveState : 1;                             // Mask: 0x1, PropSize: 0x10x30(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13D2[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstToggle");
		return Clss;
	}

};

// 0x38 (0x60 - 0x28)
// Class Engine.InterpTrackInstVectorMaterialParam
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>      MaterialInstances;                                 // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                       ResetVectors;                                      // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPrimitiveMaterialRef>         PrimitiveMaterialRefs;                             // 0x48(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UInterpTrackVectorMaterialParam*       InstancedTrack;                                    // 0x58(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstVectorMaterialParam");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.InterpTrackInstVisibility
class UInterpTrackInstVisibility : public UInterpTrackInst
{
public:
	enum class EVisibilityTrackAction            Action;                                            // 0x28(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13D3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LastUpdatePosition;                                // 0x2C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InterpTrackInstVisibility");
		return Clss;
	}

};

// 0x28 (0x50 - 0x28)
// Class Engine.IntSerialization
class UIntSerialization : public UObject
{
public:
	uint16                                       UnsignedInt16Variable;                             // 0x28(0x2)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13D4[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       UnsignedInt32Variable;                             // 0x2C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                       UnsignedInt64Variable;                             // 0x30(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                         SignedInt8Variable;                                // 0x38(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13D5[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int16                                        SignedInt16Variable;                               // 0x3A(0x2)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13D6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int64                                        SignedInt64Variable;                               // 0x40(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        UnsignedInt8Variable;                              // 0x48(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13D7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SignedInt32Variable;                               // 0x4C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("IntSerialization");
		return Clss;
	}

};

// 0x20 (0x48 - 0x28)
// Class Engine.Layer
class ULayer : public UObject
{
public:
	class FName                                  LayerName;                                         // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsVisible : 1;                                    // Mask: 0x1, PropSize: 0x10x30(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_144 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_13D8[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FLayerActorStats>              ActorStats;                                        // 0x38(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Layer");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.LevelActorContainer
class ULevelActorContainer : public UObject
{
public:
	TArray<class AActor*>                        Actors;                                            // 0x28(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelActorContainer");
		return Clss;
	}

};

// 0x130 (0x158 - 0x28)
// Class Engine.LevelStreaming
class ULevelStreaming : public UObject
{
public:
	class FName                                  PackageName;                                       // 0x28(0x8)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                 WorldAsset;                                        // 0x30(0x20)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                  PackageNameToLoad;                                 // 0x50(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                          LODPackageNames;                                   // 0x58(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_13D9[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FTransform                            LevelTransform;                                    // 0x80(0x30)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        BitPad_145 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bShouldBeVisibleInEditor : 1;                      // Mask: 0x8, PropSize: 0x10xB0(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLocked : 1;                                       // Mask: 0x10, PropSize: 0x10xB0(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldBeLoaded : 1;                               // Mask: 0x20, PropSize: 0x10xB0(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldBeVisible : 1;                              // Mask: 0x40, PropSize: 0x10xB0(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsStatic : 1;                                     // Mask: 0x80, PropSize: 0x10xB0(0x1)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bShouldBlockOnLoad : 1;                            // Mask: 0x1, PropSize: 0x10xB1(0x1)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_146 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_13DA[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        LevelLODIndex;                                     // 0xB4(0x4)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableDistanceStreaming : 1;                     // Mask: 0x1, PropSize: 0x10xB8(0x1)(BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_147 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bDrawOnLevelStatusMap : 1;                         // Mask: 0x4, PropSize: 0x10xB8(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_148 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_13DB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FColor                                DrawColor;                                         // 0xBC(0x4)(Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          LevelColor;                                        // 0xC0(0x10)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ALevelStreamingVolume*>         EditorStreamingVolumes;                            // 0xD0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        MinTimeBetweenVolumeUnloadRequests;                // 0xE0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13DC[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        Keywords;                                          // 0xE8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnLevelLoaded;                                     // 0xF8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnLevelUnloaded;                                   // 0x108(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnLevelShown;                                      // 0x118(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	UMulticastDelegateProperty_                  OnLevelHidden;                                     // 0x128(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class ULevel*                                LoadedLevel;                                       // 0x138(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULevel*                                PendingUnloadLevel;                                // 0x140(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_13DD[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelStreaming");
		return Clss;
	}

	bool IsStreamingStatePending();
	bool IsLevelVisible();
	bool IsLevelLoaded();
	class ALevelScriptActor* GetLevelScriptActor();
	class ULevelStreaming* CreateInstance(const class FString& UniqueInstanceName);
};

// 0x8 (0x160 - 0x158)
// Class Engine.LevelStreamingAlwaysLoaded
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:
	uint8                                        Pad_13DE[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelStreamingAlwaysLoaded");
		return Clss;
	}

};

// 0x8 (0x160 - 0x158)
// Class Engine.LevelStreamingKismet
class ULevelStreamingKismet : public ULevelStreaming
{
public:
	uint8                                        bInitiallyLoaded : 1;                              // Mask: 0x1, PropSize: 0x10x158(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInitiallyVisible : 1;                             // Mask: 0x2, PropSize: 0x10x158(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13E0[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelStreamingKismet");
		return Clss;
	}

	class ULevelStreamingKismet* LoadLevelInstance(class UObject* WorldContextObject, const class FString& LevelName, struct FVector& Location, struct FRotator& Rotation, bool* bOutSuccess);
};

// 0x8 (0x160 - 0x158)
// Class Engine.LevelStreamingPersistent
class ULevelStreamingPersistent : public ULevelStreaming
{
public:
	uint8                                        Pad_13E1[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LevelStreamingPersistent");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.LightmappedSurfaceCollection
class ULightmappedSurfaceCollection : public UObject
{
public:
	class UModel*                                SourceModel;                                       // 0x28(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                Surfaces;                                          // 0x30(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightmappedSurfaceCollection");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.LightmassPrimitiveSettingsObject
class ULightmassPrimitiveSettingsObject : public UObject
{
public:
	struct FLightmassPrimitiveSettings           LightmassSettings;                                 // 0x28(0x18)(Edit, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightmassPrimitiveSettingsObject");
		return Clss;
	}

};

// 0x80 (0xA8 - 0x28)
// Class Engine.EngineMessage
class UEngineMessage : public ULocalMessage
{
public:
	class FString                                FailedPlaceMessage;                                // 0x28(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                MaxedOutMessage;                                   // 0x38(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                EnteredMessage;                                    // 0x48(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                LeftMessage;                                       // 0x58(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                GlobalNameChange;                                  // 0x68(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                SpecEnteredMessage;                                // 0x78(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                NewPlayerMessage;                                  // 0x88(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                NewSpecMessage;                                    // 0x98(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("EngineMessage");
		return Clss;
	}

};

// 0xF8 (0x120 - 0x28)
// Class Engine.MapBuildDataRegistry
class UMapBuildDataRegistry : public UObject
{
public:
	enum class ELightingBuildQuality             LevelLightingQuality;                              // 0x28(0x1)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13E2[0xF7];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MapBuildDataRegistry");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionAbs
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionAbs");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionActorPositionWS
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionActorPositionWS");
		return Clss;
	}

};

// 0x78 (0xD8 - 0x60)
// Class Engine.MaterialExpressionAdd
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0x98(0x38)(NativeAccessSpecifierPublic)
	float                                        ConstA;                                            // 0xD0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstB;                                            // 0xD4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionAdd");
		return Clss;
	}

};

// 0x70 (0xD0 - 0x60)
// Class Engine.MaterialExpressionAppendVector
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0x98(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionAppendVector");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionArccosine
class UMaterialExpressionArccosine : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionArccosine");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionArccosineFast
class UMaterialExpressionArccosineFast : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionArccosineFast");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionArcsine
class UMaterialExpressionArcsine : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionArcsine");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionArcsineFast
class UMaterialExpressionArcsineFast : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionArcsineFast");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionArctangent
class UMaterialExpressionArctangent : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionArctangent");
		return Clss;
	}

};

// 0x70 (0xD0 - 0x60)
// Class Engine.MaterialExpressionArctangent2
class UMaterialExpressionArctangent2 : public UMaterialExpression
{
public:
	struct FExpressionInput                      Y;                                                 // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      X;                                                 // 0x98(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionArctangent2");
		return Clss;
	}

};

// 0x70 (0xD0 - 0x60)
// Class Engine.MaterialExpressionArctangent2Fast
class UMaterialExpressionArctangent2Fast : public UMaterialExpression
{
public:
	struct FExpressionInput                      Y;                                                 // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      X;                                                 // 0x98(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionArctangent2Fast");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionArctangentFast
class UMaterialExpressionArctangentFast : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionArctangentFast");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionAtmosphericFogColor
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{
public:
	struct FExpressionInput                      WorldPosition;                                     // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionAtmosphericFogColor");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionAtmosphericLightColor
class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionAtmosphericLightColor");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionAtmosphericLightVector
class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionAtmosphericLightVector");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionBlackBody
class UMaterialExpressionBlackBody : public UMaterialExpression
{
public:
	struct FExpressionInput                      Temp;                                              // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionBlackBody");
		return Clss;
	}

};

// 0xC0 (0x120 - 0x60)
// Class Engine.MaterialExpressionBlendMaterialAttributes
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput              A;                                                 // 0x60(0x40)(NativeAccessSpecifierPublic)
	struct FMaterialAttributesInput              B;                                                 // 0xA0(0x40)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Alpha;                                             // 0xE0(0x38)(NativeAccessSpecifierPublic)
	enum class EMaterialAttributeBlend           PixelAttributeBlendType;                           // 0x118(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMaterialAttributeBlend           VertexAttributeBlendType;                          // 0x119(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13E3[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionBlendMaterialAttributes");
		return Clss;
	}

};

// 0x40 (0xA0 - 0x60)
// Class Engine.MaterialExpressionBreakMaterialAttributes
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput              MaterialAttributes;                                // 0x60(0x40)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionBreakMaterialAttributes");
		return Clss;
	}

};

// 0xB8 (0x118 - 0x60)
// Class Engine.MaterialExpressionBumpOffset
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                      Coordinate;                                        // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Height;                                            // 0x98(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      HeightRatioInput;                                  // 0xD0(0x38)(NativeAccessSpecifierPublic)
	float                                        HeightRatio;                                       // 0x108(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ReferencePlane;                                    // 0x10C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       ConstCoordinate;                                   // 0x110(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13E4[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionBumpOffset");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionCameraPositionWS
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionCameraPositionWS");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionCameraVectorWS
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionCameraVectorWS");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionCeil
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionCeil");
		return Clss;
	}

};

// 0xB8 (0x118 - 0x60)
// Class Engine.MaterialExpressionClamp
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Min;                                               // 0x98(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Max;                                               // 0xD0(0x38)(NativeAccessSpecifierPublic)
	enum class EClampMode                        ClampMode;                                         // 0x108(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13E5[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinDefault;                                        // 0x10C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxDefault;                                        // 0x110(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13E6[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionClamp");
		return Clss;
	}

};

// 0x20 (0x80 - 0x60)
// Class Engine.MaterialExpressionCollectionParameter
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{
public:
	class UMaterialParameterCollection*          Collection;                                        // 0x60(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  ParameterName;                                     // 0x68(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 ParameterId;                                       // 0x70(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionCollectionParameter");
		return Clss;
	}

};

// 0x28 (0x88 - 0x60)
// Class Engine.MaterialExpressionComment
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int32                                        SizeX;                                             // 0x60(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SizeY;                                             // 0x64(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                Text;                                              // 0x68(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          CommentColor;                                      // 0x78(0x10)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionComment");
		return Clss;
	}

};

// 0x40 (0xA0 - 0x60)
// Class Engine.MaterialExpressionComponentMask
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)
	uint8                                        R : 1;                                             // Mask: 0x1, PropSize: 0x10x98(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        G : 1;                                             // Mask: 0x2, PropSize: 0x10x98(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        B : 1;                                             // Mask: 0x4, PropSize: 0x10x98(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        A : 1;                                             // Mask: 0x8, PropSize: 0x10x98(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13E7[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionComponentMask");
		return Clss;
	}

};

// 0x8 (0x68 - 0x60)
// Class Engine.MaterialExpressionConstant
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                        R;                                                 // 0x60(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13E8[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionConstant");
		return Clss;
	}

};

// 0x8 (0x68 - 0x60)
// Class Engine.MaterialExpressionConstant2Vector
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                        R;                                                 // 0x60(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        G;                                                 // 0x64(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionConstant2Vector");
		return Clss;
	}

};

// 0x10 (0x70 - 0x60)
// Class Engine.MaterialExpressionConstant3Vector
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	struct FLinearColor                          Constant;                                          // 0x60(0x10)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionConstant3Vector");
		return Clss;
	}

};

// 0x10 (0x70 - 0x60)
// Class Engine.MaterialExpressionConstant4Vector
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	struct FLinearColor                          Constant;                                          // 0x60(0x10)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionConstant4Vector");
		return Clss;
	}

};

// 0x40 (0xA0 - 0x60)
// Class Engine.MaterialExpressionConstantBiasScale
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)
	float                                        Bias;                                              // 0x98(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Scale;                                             // 0x9C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionConstantBiasScale");
		return Clss;
	}

};

// 0x40 (0xA0 - 0x60)
// Class Engine.MaterialExpressionCosine
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)
	float                                        Period;                                            // 0x98(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13E9[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionCosine");
		return Clss;
	}

};

// 0x70 (0xD0 - 0x60)
// Class Engine.MaterialExpressionCrossProduct
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0x98(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionCrossProduct");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionCustom
class UMaterialExpressionCustom : public UMaterialExpression
{
public:
	class FString                                Code;                                              // 0x60(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ECustomMaterialOutputType         OutputType;                                        // 0x70(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13EA[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                Description;                                       // 0x78(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCustomInput>                  Inputs;                                            // 0x88(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionCustom");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionClearCoatNormalCustomOutput");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionTangentOutput
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTangentOutput");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionDDX
class UMaterialExpressionDDX : public UMaterialExpression
{
public:
	struct FExpressionInput                      Value;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDDX");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionDDY
class UMaterialExpressionDDY : public UMaterialExpression
{
public:
	struct FExpressionInput                      Value;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDDY");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionDecalDerivative
class UMaterialExpressionDecalDerivative : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDecalDerivative");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionDecalLifetimeOpacity
class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDecalLifetimeOpacity");
		return Clss;
	}

};

// 0x40 (0xA0 - 0x60)
// Class Engine.MaterialExpressionDecalMipmapLevel
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{
public:
	struct FExpressionInput                      TextureSize;                                       // 0x60(0x38)(NativeAccessSpecifierPublic)
	float                                        ConstWidth;                                        // 0x98(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstHeight;                                       // 0x9C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDecalMipmapLevel");
		return Clss;
	}

};

// 0x78 (0xD8 - 0x60)
// Class Engine.MaterialExpressionDepthFade
class UMaterialExpressionDepthFade : public UMaterialExpression
{
public:
	struct FExpressionInput                      InOpacity;                                         // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      FadeDistance;                                      // 0x98(0x38)(NativeAccessSpecifierPublic)
	float                                        OpacityDefault;                                    // 0xD0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeDistanceDefault;                               // 0xD4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDepthFade");
		return Clss;
	}

};

// 0x40 (0xA0 - 0x60)
// Class Engine.MaterialExpressionDepthOfFieldFunction
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{
public:
	enum class EDepthOfFieldFunctionValue        FunctionValue;                                     // 0x60(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13EB[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Depth;                                             // 0x68(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDepthOfFieldFunction");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionDeriveNormalZ
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                      InXY;                                              // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDeriveNormalZ");
		return Clss;
	}

};

// 0x80 (0xE0 - 0x60)
// Class Engine.MaterialExpressionDesaturation
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Fraction;                                          // 0x98(0x38)(NativeAccessSpecifierPublic)
	struct FLinearColor                          LuminanceFactors;                                  // 0xD0(0x10)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDesaturation");
		return Clss;
	}

};

// 0x70 (0xD0 - 0x60)
// Class Engine.MaterialExpressionDistance
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0x98(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDistance");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionDistanceCullFade
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDistanceCullFade");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionDistanceFieldGradient
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{
public:
	struct FExpressionInput                      Position;                                          // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDistanceFieldGradient");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionDistanceToNearestSurface
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{
public:
	struct FExpressionInput                      Position;                                          // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDistanceToNearestSurface");
		return Clss;
	}

};

// 0x78 (0xD8 - 0x60)
// Class Engine.MaterialExpressionDivide
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0x98(0x38)(NativeAccessSpecifierPublic)
	float                                        ConstA;                                            // 0xD0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstB;                                            // 0xD4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDivide");
		return Clss;
	}

};

// 0x70 (0xD0 - 0x60)
// Class Engine.MaterialExpressionDotProduct
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0x98(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDotProduct");
		return Clss;
	}

};

// 0x20 (0x80 - 0x60)
// Class Engine.MaterialExpressionDynamicParameter
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	TArray<class FString>                        ParamNames;                                        // 0x60(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLinearColor                          DefaultValue;                                      // 0x70(0x10)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionDynamicParameter");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionEyeAdaptation
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionEyeAdaptation");
		return Clss;
	}

};

// 0x118 (0x178 - 0x60)
// Class Engine.MaterialExpressionFeatureLevelSwitch
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Inputs;                                            // 0x98(0x38)(NativeAccessSpecifierPublic)
	uint8                                        Pad_13EC[0xA8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionFeatureLevelSwitch");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionFloor
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionFloor");
		return Clss;
	}

};

// 0x70 (0xD0 - 0x60)
// Class Engine.MaterialExpressionFmod
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0x98(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionFmod");
		return Clss;
	}

};

// 0x10 (0x70 - 0x60)
// Class Engine.MaterialExpressionFontSample
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                 Font;                                              // 0x60(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        FontTexturePage;                                   // 0x68(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13ED[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionFontSample");
		return Clss;
	}

};

// 0x20 (0x90 - 0x70)
// Class Engine.MaterialExpressionFontSampleParameter
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	class FName                                  ParameterName;                                     // 0x70(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 ExpressionGUID;                                    // 0x78(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Group;                                             // 0x88(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionFontSampleParameter");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionFrac
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionFrac");
		return Clss;
	}

};

// 0xB8 (0x118 - 0x60)
// Class Engine.MaterialExpressionFresnel
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	struct FExpressionInput                      ExponentIn;                                        // 0x60(0x38)(NativeAccessSpecifierPublic)
	float                                        Exponent;                                          // 0x98(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13EE[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      BaseReflectFractionIn;                             // 0xA0(0x38)(NativeAccessSpecifierPublic)
	float                                        BaseReflectFraction;                               // 0xD8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13EF[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Normal;                                            // 0xE0(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionFresnel");
		return Clss;
	}

};

// 0xD0 (0x130 - 0x60)
// Class Engine.MaterialExpressionFunctionInput
class UMaterialExpressionFunctionInput : public UMaterialExpression
{
public:
	struct FExpressionInput                      Preview;                                           // 0x60(0x38)(NativeAccessSpecifierPublic)
	class FString                                InputName;                                         // 0x98(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                Description;                                       // 0xA8(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 ID;                                                // 0xB8(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EFunctionInputType                InputType;                                         // 0xC8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13F0[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector4                              PreviewValue;                                      // 0xD0(0x10)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsePreviewValueAsDefault : 1;                     // Mask: 0x1, PropSize: 0x10xE0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_149 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_13F1[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SortPriority;                                      // 0xE4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCompilingFunctionPreview : 1;                     // Mask: 0x1, PropSize: 0x10xE8(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13F2[0x47];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionFunctionInput");
		return Clss;
	}

};

// 0x78 (0xD8 - 0x60)
// Class Engine.MaterialExpressionFunctionOutput
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{
public:
	class FString                                OutputName;                                        // 0x60(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                Description;                                       // 0x70(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SortPriority;                                      // 0x80(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13F3[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      A;                                                 // 0x88(0x38)(NativeAccessSpecifierPublic)
	uint8                                        bLastPreviewed : 1;                                // Mask: 0x1, PropSize: 0x10xC0(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_14A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_13F4[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 ID;                                                // 0xC4(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13F5[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionFunctionOutput");
		return Clss;
	}

};

// 0x50 (0xB0 - 0x60)
// Class Engine.MaterialExpressionGetMaterialAttributes
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
{
public:
	struct FMaterialAttributesInput              MaterialAttributes;                                // 0x60(0x40)(NativeAccessSpecifierPublic)
	TArray<struct FGuid>                         AttributeGetTypes;                                 // 0xA0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionGetMaterialAttributes");
		return Clss;
	}

};

// 0xA8 (0x108 - 0x60)
// Class Engine.MaterialExpressionGIReplace
class UMaterialExpressionGIReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      StaticIndirect;                                    // 0x98(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      DynamicIndirect;                                   // 0xD0(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionGIReplace");
		return Clss;
	}

};

// 0x128 (0x188 - 0x60)
// Class Engine.MaterialExpressionIf
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0x98(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      AGreaterThanB;                                     // 0xD0(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      AEqualsB;                                          // 0x108(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      ALessThanB;                                        // 0x140(0x38)(NativeAccessSpecifierPublic)
	float                                        EqualsThreshold;                                   // 0x178(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstB;                                            // 0x17C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstAEqualsB;                                     // 0x180(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13F6[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionIf");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionLightmapUVs
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionLightmapUVs");
		return Clss;
	}

};

// 0x70 (0xD0 - 0x60)
// Class Engine.MaterialExpressionLightmassReplace
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                      Realtime;                                          // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Lightmass;                                         // 0x98(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionLightmassReplace");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionLightVector
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionLightVector");
		return Clss;
	}

};

// 0xB8 (0x118 - 0x60)
// Class Engine.MaterialExpressionLinearInterpolate
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0x98(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Alpha;                                             // 0xD0(0x38)(NativeAccessSpecifierPublic)
	float                                        ConstA;                                            // 0x108(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstB;                                            // 0x10C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstAlpha;                                        // 0x110(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13F7[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionLinearInterpolate");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionLogarithm2
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{
public:
	struct FExpressionInput                      X;                                                 // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionLogarithm2");
		return Clss;
	}

};

// 0x578 (0x5D8 - 0x60)
// Class Engine.MaterialExpressionMakeMaterialAttributes
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{
public:
	struct FExpressionInput                      BaseColor;                                         // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Metallic;                                          // 0x98(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Specular;                                          // 0xD0(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Roughness;                                         // 0x108(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      EmissiveColor;                                     // 0x140(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Opacity;                                           // 0x178(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      OpacityMask;                                       // 0x1B0(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Normal;                                            // 0x1E8(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      WorldPositionOffset;                               // 0x220(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      WorldDisplacement;                                 // 0x258(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      TessellationMultiplier;                            // 0x290(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      SubsurfaceColor;                                   // 0x2C8(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      ClearCoat;                                         // 0x300(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      ClearCoatRoughness;                                // 0x338(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      AmbientOcclusion;                                  // 0x370(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Refraction;                                        // 0x3A8(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      CustomizedUVs;                                     // 0x3E0(0x38)(NativeAccessSpecifierPublic)
	uint8                                        Pad_13F8[0x188];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      PixelDepthOffset;                                  // 0x5A0(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionMakeMaterialAttributes");
		return Clss;
	}

};

// 0x28 (0x88 - 0x60)
// Class Engine.MaterialExpressionMaterialFunctionCall
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{
public:
	class UMaterialFunction*                     MaterialFunction;                                  // 0x60(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFunctionExpressionInput>      FunctionInputs;                                    // 0x68(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFunctionExpressionOutput>     FunctionOutputs;                                   // 0x78(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionMaterialFunctionCall");
		return Clss;
	}

};

// 0x70 (0xD0 - 0x60)
// Class Engine.MaterialExpressionMaterialProxyReplace
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                      Realtime;                                          // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      MaterialProxy;                                     // 0x98(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionMaterialProxyReplace");
		return Clss;
	}

};

// 0x78 (0xD8 - 0x60)
// Class Engine.MaterialExpressionMax
class UMaterialExpressionMax : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0x98(0x38)(NativeAccessSpecifierPublic)
	float                                        ConstA;                                            // 0xD0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstB;                                            // 0xD4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionMax");
		return Clss;
	}

};

// 0x78 (0xD8 - 0x60)
// Class Engine.MaterialExpressionMin
class UMaterialExpressionMin : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0x98(0x38)(NativeAccessSpecifierPublic)
	float                                        ConstA;                                            // 0xD0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstB;                                            // 0xD4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionMin");
		return Clss;
	}

};

// 0x78 (0xD8 - 0x60)
// Class Engine.MaterialExpressionMultiply
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0x98(0x38)(NativeAccessSpecifierPublic)
	float                                        ConstA;                                            // 0xD0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstB;                                            // 0xD4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionMultiply");
		return Clss;
	}

};

// 0x98 (0xF8 - 0x60)
// Class Engine.MaterialExpressionNoise
class UMaterialExpressionNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                      Position;                                          // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      FilterWidth;                                       // 0x98(0x38)(NativeAccessSpecifierPublic)
	float                                        Scale;                                             // 0xD0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Quality;                                           // 0xD4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ENoiseFunction                    NoiseFunction;                                     // 0xD8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13F9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bTurbulence : 1;                                   // Mask: 0x1, PropSize: 0x10xDC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_14B : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_13FA[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Levels;                                            // 0xE0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OutputMin;                                         // 0xE4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OutputMax;                                         // 0xE8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LevelScale;                                        // 0xEC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTiling : 1;                                       // Mask: 0x1, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_14C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_13FB[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       RepeatSize;                                        // 0xF4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionNoise");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionNormalize
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                      VectorInput;                                       // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionNormalize");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionObjectBounds
class UMaterialExpressionObjectBounds : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionObjectBounds");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionObjectOrientation
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionObjectOrientation");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionObjectPositionWS
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionObjectPositionWS");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionObjectRadius
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionObjectRadius");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionOneMinus
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionOneMinus");
		return Clss;
	}

};

// 0xB8 (0x118 - 0x60)
// Class Engine.MaterialExpressionPanner
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                      Coordinate;                                        // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Time;                                              // 0x98(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Speed;                                             // 0xD0(0x38)(NativeAccessSpecifierPublic)
	float                                        SpeedX;                                            // 0x108(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SpeedY;                                            // 0x10C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       ConstCoordinate;                                   // 0x110(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFractionalPart;                                   // 0x114(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13FC[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPanner");
		return Clss;
	}

};

// 0x20 (0x80 - 0x60)
// Class Engine.MaterialExpressionParameter
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	class FName                                  ParameterName;                                     // 0x60(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 ExpressionGUID;                                    // 0x68(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Group;                                             // 0x78(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParameter");
		return Clss;
	}

};

// 0x10 (0x90 - 0x80)
// Class Engine.MaterialExpressionScalarParameter
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                        DefaultValue;                                      // 0x80(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SliderMin;                                         // 0x84(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SliderMax;                                         // 0x88(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13FD[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionScalarParameter");
		return Clss;
	}

};

// 0x8 (0x88 - 0x80)
// Class Engine.MaterialExpressionStaticBoolParameter
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{
public:
	uint8                                        DefaultValue : 1;                                  // Mask: 0x1, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13FE[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStaticBoolParameter");
		return Clss;
	}

};

// 0x70 (0xF8 - 0x88)
// Class Engine.MaterialExpressionStaticSwitchParameter
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{
public:
	struct FExpressionInput                      A;                                                 // 0x88(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xC0(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStaticSwitchParameter");
		return Clss;
	}

};

// 0x40 (0xC0 - 0x80)
// Class Engine.MaterialExpressionStaticComponentMaskParameter
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                      Input;                                             // 0x80(0x38)(NativeAccessSpecifierPublic)
	uint8                                        DefaultR : 1;                                      // Mask: 0x1, PropSize: 0x10xB8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        DefaultG : 1;                                      // Mask: 0x2, PropSize: 0x10xB8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        DefaultB : 1;                                      // Mask: 0x4, PropSize: 0x10xB8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        DefaultA : 1;                                      // Mask: 0x8, PropSize: 0x10xB8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_13FF[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStaticComponentMaskParameter");
		return Clss;
	}

};

// 0x10 (0x90 - 0x80)
// Class Engine.MaterialExpressionVectorParameter
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                          DefaultValue;                                      // 0x80(0x10)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionVectorParameter");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionParticleColor
class UMaterialExpressionParticleColor : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleColor");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionParticleDirection
class UMaterialExpressionParticleDirection : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleDirection");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionParticleMacroUV
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleMacroUV");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionParticleMotionBlurFade
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleMotionBlurFade");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionParticlePositionWS
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticlePositionWS");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionParticleRadius
class UMaterialExpressionParticleRadius : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleRadius");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionParticleRandom
class UMaterialExpressionParticleRandom : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleRandom");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionParticleRelativeTime
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleRelativeTime");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionParticleSize
class UMaterialExpressionParticleSize : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleSize");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionParticleSpeed
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleSpeed");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionPerInstanceFadeAmount
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPerInstanceFadeAmount");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionPerInstanceRandom
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPerInstanceRandom");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionPixelDepth
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPixelDepth");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionPixelNormalWS
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPixelNormalWS");
		return Clss;
	}

};

// 0x78 (0xD8 - 0x60)
// Class Engine.MaterialExpressionPower
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                      Base;                                              // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Exponent;                                          // 0x98(0x38)(NativeAccessSpecifierPublic)
	float                                        ConstExponent;                                     // 0xD0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1400[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPower");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionPrecomputedAOMask
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPrecomputedAOMask");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionPreSkinnedNormal
class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPreSkinnedNormal");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionPreSkinnedPosition
class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPreSkinnedPosition");
		return Clss;
	}

};

// 0x70 (0xD0 - 0x60)
// Class Engine.MaterialExpressionPreviousFrameSwitch
class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      CurrentFrame;                                      // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      PreviousFrame;                                     // 0x98(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionPreviousFrameSwitch");
		return Clss;
	}

};

// 0xE0 (0x140 - 0x60)
// Class Engine.MaterialExpressionQualitySwitch
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                      Default;                                           // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Inputs;                                            // 0x98(0x38)(NativeAccessSpecifierPublic)
	uint8                                        Pad_1401[0x70];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionQualitySwitch");
		return Clss;
	}

};

// 0x40 (0xA0 - 0x60)
// Class Engine.MaterialExpressionReflectionVectorWS
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{
public:
	struct FExpressionInput                      CustomWorldNormal;                                 // 0x60(0x38)(NativeAccessSpecifierPublic)
	uint8                                        bNormalizeCustomWorldNormal : 1;                   // Mask: 0x1, PropSize: 0x10x98(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1402[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionReflectionVectorWS");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionReroute
class UMaterialExpressionReroute : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionReroute");
		return Clss;
	}

};

// 0xE8 (0x148 - 0x60)
// Class Engine.MaterialExpressionRotateAboutAxis
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	struct FExpressionInput                      NormalizedRotationAxis;                            // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      RotationAngle;                                     // 0x98(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      PivotPoint;                                        // 0xD0(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Position;                                          // 0x108(0x38)(NativeAccessSpecifierPublic)
	float                                        Period;                                            // 0x140(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1403[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionRotateAboutAxis");
		return Clss;
	}

};

// 0x80 (0xE0 - 0x60)
// Class Engine.MaterialExpressionRotator
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                      Coordinate;                                        // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Time;                                              // 0x98(0x38)(NativeAccessSpecifierPublic)
	float                                        CenterX;                                           // 0xD0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CenterY;                                           // 0xD4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Speed;                                             // 0xD8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                       ConstCoordinate;                                   // 0xDC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionRotator");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionRound
class UMaterialExpressionRound : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionRound");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionSaturate
class UMaterialExpressionSaturate : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSaturate");
		return Clss;
	}

};

// 0x80 (0xE0 - 0x60)
// Class Engine.MaterialExpressionSceneColor
class UMaterialExpressionSceneColor : public UMaterialExpression
{
public:
	enum class EMaterialSceneAttributeInputMode  InputMode;                                         // 0x60(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1404[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Input;                                             // 0x68(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      OffsetFraction;                                    // 0xA0(0x38)(Deprecated, NativeAccessSpecifierPublic)
	struct FVector2D                             ConstInput;                                        // 0xD8(0x8)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSceneColor");
		return Clss;
	}

};

// 0x80 (0xE0 - 0x60)
// Class Engine.MaterialExpressionSceneDepth
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	enum class EMaterialSceneAttributeInputMode  InputMode;                                         // 0x60(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1405[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      Input;                                             // 0x68(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Coordinates;                                       // 0xA0(0x38)(Deprecated, NativeAccessSpecifierPublic)
	struct FVector2D                             ConstInput;                                        // 0xD8(0x8)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSceneDepth");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionSceneTexelSize
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSceneTexelSize");
		return Clss;
	}

};

// 0x40 (0xA0 - 0x60)
// Class Engine.MaterialExpressionSceneTexture
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                      Coordinates;                                       // 0x60(0x38)(NativeAccessSpecifierPublic)
	enum class ESceneTextureId                   SceneTextureId;                                    // 0x98(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bClampUVs;                                         // 0x99(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bFiltered;                                         // 0x9A(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1406[0x5];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSceneTexture");
		return Clss;
	}

};

// 0x8 (0x68 - 0x60)
// Class Engine.MaterialExpressionScreenPosition
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:
	enum class EMaterialExpressionScreenPositionMapping Mapping;                                           // 0x60(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1407[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionScreenPosition");
		return Clss;
	}

};

// 0x20 (0x80 - 0x60)
// Class Engine.MaterialExpressionSetMaterialAttributes
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
{
public:
	TArray<struct FExpressionInput>              Inputs;                                            // 0x60(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGuid>                         AttributeSetTypes;                                 // 0x70(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSetMaterialAttributes");
		return Clss;
	}

};

// 0x40 (0xA0 - 0x60)
// Class Engine.MaterialExpressionSine
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)
	float                                        Period;                                            // 0x98(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1408[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSine");
		return Clss;
	}

};

// 0x10 (0x70 - 0x60)
// Class Engine.MaterialExpressionSpeedTree
class UMaterialExpressionSpeedTree : public UMaterialExpression
{
public:
	enum class ESpeedTreeGeometryType            GeometryType;                                      // 0x60(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESpeedTreeWindType                WindType;                                          // 0x61(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESpeedTreeLODType                 LODType;                                           // 0x62(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1409[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        BillboardThreshold;                                // 0x64(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAccurateWindVelocities;                           // 0x68(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_140A[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSpeedTree");
		return Clss;
	}

};

// 0xE8 (0x148 - 0x60)
// Class Engine.MaterialExpressionSphereMask
class UMaterialExpressionSphereMask : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0x98(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Radius;                                            // 0xD0(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Hardness;                                          // 0x108(0x38)(NativeAccessSpecifierPublic)
	float                                        AttenuationRadius;                                 // 0x140(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        HardnessPercent;                                   // 0x144(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSphereMask");
		return Clss;
	}

};

// 0x40 (0xA0 - 0x60)
// Class Engine.MaterialExpressionSphericalParticleOpacity
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{
public:
	struct FExpressionInput                      Density;                                           // 0x60(0x38)(NativeAccessSpecifierPublic)
	float                                        ConstantDensity;                                   // 0x98(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_140B[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSphericalParticleOpacity");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionSquareRoot
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSquareRoot");
		return Clss;
	}

};

// 0x8 (0x68 - 0x60)
// Class Engine.MaterialExpressionStaticBool
class UMaterialExpressionStaticBool : public UMaterialExpression
{
public:
	uint8                                        Value : 1;                                         // Mask: 0x1, PropSize: 0x10x60(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_140C[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStaticBool");
		return Clss;
	}

};

// 0xB0 (0x110 - 0x60)
// Class Engine.MaterialExpressionStaticSwitch
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{
public:
	uint8                                        DefaultValue : 1;                                  // Mask: 0x1, PropSize: 0x10x60(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_14D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_140D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FExpressionInput                      A;                                                 // 0x68(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0xA0(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      Value;                                             // 0xD8(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionStaticSwitch");
		return Clss;
	}

};

// 0x78 (0xD8 - 0x60)
// Class Engine.MaterialExpressionSubtract
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                      A;                                                 // 0x60(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      B;                                                 // 0x98(0x38)(NativeAccessSpecifierPublic)
	float                                        ConstA;                                            // 0xD0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ConstB;                                            // 0xD4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionSubtract");
		return Clss;
	}

};

// 0x40 (0xA0 - 0x60)
// Class Engine.MaterialExpressionTangent
class UMaterialExpressionTangent : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)
	float                                        Period;                                            // 0x98(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_140E[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTangent");
		return Clss;
	}

};

// 0x10 (0x70 - 0x60)
// Class Engine.MaterialExpressionTextureBase
class UMaterialExpressionTextureBase : public UMaterialExpression
{
public:
	class UTexture*                              Texture;                                           // 0x60(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMaterialSamplerType              SamplerType;                                       // 0x68(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_140F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        IsDefaultMeshpaintTexture : 1;                     // Mask: 0x1, PropSize: 0x10x6C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1410[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureBase");
		return Clss;
	}

};

// 0x0 (0x70 - 0x70)
// Class Engine.MaterialExpressionTextureObject
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureObject");
		return Clss;
	}

};

// 0x128 (0x198 - 0x70)
// Class Engine.MaterialExpressionTextureSample
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{
public:
	struct FExpressionInput                      Coordinates;                                       // 0x70(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      TextureObject;                                     // 0xA8(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      MipValue;                                          // 0xE0(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      CoordinatesDX;                                     // 0x118(0x38)(NativeAccessSpecifierPublic)
	struct FExpressionInput                      CoordinatesDY;                                     // 0x150(0x38)(NativeAccessSpecifierPublic)
	enum class ETextureMipValueMode              MipValueMode;                                      // 0x188(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESamplerSourceMode                SamplerSource;                                     // 0x189(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1411[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       ConstCoordinate;                                   // 0x18C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ConstMipValue;                                     // 0x190(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1412[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureSample");
		return Clss;
	}

};

// 0x8 (0x1A0 - 0x198)
// Class Engine.MaterialExpressionParticleSubUV
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:
	uint8                                        bBlend : 1;                                        // Mask: 0x1, PropSize: 0x10x198(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1413[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionParticleSubUV");
		return Clss;
	}

};

// 0x20 (0x1B8 - 0x198)
// Class Engine.MaterialExpressionTextureSampleParameter
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	class FName                                  ParameterName;                                     // 0x198(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 ExpressionGUID;                                    // 0x1A0(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  Group;                                             // 0x1B0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureSampleParameter");
		return Clss;
	}

};

// 0x0 (0x1B8 - 0x1B8)
// Class Engine.MaterialExpressionTextureObjectParameter
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureObjectParameter");
		return Clss;
	}

};

// 0x0 (0x1B8 - 0x1B8)
// Class Engine.MaterialExpressionTextureSampleParameter2D
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureSampleParameter2D");
		return Clss;
	}

};

// 0x8 (0x1C0 - 0x1B8)
// Class Engine.MaterialExpressionAntialiasedTextureMask
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                        Threshold;                                         // 0x1B8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureColorChannel              Channel;                                           // 0x1BC(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1414[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionAntialiasedTextureMask");
		return Clss;
	}

};

// 0x8 (0x1C0 - 0x1B8)
// Class Engine.MaterialExpressionTextureSampleParameterSubUV
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:
	uint8                                        bBlend : 1;                                        // Mask: 0x1, PropSize: 0x10x1B8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1415[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureSampleParameterSubUV");
		return Clss;
	}

};

// 0x0 (0x1B8 - 0x1B8)
// Class Engine.MaterialExpressionTextureSampleParameterCube
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureSampleParameterCube");
		return Clss;
	}

};

// 0x10 (0x70 - 0x60)
// Class Engine.MaterialExpressionTextureCoordinate
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int32                                        CoordinateIndex;                                   // 0x60(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        UTiling;                                           // 0x64(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VTiling;                                           // 0x68(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        UnMirrorU : 1;                                     // Mask: 0x1, PropSize: 0x10x6C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        UnMirrorV : 1;                                     // Mask: 0x2, PropSize: 0x10x6C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1416[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureCoordinate");
		return Clss;
	}

};

// 0x40 (0xA0 - 0x60)
// Class Engine.MaterialExpressionTextureProperty
class UMaterialExpressionTextureProperty : public UMaterialExpression
{
public:
	struct FExpressionInput                      TextureObject;                                     // 0x60(0x38)(NativeAccessSpecifierPublic)
	enum class EMaterialExposedTextureProperty   Property;                                          // 0x98(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1417[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTextureProperty");
		return Clss;
	}

};

// 0x8 (0x68 - 0x60)
// Class Engine.MaterialExpressionTime
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	uint8                                        bIgnorePause : 1;                                  // Mask: 0x1, PropSize: 0x10x60(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverride_Period : 1;                              // Mask: 0x2, PropSize: 0x10x60(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_14E : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1418[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Period;                                            // 0x64(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTime");
		return Clss;
	}

};

// 0x40 (0xA0 - 0x60)
// Class Engine.MaterialExpressionTransform
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)
	enum class EMaterialVectorCoordTransformSource TransformSourceType;                               // 0x98(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMaterialVectorCoordTransform     TransformType;                                     // 0x99(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1419[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTransform");
		return Clss;
	}

};

// 0x40 (0xA0 - 0x60)
// Class Engine.MaterialExpressionTransformPosition
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)
	enum class EMaterialPositionTransformSource  TransformSourceType;                               // 0x98(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMaterialPositionTransformSource  TransformType;                                     // 0x99(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_141A[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTransformPosition");
		return Clss;
	}

};

// 0x38 (0x98 - 0x60)
// Class Engine.MaterialExpressionTruncate
class UMaterialExpressionTruncate : public UMaterialExpression
{
public:
	struct FExpressionInput                      Input;                                             // 0x60(0x38)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTruncate");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionTwoSidedSign
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionTwoSidedSign");
		return Clss;
	}

};

// 0x48 (0xA8 - 0x60)
// Class Engine.MaterialExpressionVectorNoise
class UMaterialExpressionVectorNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                      Position;                                          // 0x60(0x38)(NativeAccessSpecifierPublic)
	enum class EVectorNoiseFunction              NoiseFunction;                                     // 0x98(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_141B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Quality;                                           // 0x9C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTiling : 1;                                       // Mask: 0x1, PropSize: 0x10xA0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_14F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_141C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       TileSize;                                          // 0xA4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionVectorNoise");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionVertexColor
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionVertexColor");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionVertexNormalWS
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionVertexNormalWS");
		return Clss;
	}

};

// 0x8 (0x68 - 0x60)
// Class Engine.MaterialExpressionViewProperty
class UMaterialExpressionViewProperty : public UMaterialExpression
{
public:
	enum class EMaterialExposedViewProperty      Property;                                          // 0x60(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_141D[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionViewProperty");
		return Clss;
	}

};

// 0x0 (0x60 - 0x60)
// Class Engine.MaterialExpressionViewSize
class UMaterialExpressionViewSize : public UMaterialExpression
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionViewSize");
		return Clss;
	}

};

// 0x8 (0x68 - 0x60)
// Class Engine.MaterialExpressionWorldPosition
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:
	enum class EWorldPositionIncludedOffsets     WorldPositionShaderOffset;                         // 0x60(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_141E[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialExpressionWorldPosition");
		return Clss;
	}

};

// 0x40 (0x68 - 0x28)
// Class Engine.MaterialFunction
class UMaterialFunction : public UObject
{
public:
	struct FGuid                                 StateId;                                           // 0x28(0x10)(DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                Description;                                       // 0x38(0x10)(Edit, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bExposeToLibrary : 1;                              // Mask: 0x1, PropSize: 0x10x48(0x1)(Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_150 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_141F[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMaterialExpression*>           FunctionExpressions;                               // 0x50(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bReentrantFlag : 1;                                // Mask: 0x1, PropSize: 0x10x60(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1420[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialFunction");
		return Clss;
	}

};

// 0x918 (0x988 - 0x70)
// Class Engine.Material
class UMaterial : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                     PhysMaterial;                                      // 0x70(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColorMaterialInput                   DiffuseColor;                                      // 0x78(0x40)(Deprecated, NativeAccessSpecifierPublic)
	struct FColorMaterialInput                   SpecularColor;                                     // 0xB8(0x40)(Deprecated, NativeAccessSpecifierPublic)
	struct FColorMaterialInput                   BaseColor;                                         // 0xF8(0x40)(NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  Metallic;                                          // 0x138(0x40)(NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  Specular;                                          // 0x178(0x40)(NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  Roughness;                                         // 0x1B8(0x40)(NativeAccessSpecifierPublic)
	struct FVectorMaterialInput                  Normal;                                            // 0x1F8(0x48)(NativeAccessSpecifierPublic)
	struct FColorMaterialInput                   EmissiveColor;                                     // 0x240(0x40)(NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  Opacity;                                           // 0x280(0x40)(NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  OpacityMask;                                       // 0x2C0(0x40)(NativeAccessSpecifierPublic)
	enum class EMaterialDomain                   MaterialDomain;                                    // 0x300(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EBlendMode                        BlendMode;                                         // 0x301(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDecalBlendMode                   DecalBlendMode;                                    // 0x302(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMaterialDecalResponse            MaterialDecalResponse;                             // 0x303(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMaterialShadingModel             ShadingModel;                                      // 0x304(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1421[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        OpacityMaskClipValue;                              // 0x308(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1422[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVectorMaterialInput                  WorldPositionOffset;                               // 0x310(0x48)(NativeAccessSpecifierPublic)
	struct FVectorMaterialInput                  WorldDisplacement;                                 // 0x358(0x48)(NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  TessellationMultiplier;                            // 0x3A0(0x40)(NativeAccessSpecifierPublic)
	struct FColorMaterialInput                   SubsurfaceColor;                                   // 0x3E0(0x40)(NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  ClearCoat;                                         // 0x420(0x40)(NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  ClearCoatRoughness;                                // 0x460(0x40)(NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  AmbientOcclusion;                                  // 0x4A0(0x40)(NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  Refraction;                                        // 0x4E0(0x40)(NativeAccessSpecifierPublic)
	struct FVector2MaterialInput                 CustomizedUVs;                                     // 0x520(0x48)(NativeAccessSpecifierPublic)
	uint8                                        Pad_1423[0x1F8];                                   // Fixing Size After Last Property  [ Dumper-7 ]
	struct FMaterialAttributesInput              MaterialAttributes;                                // 0x760(0x40)(NativeAccessSpecifierPublic)
	struct FScalarMaterialInput                  PixelDepthOffset;                                  // 0x7A0(0x40)(NativeAccessSpecifierPublic)
	uint8                                        bEnableSeparateTranslucency : 1;                   // Mask: 0x1, PropSize: 0x10x7E0(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableMobileSeparateTranslucency : 1;             // Mask: 0x2, PropSize: 0x10x7E0(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableResponsiveAA : 1;                           // Mask: 0x4, PropSize: 0x10x7E0(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bScreenSpaceReflections : 1;                       // Mask: 0x8, PropSize: 0x10x7E0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        TwoSided : 1;                                      // Mask: 0x10, PropSize: 0x10x7E0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        DitheredLODTransition : 1;                         // Mask: 0x20, PropSize: 0x10x7E0(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        DitherOpacityMask : 1;                             // Mask: 0x40, PropSize: 0x10x7E0(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowNegativeEmissiveColor : 1;                   // Mask: 0x80, PropSize: 0x10x7E0(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1424[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        NumCustomizedUVs;                                  // 0x7E4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETranslucencyLightingMode         TranslucencyLightingMode;                          // 0x7E8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1425[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TranslucencyDirectionalLightingIntensity;          // 0x7EC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        AllowTranslucentCustomDepthWrites : 1;             // Mask: 0x1, PropSize: 0x10x7F0(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_151 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1426[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TranslucentShadowDensityScale;                     // 0x7F4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TranslucentSelfShadowDensityScale;                 // 0x7F8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TranslucentSelfShadowSecondDensityScale;           // 0x7FC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TranslucentSelfShadowSecondOpacity;                // 0x800(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TranslucentBackscatteringExponent;                 // 0x804(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          TranslucentMultipleScatteringExtinction;           // 0x808(0x10)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TranslucentShadowStartOffset;                      // 0x818(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableDepthTest : 1;                             // Mask: 0x1, PropSize: 0x10x81C(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGenerateSphericalParticleNormals : 1;             // Mask: 0x2, PropSize: 0x10x81C(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTangentSpaceNormal : 1;                           // Mask: 0x4, PropSize: 0x10x81C(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseEmissiveForDynamicAreaLighting : 1;            // Mask: 0x8, PropSize: 0x10x81C(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bBlockGI : 1;                                      // Mask: 0x10, PropSize: 0x10x81C(0x1)(Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedAsSpecialEngineMaterial : 1;                  // Mask: 0x20, PropSize: 0x10x81C(0x1)(DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithSkeletalMesh : 1;                         // Mask: 0x40, PropSize: 0x10x81C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithEditorCompositing : 1;                    // Mask: 0x80, PropSize: 0x10x81C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithParticleSprites : 1;                      // Mask: 0x1, PropSize: 0x10x81D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithBeamTrails : 1;                           // Mask: 0x2, PropSize: 0x10x81D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithMeshParticles : 1;                        // Mask: 0x4, PropSize: 0x10x81D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithStaticLighting : 1;                       // Mask: 0x8, PropSize: 0x10x81D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithMorphTargets : 1;                         // Mask: 0x10, PropSize: 0x10x81D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithSplineMeshes : 1;                         // Mask: 0x20, PropSize: 0x10x81D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithInstancedStaticMeshes : 1;                // Mask: 0x40, PropSize: 0x10x81D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsesDistortion : 1;                               // Mask: 0x80, PropSize: 0x10x81D(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithClothing : 1;                             // Mask: 0x1, PropSize: 0x10x81E(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsedWithUI : 1;                                   // Mask: 0x2, PropSize: 0x10x81E(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutomaticallySetUsageInEditor : 1;                // Mask: 0x4, PropSize: 0x10x81E(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFullyRough : 1;                                   // Mask: 0x8, PropSize: 0x10x81E(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseFullPrecision : 1;                             // Mask: 0x10, PropSize: 0x10x81E(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseLightmapDirectionality : 1;                    // Mask: 0x20, PropSize: 0x10x81E(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseHQForwardReflections : 1;                      // Mask: 0x40, PropSize: 0x10x81E(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsePlanarForwardReflections : 1;                  // Mask: 0x80, PropSize: 0x10x81E(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNormalCurvatureToRoughness : 1;                   // Mask: 0x1, PropSize: 0x10x81F(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_152 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	enum class EMaterialTessellationMode         D3D11TessellationMode;                             // 0x820(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1427[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bEnableCrackFreeDisplacement : 1;                  // Mask: 0x1, PropSize: 0x10x824(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableAdaptiveTessellation : 1;                   // Mask: 0x2, PropSize: 0x10x824(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_153 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1428[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxDisplacement;                                   // 0x828(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Wireframe : 1;                                     // Mask: 0x1, PropSize: 0x10x82C(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOutputVelocityOnBasePass : 1;                     // Mask: 0x2, PropSize: 0x10x82C(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_154 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1429[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        EditorX;                                           // 0x830(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        EditorY;                                           // 0x834(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        EditorPitch;                                       // 0x838(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        EditorYaw;                                         // 0x83C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialExpression*>           Expressions;                                       // 0x840(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMaterialFunctionInfo>         MaterialFunctionInfos;                             // 0x850(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMaterialParameterCollectionInfo> MaterialParameterCollectionInfos;                  // 0x860(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bCanMaskedBeAssumedOpaque : 1;                     // Mask: 0x1, PropSize: 0x10x870(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsMasked : 1;                                     // Mask: 0x2, PropSize: 0x10x870(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsPreviewMaterial : 1;                            // Mask: 0x4, PropSize: 0x10x870(0x1)(Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseMaterialAttributes : 1;                        // Mask: 0x8, PropSize: 0x10x870(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseTranslucencyVertexFog : 1;                     // Mask: 0x10, PropSize: 0x10x870(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bComputeFogPerPixel : 1;                           // Mask: 0x20, PropSize: 0x10x870(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAllowDevelopmentShaderCompile : 1;                // Mask: 0x40, PropSize: 0x10x870(0x1)(Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsMaterialEditorStatsMaterial : 1;                // Mask: 0x80, PropSize: 0x10x870(0x1)(Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_142A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       UsageFlagWarnings;                                 // 0x874(0x4)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EBlendableLocation                BlendableLocation;                                 // 0x878(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_142B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        BlendablePriority;                                 // 0x87C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         BlendableOutputAlpha;                              // 0x880(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ERefractionMode                   RefractionMode;                                    // 0x881(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_142C[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RefractionDepthBias;                               // 0x884(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                 StateId;                                           // 0x888(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_142D[0xE0];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UTexture*>                      ExpressionTextureReferences;                       // 0x978(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Material");
		return Clss;
	}

};

// 0x50 (0x200 - 0x1B0)
// Class Engine.MaterialInstanceDynamic
class UMaterialInstanceDynamic : public UMaterialInstance
{
public:
	uint8                                        Pad_1431[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialInstanceDynamic");
		return Clss;
	}

	void SetVectorParameterValue(class FName ParameterName, const struct FLinearColor& Value);
	void SetTextureParameterValue(class FName ParameterName, class UTexture* Value);
	void SetScalarParameterValue(class FName ParameterName, float Value);
	void K2_InterpolateMaterialInstanceParams(class UMaterialInstance* SourceA, class UMaterialInstance* SourceB, float Alpha);
	struct FLinearColor K2_GetVectorParameterValue(class FName ParameterName);
	class UTexture* K2_GetTextureParameterValue(class FName ParameterName);
	float K2_GetScalarParameterValue(class FName ParameterName);
	void K2_CopyMaterialInstanceParameters(class UMaterialInterface* Source);
	void CopyParameterOverrides(class UMaterialInstance* MaterialInstance);
	void CopyInterpParameters(class UMaterialInstance* Source);
};

// 0x40 (0x68 - 0x28)
// Class Engine.MaterialParameterCollection
class UMaterialParameterCollection : public UObject
{
public:
	struct FGuid                                 StateId;                                           // 0x28(0x10)(DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCollectionScalarParameter>    ScalarParameters;                                  // 0x38(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCollectionVectorParameter>    VectorParameters;                                  // 0x48(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1432[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialParameterCollection");
		return Clss;
	}

};

// 0xC0 (0xE8 - 0x28)
// Class Engine.MaterialParameterCollectionInstance
class UMaterialParameterCollectionInstance : public UObject
{
public:
	uint8                                        Pad_1433[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UMaterialParameterCollection*          Collection;                                        // 0x30(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWorld*                                World;                                             // 0x38(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1434[0xA8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MaterialParameterCollectionInstance");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.MatineeInterface
class UMatineeInterface : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MatineeInterface");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.MorphTarget
class UMorphTarget : public UObject
{
public:
	class USkeletalMesh*                         BaseSkelMesh;                                      // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1435[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MorphTarget");
		return Clss;
	}

};

// 0x0 (0x40 - 0x40)
// Class Engine.NavArea_Default
class UNavArea_Default : public UNavArea
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavArea_Default");
		return Clss;
	}

};

// 0x0 (0x40 - 0x40)
// Class Engine.NavArea_LowHeight
class UNavArea_LowHeight : public UNavArea
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavArea_LowHeight");
		return Clss;
	}

};

// 0x0 (0x40 - 0x40)
// Class Engine.NavArea_Null
class UNavArea_Null : public UNavArea
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavArea_Null");
		return Clss;
	}

};

// 0x0 (0x40 - 0x40)
// Class Engine.NavArea_Obstacle
class UNavArea_Obstacle : public UNavArea
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavArea_Obstacle");
		return Clss;
	}

};

// 0x80 (0xC0 - 0x40)
// Class Engine.NavAreaMeta_SwitchByAgent
class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
{
public:
	TSubclassOf<class UNavArea>                  Agent0Area;                                        // 0x40(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                  Agent1Area;                                        // 0x48(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                  Agent2Area;                                        // 0x50(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                  Agent3Area;                                        // 0x58(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                  Agent4Area;                                        // 0x60(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                  Agent5Area;                                        // 0x68(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                  Agent6Area;                                        // 0x70(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                  Agent7Area;                                        // 0x78(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                  Agent8Area;                                        // 0x80(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                  Agent9Area;                                        // 0x88(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                  Agent10Area;                                       // 0x90(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                  Agent11Area;                                       // 0x98(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                  Agent12Area;                                       // 0xA0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                  Agent13Area;                                       // 0xA8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                  Agent14Area;                                       // 0xB0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                  Agent15Area;                                       // 0xB8(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavAreaMeta_SwitchByAgent");
		return Clss;
	}

};

// 0xE8 (0x110 - 0x28)
// Class Engine.NavCollision
class UNavCollision : public UObject
{
public:
	uint8                                        Pad_1436[0x50];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FNavCollisionCylinder>         CylinderCollision;                                 // 0x78(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNavCollisionBox>              BoxCollision;                                      // 0x88(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                  AreaClass;                                         // 0x98(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIsDynamicObstacle : 1;                            // Mask: 0x1, PropSize: 0x10xA0(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGatherConvexGeometry : 1;                         // Mask: 0x2, PropSize: 0x10xA0(0x1)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1437[0x6F];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavCollision");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.NavEdgeProviderInterface
class UNavEdgeProviderInterface : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavEdgeProviderInterface");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.NavigationDataChunk
class UNavigationDataChunk : public UObject
{
public:
	class FName                                  NavigationDataName;                                // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavigationDataChunk");
		return Clss;
	}

};

// 0x10 (0x40 - 0x30)
// Class Engine.RecastNavMeshDataChunk
class URecastNavMeshDataChunk : public UNavigationDataChunk
{
public:
	uint8                                        Pad_1438[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RecastNavMeshDataChunk");
		return Clss;
	}

};

// 0x98 (0xC0 - 0x28)
// Class Engine.NavigationPath
class UNavigationPath : public UObject
{
public:
	UMulticastDelegateProperty_                  PathUpdatedNotifier;                               // 0x28(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FVector>                       PathPoints;                                        // 0x38(0x10)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	enum class ENavigationOptionFlag             RecalculateOnInvalidation;                         // 0x48(0x1)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_143A[0x77];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavigationPath");
		return Clss;
	}

	bool IsValid();
	bool IsStringPulled();
	bool IsPartial();
	float GetPathLength();
	float GetPathCost();
	class FString GetDebugString();
	void EnableRecalculationOnInvalidation(enum class ENavigationOptionFlag DoRecalculation);
	void EnableDebugDrawing(bool bShouldDrawDebugData, const struct FLinearColor& PathColor);
};

// 0x0 (0x28 - 0x28)
// Class Engine.NavigationPathGenerator
class UNavigationPathGenerator : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavigationPathGenerator");
		return Clss;
	}

};

// 0x0 (0x48 - 0x48)
// Class Engine.RecastFilter_UseDefaultArea
class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("RecastFilter_UseDefaultArea");
		return Clss;
	}

};

// 0x0 (0x50 - 0x50)
// Class Engine.NavLinkTrivial
class UNavLinkTrivial : public UNavLinkDefinition
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavLinkTrivial");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.NavNodeInterface
class UNavNodeInterface : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("NavNodeInterface");
		return Clss;
	}

};

// 0x138 (0x160 - 0x28)
// Class Engine.ObjectLibrary
class UObjectLibrary : public UObject
{
public:
	class UClass*                                ObjectBaseClass;                                   // 0x28(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHasBlueprintClasses;                              // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_143B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UObject*>                       Objects;                                           // 0x38(0x10)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class UObject>>        WeakObjects;                                       // 0x48(0x10)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                         bUseWeakReferences;                                // 0x58(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bIsFullyLoaded;                                    // 0x59(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_143C[0x106];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ObjectLibrary");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.ObjectReferencer
class UObjectReferencer : public UObject
{
public:
	TArray<class UObject*>                       ReferencedObjects;                                 // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ObjectReferencer");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.OnlineEngineInterface
class UOnlineEngineInterface : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("OnlineEngineInterface");
		return Clss;
	}

};

// 0x148 (0x170 - 0x28)
// Class Engine.ParticleEmitter
class UParticleEmitter : public UObject
{
public:
	class FName                                  EmitterName;                                       // 0x28(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SubUVDataOffset;                                   // 0x30(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EEmitterRenderMode                EmitterRenderMode;                                 // 0x34(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_143D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UParticleLODLevel*>             LODLevels;                                         // 0x38(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        ConvertedModules : 1;                              // Mask: 0x1, PropSize: 0x10x48(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_155 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_143E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        PeakActiveParticles;                               // 0x4C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        InitialAllocationCount;                            // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MediumDetailSpawnRateScale;                        // 0x54(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        QualityLevelSpawnRateScale;                        // 0x58(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EDetailMode                       DetailMode;                                        // 0x5C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_143F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bIsSoloing : 1;                                    // Mask: 0x1, PropSize: 0x10x60(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCookedOut : 1;                                    // Mask: 0x2, PropSize: 0x10x60(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisabledLODsKeepEmitterAlive : 1;                 // Mask: 0x4, PropSize: 0x10x60(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDisableWhenInsignficant : 1;                      // Mask: 0x8, PropSize: 0x10x60(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_156 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1440[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EParticleSignificanceLevel        SignificanceLevel;                                 // 0x64(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1441[0x10B];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleEmitter");
		return Clss;
	}

};

// 0x0 (0x170 - 0x170)
// Class Engine.ParticleSpriteEmitter
class UParticleSpriteEmitter : public UParticleEmitter
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleSpriteEmitter");
		return Clss;
	}

};

// 0x90 (0xB8 - 0x28)
// Class Engine.ParticleLODLevel
class UParticleLODLevel : public UObject
{
public:
	int32                                        Level;                                             // 0x28(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnabled : 1;                                      // Mask: 0x1, PropSize: 0x10x2C(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_157 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1442[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UParticleModuleRequired*               RequiredModule;                                    // 0x30(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleModule*>               Modules;                                           // 0x38(0x10)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UParticleModuleTypeDataBase*           TypeDataModule;                                    // 0x48(0x8)(ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleModuleSpawn*                  SpawnModule;                                       // 0x50(0x8)(ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleModuleEventGenerator*         EventGenerator;                                    // 0x58(0x8)(ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleModuleSpawnBase*>      SpawningModules;                                   // 0x60(0x10)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	TArray<class UParticleModule*>               SpawnModules;                                      // 0x70(0x10)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	TArray<class UParticleModule*>               UpdateModules;                                     // 0x80(0x10)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	TArray<class UParticleModuleOrbit*>          OrbitModules;                                      // 0x90(0x10)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	TArray<class UParticleModuleEventReceiverBase*> EventReceiverModules;                              // 0xA0(0x10)(ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	uint8                                        ConvertedModules : 1;                              // Mask: 0x1, PropSize: 0x10xB0(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_158 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1443[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        PeakActiveParticles;                               // 0xB4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleLODLevel");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.ParticleModule
class UParticleModule : public UObject
{
public:
	uint8                                        bSpawnModule : 1;                                  // Mask: 0x1, PropSize: 0x10x28(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUpdateModule : 1;                                 // Mask: 0x2, PropSize: 0x10x28(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFinalUpdateModule : 1;                            // Mask: 0x4, PropSize: 0x10x28(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUpdateForGPUEmitter : 1;                          // Mask: 0x8, PropSize: 0x10x28(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCurvesAsColor : 1;                                // Mask: 0x10, PropSize: 0x10x28(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        b3DDrawMode : 1;                                   // Mask: 0x20, PropSize: 0x10x28(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupported3DDrawMode : 1;                          // Mask: 0x40, PropSize: 0x10x28(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnabled : 1;                                      // Mask: 0x80, PropSize: 0x10x28(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEditable : 1;                                     // Mask: 0x1, PropSize: 0x10x29(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        LODDuplicate : 1;                                  // Mask: 0x2, PropSize: 0x10x29(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSupportsRandomSeed : 1;                           // Mask: 0x4, PropSize: 0x10x29(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRequiresLoopingNotification : 1;                  // Mask: 0x8, PropSize: 0x10x29(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_159 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1444[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        LODValidity;                                       // 0x2C(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1445[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModule");
		return Clss;
	}

};

// 0x8 (0x38 - 0x30)
// Class Engine.ParticleModuleAccelerationBase
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	uint8                                        bAlwaysInWorldSpace : 1;                           // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1446[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAccelerationBase");
		return Clss;
	}

};

// 0x58 (0x90 - 0x38)
// Class Engine.ParticleModuleAcceleration
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                Acceleration;                                      // 0x38(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bApplyOwnerScale : 1;                              // Mask: 0x1, PropSize: 0x10x88(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1447[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAcceleration");
		return Clss;
	}

};

// 0x10 (0x48 - 0x38)
// Class Engine.ParticleModuleAccelerationConstant
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{
public:
	struct FVector                               Acceleration;                                      // 0x38(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1448[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAccelerationConstant");
		return Clss;
	}

};

// 0x40 (0x78 - 0x38)
// Class Engine.ParticleModuleAccelerationDrag
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                    DragCoefficient;                                   // 0x38(0x8)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 DragCoefficientRaw;                                // 0x40(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAccelerationDrag");
		return Clss;
	}

};

// 0x40 (0x78 - 0x38)
// Class Engine.ParticleModuleAccelerationDragScaleOverLife
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                    DragScale;                                         // 0x38(0x8)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 DragScaleRaw;                                      // 0x40(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAccelerationDragScaleOverLife");
		return Clss;
	}

};

// 0x50 (0x88 - 0x38)
// Class Engine.ParticleModuleAccelerationOverLifetime
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                AccelOverLife;                                     // 0x38(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAccelerationOverLifetime");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleAttractorBase
class UParticleModuleAttractorBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAttractorBase");
		return Clss;
	}

};

// 0x88 (0xB8 - 0x30)
// Class Engine.ParticleModuleAttractorLine
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FVector                               EndPoint0;                                         // 0x30(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               EndPoint1;                                         // 0x3C(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Range;                                             // 0x48(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Strength;                                          // 0x80(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAttractorLine");
		return Clss;
	}

};

// 0x90 (0xC0 - 0x30)
// Class Engine.ParticleModuleAttractorParticle
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	class FName                                  EmitterName;                                       // 0x30(0x8)(Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Range;                                             // 0x38(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bStrengthByDistance : 1;                           // Mask: 0x1, PropSize: 0x10x70(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_15A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1449[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 Strength;                                          // 0x78(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bAffectBaseVelocity : 1;                           // Mask: 0x1, PropSize: 0x10xB0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_15B : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_144A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EAttractorParticleSelectionMethod SelectionMethod;                                   // 0xB4(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_144B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bRenewSource : 1;                                  // Mask: 0x1, PropSize: 0x10xB8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInheritSourceVel : 1;                             // Mask: 0x2, PropSize: 0x10xB8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_15C : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_144C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        LastSelIndex;                                      // 0xBC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAttractorParticle");
		return Clss;
	}

};

// 0xC8 (0xF8 - 0x30)
// Class Engine.ParticleModuleAttractorPoint
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                Position;                                          // 0x30(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Range;                                             // 0x80(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Strength;                                          // 0xB8(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        StrengthByDistance : 1;                            // Mask: 0x1, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAffectBaseVelocity : 1;                           // Mask: 0x2, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideVelocity : 1;                             // Mask: 0x4, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseWorldSpacePosition : 1;                        // Mask: 0x8, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Positive_X : 1;                                    // Mask: 0x10, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Positive_Y : 1;                                    // Mask: 0x20, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Positive_Z : 1;                                    // Mask: 0x40, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Negative_X : 1;                                    // Mask: 0x80, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Negative_Y : 1;                                    // Mask: 0x1, PropSize: 0x10xF1(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Negative_Z : 1;                                    // Mask: 0x2, PropSize: 0x10xF1(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_144D[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAttractorPoint");
		return Clss;
	}

};

// 0x50 (0x80 - 0x30)
// Class Engine.ParticleModuleAttractorPointGravity
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{
public:
	struct FVector                               Position;                                          // 0x30(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Radius;                                            // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDistributionFloat*                    Strength;                                          // 0x40(0x8)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 StrengthRaw;                                       // 0x48(0x38)(Edit, NoClear, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleAttractorPointGravity");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleBeamBase
class UParticleModuleBeamBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleBeamBase");
		return Clss;
	}

};

// 0xF0 (0x120 - 0x30)
// Class Engine.ParticleModuleBeamModifier
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	enum class EBeamModifierType                 ModifierType;                                      // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_144E[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBeamModifierOptions                  PositionOptions;                                   // 0x34(0x4)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                Position;                                          // 0x38(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FBeamModifierOptions                  TangentOptions;                                    // 0x88(0x4)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_144F[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                Tangent;                                           // 0x90(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bAbsoluteTangent : 1;                              // Mask: 0x1, PropSize: 0x10xE0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_15D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1450[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FBeamModifierOptions                  StrengthOptions;                                   // 0xE4(0x4)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Strength;                                          // 0xE8(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleBeamModifier");
		return Clss;
	}

};

// 0x188 (0x1B8 - 0x30)
// Class Engine.ParticleModuleBeamNoise
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	uint8                                        bLowFreq_Enabled : 1;                              // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_15E : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1451[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        Frequency;                                         // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Frequency_LowRange;                                // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1452[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                NoiseRange;                                        // 0x40(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 NoiseRangeScale;                                   // 0x90(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bNRScaleEmitterTime : 1;                           // Mask: 0x1, PropSize: 0x10xC8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_15F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1453[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                NoiseSpeed;                                        // 0xD0(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bSmooth : 1;                                       // Mask: 0x1, PropSize: 0x10x120(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_160 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1454[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        NoiseLockRadius;                                   // 0x124(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNoiseLock : 1;                                    // Mask: 0x1, PropSize: 0x10x128(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOscillate : 1;                                    // Mask: 0x2, PropSize: 0x10x128(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_161 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1455[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        NoiseLockTime;                                     // 0x12C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NoiseTension;                                      // 0x130(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseNoiseTangents : 1;                             // Mask: 0x1, PropSize: 0x10x134(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_162 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1456[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 NoiseTangentStrength;                              // 0x138(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                        NoiseTessellation;                                 // 0x170(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTargetNoise : 1;                                  // Mask: 0x1, PropSize: 0x10x174(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_163 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1457[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        FrequencyDistance;                                 // 0x178(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bApplyNoiseScale : 1;                              // Mask: 0x1, PropSize: 0x10x17C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_164 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1458[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 NoiseScale;                                        // 0x180(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleBeamNoise");
		return Clss;
	}

};

// 0x108 (0x138 - 0x30)
// Class Engine.ParticleModuleBeamSource
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	enum class EBeam2SourceTargetMethod          SourceMethod;                                      // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1459[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  SourceName;                                        // 0x38(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSourceAbsolute : 1;                               // Mask: 0x1, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_165 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_145A[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                Source;                                            // 0x48(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bLockSource : 1;                                   // Mask: 0x1, PropSize: 0x10x98(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_166 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_145B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EBeam2SourceTargetTangentMethod   SourceTangentMethod;                               // 0x9C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_145C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                SourceTangent;                                     // 0xA0(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bLockSourceTangent : 1;                            // Mask: 0x1, PropSize: 0x10xF0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_167 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_145D[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 SourceStrength;                                    // 0xF8(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bLockSourceStength : 1;                            // Mask: 0x1, PropSize: 0x10x130(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_145E[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleBeamSource");
		return Clss;
	}

};

// 0x108 (0x138 - 0x30)
// Class Engine.ParticleModuleBeamTarget
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	enum class EBeam2SourceTargetMethod          TargetMethod;                                      // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_145F[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  TargetName;                                        // 0x38(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                Target;                                            // 0x40(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bTargetAbsolute : 1;                               // Mask: 0x1, PropSize: 0x10x90(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLockTarget : 1;                                   // Mask: 0x2, PropSize: 0x10x90(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_168 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1460[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EBeam2SourceTargetTangentMethod   TargetTangentMethod;                               // 0x94(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1461[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                TargetTangent;                                     // 0x98(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bLockTargetTangent : 1;                            // Mask: 0x1, PropSize: 0x10xE8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_169 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1462[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 TargetStrength;                                    // 0xF0(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bLockTargetStength : 1;                            // Mask: 0x1, PropSize: 0x10x128(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_16A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1463[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LockRadius;                                        // 0x12C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1464[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleBeamTarget");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleCameraBase
class UParticleModuleCameraBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleCameraBase");
		return Clss;
	}

};

// 0x40 (0x70 - 0x30)
// Class Engine.ParticleModuleCameraOffset
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{
public:
	struct FRawDistributionFloat                 CameraOffset;                                      // 0x30(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bSpawnTimeOnly : 1;                                // Mask: 0x1, PropSize: 0x10x68(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_16B : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1465[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EParticleCameraOffsetUpdateMethod UpdateMethod;                                      // 0x6C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1466[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleCameraOffset");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleCollisionBase
class UParticleModuleCollisionBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleCollisionBase");
		return Clss;
	}

};

// 0x188 (0x1B8 - 0x30)
// Class Engine.ParticleModuleCollision
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                DampingFactor;                                     // 0x30(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                DampingFactorRotation;                             // 0x80(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 MaxCollisions;                                     // 0xD0(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	enum class EParticleCollisionComplete        CollisionCompletionOption;                         // 0x108(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1467[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<enum class EObjectTypeQuery>          CollisionTypes;                                    // 0x110(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1468[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bApplyPhysics : 1;                                 // Mask: 0x1, PropSize: 0x10x128(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreTriggerVolumes : 1;                         // Mask: 0x2, PropSize: 0x10x128(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_16C : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1469[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 ParticleMass;                                      // 0x130(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                        DirScalar;                                         // 0x168(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bPawnsDoNotDecrementCount : 1;                     // Mask: 0x1, PropSize: 0x10x16C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOnlyVerticalNormalsDecrementCount : 1;            // Mask: 0x2, PropSize: 0x10x16C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_16D : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_146A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        VerticalFudgeFactor;                               // 0x170(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_146B[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 DelayAmount;                                       // 0x178(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bDropDetail : 1;                                   // Mask: 0x1, PropSize: 0x10x1B0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCollideOnlyIfVisible : 1;                         // Mask: 0x2, PropSize: 0x10x1B0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreSourceActor : 1;                            // Mask: 0x4, PropSize: 0x10x1B0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_16E : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_146C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MaxCollisionDistance;                              // 0x1B4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleCollision");
		return Clss;
	}

};

// 0x88 (0xB8 - 0x30)
// Class Engine.ParticleModuleCollisionGPU
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionFloat                 Resilience;                                        // 0x30(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 ResilienceScaleOverLife;                           // 0x68(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                        Friction;                                          // 0xA0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RandomSpread;                                      // 0xA4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RandomDistribution;                                // 0xA8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RadiusScale;                                       // 0xAC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RadiusBias;                                        // 0xB0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EParticleCollisionResponse        Response;                                          // 0xB4(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EParticleCollisionMode            CollisionMode;                                     // 0xB5(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_146D[0x2];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleCollisionGPU");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleColorBase
class UParticleModuleColorBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleColorBase");
		return Clss;
	}

};

// 0x90 (0xC0 - 0x30)
// Class Engine.ParticleModuleColor
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                StartColor;                                        // 0x30(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 StartAlpha;                                        // 0x80(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bClampAlpha : 1;                                   // Mask: 0x1, PropSize: 0x10xB8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_146E[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleColor");
		return Clss;
	}

};

// 0x20 (0xE0 - 0xC0)
// Class Engine.ParticleModuleColor_Seeded
class UParticleModuleColor_Seeded : public UParticleModuleColor
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0xC0(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleColor_Seeded");
		return Clss;
	}

};

// 0x90 (0xC0 - 0x30)
// Class Engine.ParticleModuleColorOverLife
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                ColorOverLife;                                     // 0x30(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 AlphaOverLife;                                     // 0x80(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bClampAlpha : 1;                                   // Mask: 0x1, PropSize: 0x10xB8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_146F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleColorOverLife");
		return Clss;
	}

};

// 0x90 (0xC0 - 0x30)
// Class Engine.ParticleModuleColorScaleOverLife
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                ColorScaleOverLife;                                // 0x30(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 AlphaScaleOverLife;                                // 0x80(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bEmitterTime : 1;                                  // Mask: 0x1, PropSize: 0x10xB8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1470[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleColorScaleOverLife");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleEventBase
class UParticleModuleEventBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleEventBase");
		return Clss;
	}

};

// 0x10 (0x40 - 0x30)
// Class Engine.ParticleModuleEventGenerator
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray<struct FParticleEvent_GenerateInfo>   Events;                                            // 0x30(0x10)(Edit, ExportObject, ZeroConstructor, NoClear, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleEventGenerator");
		return Clss;
	}

};

// 0x10 (0x40 - 0x30)
// Class Engine.ParticleModuleEventReceiverBase
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	enum class EParticleEventType                EventGeneratorType;                                // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1471[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  EventName;                                         // 0x38(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleEventReceiverBase");
		return Clss;
	}

};

// 0x8 (0x48 - 0x40)
// Class Engine.ParticleModuleEventReceiverKillParticles
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{
public:
	uint8                                        bStopSpawning : 1;                                 // Mask: 0x1, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1472[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleEventReceiverKillParticles");
		return Clss;
	}

};

// 0xA8 (0xE8 - 0x40)
// Class Engine.ParticleModuleEventReceiverSpawn
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	struct FRawDistributionFloat                 SpawnCount;                                        // 0x40(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bUseParticleTime : 1;                              // Mask: 0x1, PropSize: 0x10x78(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsePSysLocation : 1;                              // Mask: 0x2, PropSize: 0x10x78(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInheritVelocity : 1;                              // Mask: 0x4, PropSize: 0x10x78(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_16F : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1473[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                InheritVelocityScale;                              // 0x80(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UPhysicalMaterial*>             PhysicalMaterials;                                 // 0xD0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bBanPhysicalMaterials : 1;                         // Mask: 0x1, PropSize: 0x10xE0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1474[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleEventReceiverSpawn");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleKillBase
class UParticleModuleKillBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleKillBase");
		return Clss;
	}

};

// 0xA8 (0xD8 - 0x30)
// Class Engine.ParticleModuleKillBox
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                LowerLeftCorner;                                   // 0x30(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                UpperRightCorner;                                  // 0x80(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bAbsolute : 1;                                     // Mask: 0x1, PropSize: 0x10xD0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bKillInside : 1;                                   // Mask: 0x2, PropSize: 0x10xD0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAxisAlignedAndFixedSize : 1;                      // Mask: 0x4, PropSize: 0x10xD0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1475[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleKillBox");
		return Clss;
	}

};

// 0x40 (0x70 - 0x30)
// Class Engine.ParticleModuleKillHeight
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                 Height;                                            // 0x30(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bAbsolute : 1;                                     // Mask: 0x1, PropSize: 0x10x68(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFloor : 1;                                        // Mask: 0x2, PropSize: 0x10x68(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bApplyPSysScale : 1;                               // Mask: 0x4, PropSize: 0x10x68(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1476[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleKillHeight");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleLifetimeBase
class UParticleModuleLifetimeBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLifetimeBase");
		return Clss;
	}

};

// 0x38 (0x68 - 0x30)
// Class Engine.ParticleModuleLifetime
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                 LifeTime;                                          // 0x30(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLifetime");
		return Clss;
	}

};

// 0x20 (0x88 - 0x68)
// Class Engine.ParticleModuleLifetime_Seeded
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x68(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLifetime_Seeded");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleLightBase
class UParticleModuleLightBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLightBase");
		return Clss;
	}

};

// 0x110 (0x140 - 0x30)
// Class Engine.ParticleModuleLight
class UParticleModuleLight : public UParticleModuleLightBase
{
public:
	bool                                         bUseInverseSquaredFalloff;                         // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAffectsTranslucency;                              // 0x31(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPreviewLightRadius;                               // 0x32(0x1)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1477[0x1];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        SpawnFraction;                                     // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                ColorScaleOverLife;                                // 0x38(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 BrightnessOverLife;                                // 0x88(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 RadiusScale;                                       // 0xC0(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 LightExponent;                                     // 0xF8(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FLightingChannels                     LightingChannels;                                  // 0x130(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                        Pad_1478[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        VolumetricScatteringIntensity;                     // 0x134(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bHighQualityLights;                                // 0x138(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bShadowCastingLights;                              // 0x139(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1479[0x6];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLight");
		return Clss;
	}

};

// 0x20 (0x160 - 0x140)
// Class Engine.ParticleModuleLight_Seeded
class UParticleModuleLight_Seeded : public UParticleModuleLight
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x140(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLight_Seeded");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleLocationBase
class UParticleModuleLocationBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationBase");
		return Clss;
	}

};

// 0x58 (0x88 - 0x30)
// Class Engine.ParticleModuleLocation
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                StartLocation;                                     // 0x30(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                        DistributeOverNPoints;                             // 0x80(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistributeThreshold;                               // 0x84(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocation");
		return Clss;
	}

};

// 0x20 (0xA8 - 0x88)
// Class Engine.ParticleModuleLocation_Seeded
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x88(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocation_Seeded");
		return Clss;
	}

};

// 0x0 (0x88 - 0x88)
// Class Engine.ParticleModuleLocationWorldOffset
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationWorldOffset");
		return Clss;
	}

};

// 0x20 (0xA8 - 0x88)
// Class Engine.ParticleModuleLocationWorldOffset_Seeded
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x88(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationWorldOffset_Seeded");
		return Clss;
	}

};

// 0x40 (0x70 - 0x30)
// Class Engine.ParticleModuleLocationBoneSocket
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{
public:
	enum class ELocationBoneSocketSource         SourceType;                                        // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_147A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               UniversalOffset;                                   // 0x34(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLocationBoneSocketInfo>       SourceLocations;                                   // 0x40(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	enum class ELocationBoneSocketSelectionMethod SelectionMethod;                                   // 0x50(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_147B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUpdatePositionEachFrame : 1;                      // Mask: 0x1, PropSize: 0x10x54(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOrientMeshEmitters : 1;                           // Mask: 0x2, PropSize: 0x10x54(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInheritBoneVelocity : 1;                          // Mask: 0x4, PropSize: 0x10x54(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_170 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_147C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InheritVelocityScale;                              // 0x58(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_147D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  SkelMeshActorParamName;                            // 0x60(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumPreSelectedIndices;                             // 0x68(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_147E[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationBoneSocket");
		return Clss;
	}

};

// 0x140 (0x170 - 0x30)
// Class Engine.ParticleModuleLocationDirect
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                Location;                                          // 0x30(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                LocationOffset;                                    // 0x80(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                ScaleFactor;                                       // 0xD0(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                Direction;                                         // 0x120(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationDirect");
		return Clss;
	}

};

// 0x20 (0x50 - 0x30)
// Class Engine.ParticleModuleLocationEmitter
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	class FName                                  EmitterName;                                       // 0x30(0x8)(Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ELocationEmitterSelectionMethod   SelectionMethod;                                   // 0x38(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_147F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        InheritSourceVelocity : 1;                         // Mask: 0x1, PropSize: 0x10x3C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_171 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1480[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InheritSourceVelocityScale;                        // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInheritSourceRotation : 1;                        // Mask: 0x1, PropSize: 0x10x44(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_172 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1481[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InheritSourceRotationScale;                        // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1482[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationEmitter");
		return Clss;
	}

};

// 0x8 (0x38 - 0x30)
// Class Engine.ParticleModuleLocationEmitterDirect
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	class FName                                  EmitterName;                                       // 0x30(0x8)(Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationEmitterDirect");
		return Clss;
	}

};

// 0x90 (0xC0 - 0x30)
// Class Engine.ParticleModuleLocationPrimitiveBase
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	uint8                                        Positive_X : 1;                                    // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Positive_Y : 1;                                    // Mask: 0x2, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Positive_Z : 1;                                    // Mask: 0x4, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Negative_X : 1;                                    // Mask: 0x8, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Negative_Y : 1;                                    // Mask: 0x10, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Negative_Z : 1;                                    // Mask: 0x20, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        SurfaceOnly : 1;                                   // Mask: 0x40, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Velocity : 1;                                      // Mask: 0x80, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1483[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 VelocityScale;                                     // 0x38(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                StartLocation;                                     // 0x70(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationPrimitiveBase");
		return Clss;
	}

};

// 0x80 (0x140 - 0xC0)
// Class Engine.ParticleModuleLocationPrimitiveCylinder
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	uint8                                        RadialVelocity : 1;                                // Mask: 0x1, PropSize: 0x10xC0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_173 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1484[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 StartRadius;                                       // 0xC8(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 StartHeight;                                       // 0x100(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	enum class ECylinderHeightAxis               HeightAxis;                                        // 0x138(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1485[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationPrimitiveCylinder");
		return Clss;
	}

};

// 0x20 (0x160 - 0x140)
// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x140(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationPrimitiveCylinder_Seeded");
		return Clss;
	}

};

// 0x38 (0xF8 - 0xC0)
// Class Engine.ParticleModuleLocationPrimitiveSphere
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                 StartRadius;                                       // 0xC0(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationPrimitiveSphere");
		return Clss;
	}

};

// 0x20 (0x118 - 0xF8)
// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0xF8(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationPrimitiveSphere_Seeded");
		return Clss;
	}

};

// 0xF8 (0x128 - 0x30)
// Class Engine.ParticleModuleLocationPrimitiveTriangle
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                StartOffset;                                       // 0x30(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Height;                                            // 0x80(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Angle;                                             // 0xB8(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Thickness;                                         // 0xF0(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationPrimitiveTriangle");
		return Clss;
	}

};

// 0x60 (0x90 - 0x30)
// Class Engine.ParticleModuleLocationSkelVertSurface
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{
public:
	enum class ELocationSkelVertSurfaceSource    SourceType;                                        // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1486[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               UniversalOffset;                                   // 0x34(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUpdatePositionEachFrame : 1;                      // Mask: 0x1, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOrientMeshEmitters : 1;                           // Mask: 0x2, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInheritBoneVelocity : 1;                          // Mask: 0x4, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_174 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1487[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        InheritVelocityScale;                              // 0x44(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  SkelMeshActorParamName;                            // 0x48(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                          ValidAssociatedBones;                              // 0x50(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bEnforceNormalCheck : 1;                           // Mask: 0x1, PropSize: 0x10x60(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_175 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1488[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               NormalToCompare;                                   // 0x64(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NormalCheckToleranceDegrees;                       // 0x70(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NormalCheckTolerance;                              // 0x74(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                ValidMaterialIndices;                              // 0x78(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bInheritVertexColor : 1;                           // Mask: 0x1, PropSize: 0x10x88(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bInheritUV : 1;                                    // Mask: 0x2, PropSize: 0x10x88(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_176 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1489[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint32                                       InheritUVChannel;                                  // 0x8C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleLocationSkelVertSurface");
		return Clss;
	}

};

// 0x8 (0x38 - 0x30)
// Class Engine.ParticleModulePivotOffset
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{
public:
	struct FVector2D                             PivotOffset;                                       // 0x30(0x8)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModulePivotOffset");
		return Clss;
	}

};

// 0x50 (0x80 - 0x30)
// Class Engine.ParticleModuleSourceMovement
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                SourceMovementScale;                               // 0x30(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSourceMovement");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleMaterialBase
class UParticleModuleMaterialBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleMaterialBase");
		return Clss;
	}

};

// 0x10 (0x40 - 0x30)
// Class Engine.ParticleModuleMeshMaterial
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray<class UMaterialInterface*>            MeshMaterials;                                     // 0x30(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleMeshMaterial");
		return Clss;
	}

};

// 0x8 (0x38 - 0x30)
// Class Engine.ParticleModuleOrbitBase
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	uint8                                        bUseEmitterTime : 1;                               // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_148A[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleOrbitBase");
		return Clss;
	}

};

// 0x110 (0x148 - 0x38)
// Class Engine.ParticleModuleOrbit
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	enum class EOrbitChainMode                   ChainMode;                                         // 0x38(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_148B[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                OffsetAmount;                                      // 0x40(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FOrbitOptions                         OffsetOptions;                                     // 0x90(0x4)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_148C[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                RotationAmount;                                    // 0x98(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FOrbitOptions                         RotationOptions;                                   // 0xE8(0x4)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_148D[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionVector                RotationRateAmount;                                // 0xF0(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FOrbitOptions                         RotationRateOptions;                               // 0x140(0x4)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_148E[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleOrbit");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleOrientationBase
class UParticleModuleOrientationBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleOrientationBase");
		return Clss;
	}

};

// 0x8 (0x38 - 0x30)
// Class Engine.ParticleModuleOrientationAxisLock
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	enum class EParticleAxisLock                 LockAxisFlags;                                     // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_148F[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleOrientationAxisLock");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleParameterBase
class UParticleModuleParameterBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleParameterBase");
		return Clss;
	}

};

// 0x18 (0x48 - 0x30)
// Class Engine.ParticleModuleParameterDynamic
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray<struct FEmitterDynamicParameter>      DynamicParams;                                     // 0x30(0x10)(Edit, EditFixedSize, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                        UpdateFlags;                                       // 0x40(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUsesVelocity : 1;                                 // Mask: 0x1, PropSize: 0x10x44(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1490[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleParameterDynamic");
		return Clss;
	}

};

// 0x20 (0x68 - 0x48)
// Class Engine.ParticleModuleParameterDynamic_Seeded
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x48(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleParameterDynamic_Seeded");
		return Clss;
	}

};

// 0x38 (0x60 - 0x28)
// Class Engine.SubUVAnimation
class USubUVAnimation : public UObject
{
public:
	class UTexture2D*                            SubUVTexture;                                      // 0x28(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SubImages_Horizontal;                              // 0x30(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SubImages_Vertical;                                // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESubUVBoundingVertexCount         BoundingMode;                                      // 0x38(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EOpacitySourceMode                OpacitySourceMode;                                 // 0x39(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1491[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AlphaThreshold;                                    // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1492[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SubUVAnimation");
		return Clss;
	}

};

// 0x140 (0x170 - 0x30)
// Class Engine.ParticleModuleRequired
class UParticleModuleRequired : public UParticleModule
{
public:
	class UMaterialInterface*                    Material;                                          // 0x30(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               EmitterOrigin;                                     // 0x38(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              EmitterRotation;                                   // 0x44(0xC)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	enum class EParticleScreenAlignment          ScreenAlignment;                                   // 0x50(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1493[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MinFacingCameraBlendDistance;                      // 0x54(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxFacingCameraBlendDistance;                      // 0x58(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseLocalSpace : 1;                                // Mask: 0x1, PropSize: 0x10x5C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bKillOnDeactivate : 1;                             // Mask: 0x2, PropSize: 0x10x5C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bKillOnCompleted : 1;                              // Mask: 0x4, PropSize: 0x10x5C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_177 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1494[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EParticleSortMode                 SortMode;                                          // 0x60(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1495[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bUseLegacyEmitterTime : 1;                         // Mask: 0x1, PropSize: 0x10x64(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRemoveHMDRoll : 1;                                // Mask: 0x2, PropSize: 0x10x64(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_178 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1496[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        EmitterDuration;                                   // 0x68(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        EmitterDurationLow;                                // 0x6C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEmitterDurationUseRange : 1;                      // Mask: 0x1, PropSize: 0x10x70(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDurationRecalcEachLoop : 1;                       // Mask: 0x2, PropSize: 0x10x70(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_179 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1497[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        EmitterLoops;                                      // 0x74(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 SpawnRate;                                         // 0x78(0x38)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	enum class EParticleBurstMethod              ParticleBurstMethod;                               // 0xB0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1498[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FParticleBurst>                BurstList;                                         // 0xB8(0x10)(ExportObject, ZeroConstructor, NoClear, NativeAccessSpecifierPublic)
	float                                        EmitterDelay;                                      // 0xC8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        EmitterDelayLow;                                   // 0xCC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEmitterDelayUseRange : 1;                         // Mask: 0x1, PropSize: 0x10xD0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDelayFirstLoopOnly : 1;                           // Mask: 0x2, PropSize: 0x10xD0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_17A : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1499[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EParticleSubUVInterpMethod        InterpolationMethod;                               // 0xD4(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_149A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SubImages_Horizontal;                              // 0xD8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SubImages_Vertical;                                // 0xDC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bScaleUV : 1;                                      // Mask: 0x1, PropSize: 0x10xE0(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_17B : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_149B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RandomImageTime;                                   // 0xE4(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        RandomImageChanges;                                // 0xE8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideSystemMacroUV : 1;                        // Mask: 0x1, PropSize: 0x10xEC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_17C : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_149C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               MacroUVPosition;                                   // 0xF0(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MacroUVRadius;                                     // 0xFC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseMaxDrawCount : 1;                              // Mask: 0x1, PropSize: 0x10x100(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_17D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_149D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxDrawCount;                                      // 0x104(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EParticleUVFlipMode               UVFlippingMode;                                    // 0x108(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_149E[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UTexture2D*                            CutoutTexture;                                     // 0x110(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ESubUVBoundingVertexCount         BoundingMode;                                      // 0x118(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EOpacitySourceMode                OpacitySourceMode;                                 // 0x119(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_149F[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AlphaThreshold;                                    // 0x11C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EEmitterNormalsMode               EmitterNormalsMode;                                // 0x120(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14A0[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               NormalsSphereCenter;                               // 0x124(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               NormalsCylinderDirection;                          // 0x130(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOrbitModuleAffectsVelocityAlignment : 1;          // Mask: 0x1, PropSize: 0x10x13C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_17E : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14A1[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FName>                          NamedMaterialOverrides;                            // 0x140(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_14A2[0x20];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleRequired");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleRotationBase
class UParticleModuleRotationBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleRotationBase");
		return Clss;
	}

};

// 0x58 (0x88 - 0x30)
// Class Engine.ParticleModuleMeshRotation
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                StartRotation;                                     // 0x30(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bInheritParent : 1;                                // Mask: 0x1, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14A3[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleMeshRotation");
		return Clss;
	}

};

// 0x20 (0xA8 - 0x88)
// Class Engine.ParticleModuleMeshRotation_Seeded
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x88(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleMeshRotation_Seeded");
		return Clss;
	}

};

// 0x38 (0x68 - 0x30)
// Class Engine.ParticleModuleRotation
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                 StartRotation;                                     // 0x30(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleRotation");
		return Clss;
	}

};

// 0x20 (0x88 - 0x68)
// Class Engine.ParticleModuleRotation_Seeded
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x68(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleRotation_Seeded");
		return Clss;
	}

};

// 0x40 (0x70 - 0x30)
// Class Engine.ParticleModuleRotationOverLifetime
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                 RotationOverLife;                                  // 0x30(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Scale : 1;                                         // Mask: 0x1, PropSize: 0x10x68(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14A4[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleRotationOverLifetime");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleRotationRateBase
class UParticleModuleRotationRateBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleRotationRateBase");
		return Clss;
	}

};

// 0x50 (0x80 - 0x30)
// Class Engine.ParticleModuleMeshRotationRate
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                StartRotationRate;                                 // 0x30(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleMeshRotationRate");
		return Clss;
	}

};

// 0x20 (0xA0 - 0x80)
// Class Engine.ParticleModuleMeshRotationRate_Seeded
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x80(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleMeshRotationRate_Seeded");
		return Clss;
	}

};

// 0x50 (0x80 - 0x30)
// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                LifeMultiplier;                                    // 0x30(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleMeshRotationRateMultiplyLife");
		return Clss;
	}

};

// 0x58 (0x88 - 0x30)
// Class Engine.ParticleModuleMeshRotationRateOverLife
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                RotRate;                                           // 0x30(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bScaleRotRate : 1;                                 // Mask: 0x1, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14A5[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleMeshRotationRateOverLife");
		return Clss;
	}

};

// 0x38 (0x68 - 0x30)
// Class Engine.ParticleModuleRotationRate
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                 StartRotationRate;                                 // 0x30(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleRotationRate");
		return Clss;
	}

};

// 0x20 (0x88 - 0x68)
// Class Engine.ParticleModuleRotationRate_Seeded
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x68(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleRotationRate_Seeded");
		return Clss;
	}

};

// 0x38 (0x68 - 0x30)
// Class Engine.ParticleModuleRotationRateMultiplyLife
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                 LifeMultiplier;                                    // 0x30(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleRotationRateMultiplyLife");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleSizeBase
class UParticleModuleSizeBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSizeBase");
		return Clss;
	}

};

// 0x50 (0x80 - 0x30)
// Class Engine.ParticleModuleSize
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                StartSize;                                         // 0x30(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSize");
		return Clss;
	}

};

// 0x20 (0xA0 - 0x80)
// Class Engine.ParticleModuleSize_Seeded
class UParticleModuleSize_Seeded : public UParticleModuleSize
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0x80(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSize_Seeded");
		return Clss;
	}

};

// 0x58 (0x88 - 0x30)
// Class Engine.ParticleModuleSizeMultiplyLife
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                LifeMultiplier;                                    // 0x30(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        MultiplyX : 1;                                     // Mask: 0x1, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        MultiplyY : 1;                                     // Mask: 0x2, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        MultiplyZ : 1;                                     // Mask: 0x4, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14A6[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSizeMultiplyLife");
		return Clss;
	}

};

// 0x58 (0x88 - 0x30)
// Class Engine.ParticleModuleSizeScale
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                SizeScale;                                         // 0x30(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        EnableX : 1;                                       // Mask: 0x1, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        EnableY : 1;                                       // Mask: 0x2, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        EnableZ : 1;                                       // Mask: 0x4, PropSize: 0x10x80(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14A7[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSizeScale");
		return Clss;
	}

};

// 0x10 (0x40 - 0x30)
// Class Engine.ParticleModuleSizeScaleBySpeed
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{
public:
	struct FVector2D                             SpeedScale;                                        // 0x30(0x8)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                             MaxScale;                                          // 0x38(0x8)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSizeScaleBySpeed");
		return Clss;
	}

};

// 0x8 (0x38 - 0x30)
// Class Engine.ParticleModuleSpawnBase
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	uint8                                        bProcessSpawnRate : 1;                             // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bProcessBurstList : 1;                             // Mask: 0x2, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14A8[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSpawnBase");
		return Clss;
	}

};

// 0xC8 (0x100 - 0x38)
// Class Engine.ParticleModuleSpawn
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                 Rate;                                              // 0x38(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 RateScale;                                         // 0x70(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	enum class EParticleBurstMethod              ParticleBurstMethod;                               // 0xA8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14A9[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FParticleBurst>                BurstList;                                         // 0xB0(0x10)(Edit, ExportObject, ZeroConstructor, NoClear, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 BurstScale;                                        // 0xC0(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bApplyGlobalSpawnRateScale : 1;                    // Mask: 0x1, PropSize: 0x10xF8(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14AA[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSpawn");
		return Clss;
	}

};

// 0x50 (0x88 - 0x38)
// Class Engine.ParticleModuleSpawnPerUnit
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	float                                        UnitScalar;                                        // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14AB[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 SpawnPerUnit;                                      // 0x40(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreSpawnRateWhenMoving : 1;                    // Mask: 0x1, PropSize: 0x10x78(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_17F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14AC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        MovementTolerance;                                 // 0x7C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        MaxFrameDistance;                                  // 0x80(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreMovementAlongX : 1;                         // Mask: 0x1, PropSize: 0x10x84(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreMovementAlongY : 1;                         // Mask: 0x2, PropSize: 0x10x84(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreMovementAlongZ : 1;                         // Mask: 0x4, PropSize: 0x10x84(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14AD[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSpawnPerUnit");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleSubUVBase
class UParticleModuleSubUVBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSubUVBase");
		return Clss;
	}

};

// 0x48 (0x78 - 0x30)
// Class Engine.ParticleModuleSubUV
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	class USubUVAnimation*                       Animation;                                         // 0x30(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 SubImageIndex;                                     // 0x38(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bUseRealTime : 1;                                  // Mask: 0x1, PropSize: 0x10x70(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14AE[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSubUV");
		return Clss;
	}

};

// 0x48 (0xC0 - 0x78)
// Class Engine.ParticleModuleSubUVMovie
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{
public:
	uint8                                        bUseEmitterTime : 1;                               // Mask: 0x1, PropSize: 0x10x78(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_180 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14AF[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 FrameRate;                                         // 0x80(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                        StartingFrame;                                     // 0xB8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14B0[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleSubUVMovie");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleTrailBase
class UParticleModuleTrailBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleTrailBase");
		return Clss;
	}

};

// 0x68 (0x98 - 0x30)
// Class Engine.ParticleModuleTrailSource
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	enum class ETrail2SourceMethod               SourceMethod;                                      // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14B1[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  SourceName;                                        // 0x38(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 SourceStrength;                                    // 0x40(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        bLockSourceStength : 1;                            // Mask: 0x1, PropSize: 0x10x78(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_181 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14B2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        SourceOffsetCount;                                 // 0x7C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                       SourceOffsetDefaults;                              // 0x80(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	enum class EParticleSourceSelectionMethod    SelectionMethod;                                   // 0x90(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14B3[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bInheritRotation : 1;                              // Mask: 0x1, PropSize: 0x10x94(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14B4[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleTrailSource");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleTypeDataBase
class UParticleModuleTypeDataBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleTypeDataBase");
		return Clss;
	}

};

// 0x18 (0x48 - 0x30)
// Class Engine.ParticleModuleTypeDataAnimTrail
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{
public:
	uint8                                        bDeadTrailsOnDeactivate : 1;                       // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnablePreviousTangentRecalculation : 1;           // Mask: 0x2, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTangentRecalculationEveryFrame : 1;               // Mask: 0x4, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_182 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14B5[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TilingDistance;                                    // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceTessellationStepSize;                      // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TangentTessellationStepSize;                       // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        WidthTessellationStepSize;                         // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14B6[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleTypeDataAnimTrail");
		return Clss;
	}

};

// 0x138 (0x168 - 0x30)
// Class Engine.ParticleModuleTypeDataBeam2
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	enum class EBeam2Method                      BeamMethod;                                        // 0x30(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14B7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        TextureTile;                                       // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TextureTileDistance;                               // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Sheets;                                            // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxBeamCount;                                      // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Speed;                                             // 0x44(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        InterpolationPoints;                               // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAlwaysOn : 1;                                     // Mask: 0x1, PropSize: 0x10x4C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_183 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14B8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        UpVectorStepSize;                                  // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14B9[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  BranchParentName;                                  // 0x58(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Distance;                                          // 0x60(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	enum class EBeamTaperMethod                  TaperMethod;                                       // 0x98(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14BA[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FRawDistributionFloat                 TaperFactor;                                       // 0xA0(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 TaperScale;                                        // 0xD8(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        RenderGeometry : 1;                                // Mask: 0x1, PropSize: 0x10x110(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        RenderDirectLine : 1;                              // Mask: 0x2, PropSize: 0x10x110(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        RenderLines : 1;                                   // Mask: 0x4, PropSize: 0x10x110(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        RenderTessellation : 1;                            // Mask: 0x8, PropSize: 0x10x110(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14BB[0x57];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleTypeDataBeam2");
		return Clss;
	}

};

// 0x430 (0x460 - 0x30)
// Class Engine.ParticleModuleTypeDataGpu
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{
public:
	struct FGPUSpriteEmitterInfo                 EmitterInfo;                                       // 0x30(0x2C0)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGPUSpriteResourceData                ResourceData;                                      // 0x2F0(0x160)(NativeAccessSpecifierPublic)
	float                                        CameraMotionBlurAmount;                            // 0x450(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClearExistingParticlesOnInit : 1;                 // Mask: 0x1, PropSize: 0x10x454(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14BC[0xB];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleTypeDataGpu");
		return Clss;
	}

};

// 0x88 (0xB8 - 0x30)
// Class Engine.ParticleModuleTypeDataMesh
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                           Mesh;                                              // 0x30(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        CastShadows : 1;                                   // Mask: 0x1, PropSize: 0x10x38(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        DoCollisions : 1;                                  // Mask: 0x2, PropSize: 0x10x38(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_184 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14BD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EMeshScreenAlignment              MeshAlignment;                                     // 0x3C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14BE[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bOverrideMaterial : 1;                             // Mask: 0x1, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideDefaultMotionBlurSettings : 1;            // Mask: 0x2, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableMotionBlur : 1;                             // Mask: 0x4, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_185 : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14BF[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Pitch;                                             // 0x44(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Roll;                                              // 0x48(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Yaw;                                               // 0x4C(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionVector                RollPitchYawRange;                                 // 0x50(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Pad_14C0[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EParticleAxisLock                 AxisLockOption;                                    // 0xA8(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14C1[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bCameraFacing : 1;                                 // Mask: 0x1, PropSize: 0x10xAC(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_186 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14C2[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EMeshCameraFacingUpAxis           CameraFacingUpAxisOption;                          // 0xB0(0x1)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EMeshCameraFacingOptions          CameraFacingOption;                                // 0xB1(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14C3[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bApplyParticleRotationAsSpin : 1;                  // Mask: 0x1, PropSize: 0x10xB4(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bFaceCameraDirectionRatherThanPosition : 1;        // Mask: 0x2, PropSize: 0x10xB4(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bCollisionsConsiderPartilceSize : 1;               // Mask: 0x4, PropSize: 0x10xB4(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14C4[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleTypeDataMesh");
		return Clss;
	}

};

// 0x30 (0x60 - 0x30)
// Class Engine.ParticleModuleTypeDataRibbon
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{
public:
	int32                                        MaxTessellationBetweenParticles;                   // 0x30(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SheetsPerTrail;                                    // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxTrailCount;                                     // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        MaxParticleInTrailCount;                           // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDeadTrailsOnDeactivate : 1;                       // Mask: 0x1, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDeadTrailsOnSourceLoss : 1;                       // Mask: 0x2, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bClipSourceSegement : 1;                           // Mask: 0x4, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnablePreviousTangentRecalculation : 1;           // Mask: 0x8, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTangentRecalculationEveryFrame : 1;               // Mask: 0x10, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSpawnInitialParticle : 1;                         // Mask: 0x20, PropSize: 0x10x40(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_187 : 2;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14C5[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ETrailsRenderAxisOption           RenderAxis;                                        // 0x44(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14C6[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TangentSpawningScalar;                             // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRenderGeometry : 1;                               // Mask: 0x1, PropSize: 0x10x4C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRenderSpawnPoints : 1;                            // Mask: 0x2, PropSize: 0x10x4C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRenderTangents : 1;                               // Mask: 0x4, PropSize: 0x10x4C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRenderTessellation : 1;                           // Mask: 0x8, PropSize: 0x10x4C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_188 : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14C7[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TilingDistance;                                    // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceTessellationStepSize;                      // 0x54(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bEnableTangentDiffInterpScale : 1;                 // Mask: 0x1, PropSize: 0x10x58(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_189 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14C8[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TangentTessellationScalar;                         // 0x5C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleTypeDataRibbon");
		return Clss;
	}

};

// 0x0 (0x30 - 0x30)
// Class Engine.ParticleModuleVectorFieldBase
class UParticleModuleVectorFieldBase : public UParticleModule
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVectorFieldBase");
		return Clss;
	}

};

// 0x10 (0x40 - 0x30)
// Class Engine.ParticleModuleVectorFieldGlobal
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{
public:
	uint8                                        bOverrideGlobalVectorFieldTightness : 1;           // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_18A : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14C9[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        GlobalVectorFieldScale;                            // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GlobalVectorFieldTightness;                        // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14CA[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVectorFieldGlobal");
		return Clss;
	}

};

// 0x38 (0x68 - 0x30)
// Class Engine.ParticleModuleVectorFieldLocal
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{
public:
	class UVectorField*                          VectorField;                                       // 0x30(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               RelativeTranslation;                               // 0x38(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              RelativeRotation;                                  // 0x44(0xC)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               RelativeScale3D;                                   // 0x50(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Intensity;                                         // 0x5C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Tightness;                                         // 0x60(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreComponentTransform : 1;                     // Mask: 0x1, PropSize: 0x10x64(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTileX : 1;                                        // Mask: 0x2, PropSize: 0x10x64(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTileY : 1;                                        // Mask: 0x4, PropSize: 0x10x64(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bTileZ : 1;                                        // Mask: 0x8, PropSize: 0x10x64(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseFixDT : 1;                                     // Mask: 0x10, PropSize: 0x10x64(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14CB[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVectorFieldLocal");
		return Clss;
	}

};

// 0x18 (0x48 - 0x30)
// Class Engine.ParticleModuleVectorFieldRotation
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                               MinInitialRotation;                                // 0x30(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               MaxInitialRotation;                                // 0x3C(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVectorFieldRotation");
		return Clss;
	}

};

// 0x10 (0x40 - 0x30)
// Class Engine.ParticleModuleVectorFieldRotationRate
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                               RotationRate;                                      // 0x30(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14CC[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVectorFieldRotationRate");
		return Clss;
	}

};

// 0x40 (0x70 - 0x30)
// Class Engine.ParticleModuleVectorFieldScale
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                    VectorFieldScale;                                  // 0x30(0x8)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 VectorFieldScaleRaw;                               // 0x38(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVectorFieldScale");
		return Clss;
	}

};

// 0x40 (0x70 - 0x30)
// Class Engine.ParticleModuleVectorFieldScaleOverLife
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                    VectorFieldScaleOverLife;                          // 0x30(0x8)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 VectorFieldScaleOverLifeRaw;                       // 0x38(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVectorFieldScaleOverLife");
		return Clss;
	}

};

// 0x8 (0x38 - 0x30)
// Class Engine.ParticleModuleVelocityBase
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	uint8                                        bInWorldSpace : 1;                                 // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bApplyOwnerScale : 1;                              // Mask: 0x2, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14CD[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVelocityBase");
		return Clss;
	}

};

// 0x88 (0xC0 - 0x38)
// Class Engine.ParticleModuleVelocity
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                StartVelocity;                                     // 0x38(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 StartVelocityRadial;                               // 0x88(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVelocity");
		return Clss;
	}

};

// 0x20 (0xE0 - 0xC0)
// Class Engine.ParticleModuleVelocity_Seeded
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{
public:
	struct FParticleRandomSeedInfo               RandomSeedInfo;                                    // 0xC0(0x20)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVelocity_Seeded");
		return Clss;
	}

};

// 0x80 (0xB8 - 0x38)
// Class Engine.ParticleModuleVelocityCone
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                 Angle;                                             // 0x38(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRawDistributionFloat                 Velocity;                                          // 0x70(0x38)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                               Direction;                                         // 0xA8(0xC)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14CE[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVelocityCone");
		return Clss;
	}

};

// 0x50 (0x88 - 0x38)
// Class Engine.ParticleModuleVelocityInheritParent
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                Scale;                                             // 0x38(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVelocityInheritParent");
		return Clss;
	}

};

// 0x58 (0x90 - 0x38)
// Class Engine.ParticleModuleVelocityOverLifetime
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                VelOverLife;                                       // 0x38(0x50)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                        Absolute : 1;                                      // Mask: 0x1, PropSize: 0x10x88(0x1)(Edit, ExportObject, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14CF[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleVelocityOverLifetime");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.ParticleModuleEventSendToGame
class UParticleModuleEventSendToGame : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleModuleEventSendToGame");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.ParticleSystemReplay
class UParticleSystemReplay : public UObject
{
public:
	int32                                        ClipIDNumber;                                      // 0x28(0x4)(Edit, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14D0[0x14];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ParticleSystemReplay");
		return Clss;
	}

};

// 0x0 (0xC8 - 0xC8)
// Class Engine.DemoPendingNetGame
class UDemoPendingNetGame : public UPendingNetGame
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DemoPendingNetGame");
		return Clss;
	}

};

// 0x58 (0x80 - 0x28)
// Class Engine.PhysicalMaterial
class UPhysicalMaterial : public UObject
{
public:
	float                                        Friction;                                          // 0x28(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EFrictionCombineMode              FrictionCombineMode;                               // 0x2C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOverrideFrictionCombineMode;                      // 0x2D(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14D1[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Restitution;                                       // 0x30(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EFrictionCombineMode              RestitutionCombineMode;                            // 0x34(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bOverrideRestitutionCombineMode;                   // 0x35(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14D2[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        Density;                                           // 0x38(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RaiseMassToPower;                                  // 0x3C(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DestructibleDamageThresholdScale;                  // 0x40(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14D3[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UPhysicalMaterialPropertyBase*         PhysicalMaterialProperty;                          // 0x48(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPhysicalSurface                  SurfaceType;                                       // 0x50(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14D4[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        TireFrictionScale;                                 // 0x54(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTireFrictionScalePair>        TireFrictionScales;                                // 0x58(0x10)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                        Pad_14D5[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicalMaterial");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.PhysicalMaterialPropertyBase
class UPhysicalMaterialPropertyBase : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicalMaterialPropertyBase");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.PhysicsCollisionHandler
class UPhysicsCollisionHandler : public UObject
{
public:
	float                                        ImpactThreshold;                                   // 0x28(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ImpactReFireDelay;                                 // 0x2C(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                            DefaultImpactSound;                                // 0x30(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LastImpactSoundTime;                               // 0x38(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14D6[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsCollisionHandler");
		return Clss;
	}

};

// 0x318 (0x340 - 0x28)
// Class Engine.PhysicsConstraintTemplate
class UPhysicsConstraintTemplate : public UObject
{
public:
	uint8                                        Pad_14D7[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FConstraintInstance                   DefaultInstance;                                   // 0x30(0x1F0)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FPhysicsConstraintProfileHandle> ProfileHandles;                                    // 0x220(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FConstraintProfileProperties          DefaultProfile;                                    // 0x230(0x104)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                        Pad_14D8[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsConstraintTemplate");
		return Clss;
	}

};

// 0xA8 (0xD0 - 0x28)
// Class Engine.PhysicsSerializer
class UPhysicsSerializer : public UObject
{
public:
	uint8                                        Pad_14D9[0xA8];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PhysicsSerializer");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.PlatformInterfaceBase
class UPlatformInterfaceBase : public UObject
{
public:
	TArray<struct FDelegateArray>                AllDelegates;                                      // 0x28(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlatformInterfaceBase");
		return Clss;
	}

};

// 0x18 (0x50 - 0x38)
// Class Engine.CloudStorageBase
class UCloudStorageBase : public UPlatformInterfaceBase
{
public:
	TArray<class FString>                        LocalCloudFiles;                                   // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        bSuppressDelegateCalls : 1;                        // Mask: 0x1, PropSize: 0x10x48(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14DA[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CloudStorageBase");
		return Clss;
	}

};

// 0x28 (0x60 - 0x38)
// Class Engine.InGameAdManager
class UInGameAdManager : public UPlatformInterfaceBase
{
public:
	uint8                                        bShouldPauseWhileAdOpen : 1;                       // Mask: 0x1, PropSize: 0x10x38(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_18B : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14DB[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<UDelegateProperty_>                   ClickedBannerDelegates;                            // 0x40(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<UDelegateProperty_>                   ClosedAdDelegates;                                 // 0x50(0x10)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("InGameAdManager");
		return Clss;
	}

};

// 0x30 (0x68 - 0x38)
// Class Engine.MicroTransactionBase
class UMicroTransactionBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FPurchaseInfo>                 AvailableProducts;                                 // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                LastError;                                         // 0x48(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                LastErrorSolution;                                 // 0x58(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("MicroTransactionBase");
		return Clss;
	}

};

// 0x0 (0x38 - 0x38)
// Class Engine.TwitterIntegrationBase
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TwitterIntegrationBase");
		return Clss;
	}

	bool TwitterRequest(const class FString& URL, TArray<class FString>& ParamKeysAndValues, enum class ETwitterRequestMethod RequestMethod, int32 AccountIndex);
	bool ShowTweetUI(const class FString& InitialMessage, const class FString& URL, const class FString& Picture);
	void Init();
	int32 GetNumAccounts();
	class FString GetAccountName(int32 AccountIndex);
	bool CanShowTweetUI();
	bool AuthorizeAccounts();
};

// 0x88 (0xB0 - 0x28)
// Class Engine.PlatformInterfaceWebResponse
class UPlatformInterfaceWebResponse : public UObject
{
public:
	class FString                                OriginalURL;                                       // 0x28(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ResponseCode;                                      // 0x38(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        Tag;                                               // 0x3C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                StringResponse;                                    // 0x40(0x10)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                BinaryResponse;                                    // 0x50(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_14E1[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("PlatformInterfaceWebResponse");
		return Clss;
	}

	int32 GetNumHeaders();
	class FString GetHeaderValue(const class FString& HeaderName);
	void GetHeader(int32 HeaderIndex, class FString* Header, class FString* Value);
};

// 0x8 (0x33798 - 0x33790)
// Class Engine.ChildConnection
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                        Parent;                                            // 0x33790(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ChildConnection");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.Polys
class UPolys : public UObject
{
public:
	uint8                                        Pad_14E2[0x10];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Polys");
		return Clss;
	}

};

// 0x8 (0x30 - 0x28)
// Class Engine.ReporterBase
class UReporterBase : public UObject
{
public:
	uint8                                        Pad_14E3[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ReporterBase");
		return Clss;
	}

};

// 0x78 (0xA8 - 0x30)
// Class Engine.ReporterGraph
class UReporterGraph : public UReporterBase
{
public:
	uint8                                        Pad_14E4[0x78];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ReporterGraph");
		return Clss;
	}

};

// 0x30 (0x58 - 0x28)
// Class Engine.ReverbEffect
class UReverbEffect : public UObject
{
public:
	float                                        Density;                                           // 0x28(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Diffusion;                                         // 0x2C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Gain;                                              // 0x30(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        GainHF;                                            // 0x34(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DecayTime;                                         // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DecayHFRatio;                                      // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ReflectionsGain;                                   // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ReflectionsDelay;                                  // 0x44(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LateGain;                                          // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LateDelay;                                         // 0x4C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AirAbsorptionGainHF;                               // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        RoomRolloffFactor;                                 // 0x54(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ReverbEffect");
		return Clss;
	}

};

// 0x20 (0x48 - 0x28)
// Class Engine.Rig
class URig : public UObject
{
public:
	TArray<struct FTransformBase>                TransformBases;                                    // 0x28(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FNode>                         Nodes;                                             // 0x38(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Rig");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.SaveGame
class USaveGame : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SaveGame");
		return Clss;
	}

};

// 0x90 (0xB8 - 0x28)
// Class Engine.SimpleConstructionScript
class USimpleConstructionScript : public UObject
{
public:
	TArray<class USCS_Node*>                     RootNodes;                                         // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class USCS_Node*>                     AllNodes;                                          // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class USCS_Node*                             DefaultSceneRootNode;                              // 0x48(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USCS_Node*                             RootNode;                                          // 0x50(0x8)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class USCS_Node*>                     ActorComponentNodes;                               // 0x58(0x10)(ZeroConstructor, Deprecated, NativeAccessSpecifierPrivate)
	uint8                                        Pad_14E5[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SimpleConstructionScript");
		return Clss;
	}

};

// 0x118 (0x140 - 0x28)
// Class Engine.SCS_Node
class USCS_Node : public UObject
{
public:
	class UClass*                                ComponentClass;                                    // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                       ComponentTemplate;                                 // 0x30(0x8)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlueprintCookedComponentInstancingData CookedComponentInstancingData;                     // 0x38(0x50)(NativeAccessSpecifierPublic)
	class FName                                  VariableName;                                      // 0x88(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  AttachToName;                                      // 0x90(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  ParentComponentOrVariableName;                     // 0x98(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  ParentComponentOwnerClassName;                     // 0xA0(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsParentComponentNative;                          // 0xA8(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14E6[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class USCS_Node*>                     ChildNodes;                                        // 0xB0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBPVariableMetaDataEntry>      MetaDataArray;                                     // 0xC0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                 VariableGuid;                                      // 0xD0(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsFalseRoot;                                      // 0xE0(0x1)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bIsNative;                                         // 0xE1(0x1)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14E7[0x6];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  NativeComponentName;                               // 0xE8(0x8)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bVariableNameAutoGenerated;                        // 0xF0(0x1)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14E8[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FName                                  InternalVariableName;                              // 0xF8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_14E9[0x40];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SCS_Node");
		return Clss;
	}

};

// 0x68 (0x90 - 0x28)
// Class Engine.Selection
class USelection : public UObject
{
public:
	uint8                                        Pad_14EA[0x68];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Selection");
		return Clss;
	}

};

// 0xA0 (0x360 - 0x2C0)
// Class Engine.DestructibleMesh
class UDestructibleMesh : public USkeletalMesh
{
public:
	struct FDestructibleParameters               DefaultDestructibleParameters;                     // 0x2C0(0x88)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FFractureEffect>               FractureEffects;                                   // 0x348(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_14EB[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DestructibleMesh");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.SkeletalMeshReductionSettings
class USkeletalMeshReductionSettings : public UObject
{
public:
	TArray<struct FSkeletalMeshLODGroupSettings> Settings;                                          // 0x28(0x10)(ZeroConstructor, Config, GlobalConfig, Protected, NativeAccessSpecifierProtected)
	uint8                                        Pad_14EC[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkeletalMeshReductionSettings");
		return Clss;
	}

};

// 0x38 (0x60 - 0x28)
// Class Engine.SkeletalMeshSocket
class USkeletalMeshSocket : public UObject
{
public:
	class FName                                  SocketName;                                        // 0x28(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                  BoneName;                                          // 0x30(0x8)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               RelativeLocation;                                  // 0x38(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              RelativeRotation;                                  // 0x44(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               RelativeScale;                                     // 0x50(0xC)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bForceAlwaysAnimated;                              // 0x5C(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14EE[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SkeletalMeshSocket");
		return Clss;
	}

	void InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, const struct FVector& WorldLocation, const struct FVector& WorldNormal);
	struct FVector GetSocketLocation(class USkeletalMeshComponent* SkelComp);
};

// 0x90 (0xB8 - 0x28)
// Class Engine.SlateBrushAsset
class USlateBrushAsset : public UObject
{
public:
	struct FSlateBrush                           Brush;                                             // 0x28(0x90)(Edit, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SlateBrushAsset");
		return Clss;
	}

};

// 0xA0 (0xC8 - 0x28)
// Class Engine.Texture
class UTexture : public UObject
{
public:
	uint8                                        Pad_14EF[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	struct FGuid                                 LightingGuid;                                      // 0x30(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        LODBias;                                           // 0x40(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumCinematicMipLevels;                             // 0x44(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        SRGB : 1;                                          // Mask: 0x1, PropSize: 0x10x48(0x1)(Edit, BlueprintVisible, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        NeverStream : 1;                                   // Mask: 0x2, PropSize: 0x10x48(0x1)(Edit, BlueprintVisible, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bNoTiling : 1;                                     // Mask: 0x4, PropSize: 0x10x48(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bUseCinematicMipLevels : 1;                        // Mask: 0x8, PropSize: 0x10x48(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_18C : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14F0[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x50(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	int32                                        CachedCombinedLODBias;                             // 0x60(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bAsyncResourceReleaseHasBeenStarted : 1;           // Mask: 0x1, PropSize: 0x10x64(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_18D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14F1[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ETextureCompressionSettings       CompressionSettings;                               // 0x68(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureFilter                    Filter;                                            // 0x69(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureGroup                     LODGroup;                                          // 0x6A(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14F2[0x5D];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Texture");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.SlateTextureAtlasInterface
class USlateTextureAtlasInterface : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SlateTextureAtlasInterface");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.SoundConcurrency
class USoundConcurrency : public UObject
{
public:
	struct FSoundConcurrencySettings             Concurrency;                                       // 0x28(0x10)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundConcurrency");
		return Clss;
	}

};

// 0x68 (0x90 - 0x28)
// Class Engine.SoundBase
class USoundBase : public UObject
{
public:
	class USoundClass*                           SoundClassObject;                                  // 0x28(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundSubmix*                          SoundSubmixObject;                                 // 0x30(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bDebug : 1;                                        // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bOverrideConcurrency : 1;                          // Mask: 0x2, PropSize: 0x10x38(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreFocus : 1;                                  // Mask: 0x4, PropSize: 0x10x38(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_18E : 5;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14F3[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundConcurrency*                     SoundConcurrencySettings;                          // 0x40(0x8)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundConcurrencySettings             ConcurrencyOverrides;                              // 0x48(0x10)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	enum class EMaxConcurrentResolutionRule      MaxConcurrentResolutionRule;                       // 0x58(0x1)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14F4[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MaxConcurrentPlayCount;                            // 0x5C(0x4)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Duration;                                          // 0x60(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14F5[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundAttenuation*                     AttenuationSettings;                               // 0x68(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Priority;                                          // 0x70(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14F6[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class USoundEffectSourcePreset*>      SourceEffectChain;                                 // 0x78(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        DefaultMasterReverbSendAmount;                     // 0x88(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14F7[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundBase");
		return Clss;
	}

};

// 0x18 (0xA8 - 0x90)
// Class Engine.DialogueSoundWaveProxy
class UDialogueSoundWaveProxy : public USoundBase
{
public:
	uint8                                        Pad_14F8[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DialogueSoundWaveProxy");
		return Clss;
	}

};

// 0x148 (0x1D8 - 0x90)
// Class Engine.SoundCue
class USoundCue : public USoundBase
{
public:
	uint8                                        bOverrideAttenuation : 1;                          // Mask: 0x1, PropSize: 0x10x90(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_18F : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14F9[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class USoundNode*                            FirstNode;                                         // 0x98(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumeMultiplier;                                  // 0xA0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PitchMultiplier;                                   // 0xA4(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundAttenuationSettings             AttenuationOverrides;                              // 0xA8(0x120)(Edit, NativeAccessSpecifierPublic)
	float                                        SubtitlePriority;                                  // 0x1C8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_14FA[0xC];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundCue");
		return Clss;
	}

};

// 0x60 (0x88 - 0x28)
// Class Engine.SoundGroups
class USoundGroups : public UObject
{
public:
	TArray<struct FSoundGroup>                   SoundGroupProfiles;                                // 0x28(0x10)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	uint8                                        Pad_14FB[0x50];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundGroups");
		return Clss;
	}

};

// 0x1E0 (0x270 - 0x90)
// Class Engine.SoundWave
class USoundWave : public USoundBase
{
public:
	int32                                        CompressionQuality;                                // 0x90(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLooping : 1;                                      // Mask: 0x1, PropSize: 0x10x94(0x1)(Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStreaming : 1;                                    // Mask: 0x2, PropSize: 0x10x94(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_190 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14FC[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        StreamingPriority;                                 // 0x98(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_191 : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bMature : 1;                                       // Mask: 0x8, PropSize: 0x10x9C(0x1)(Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bManualWordWrap : 1;                               // Mask: 0x10, PropSize: 0x10x9C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bSingleLine : 1;                                   // Mask: 0x20, PropSize: 0x10x9C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bVirtualizeWhenSilent : 1;                         // Mask: 0x40, PropSize: 0x10x9C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_192 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_14FD[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ESoundGroup                       SoundGroup;                                        // 0xA0(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14FE[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                SpokenText;                                        // 0xA8(0x10)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        SubtitlePriority;                                  // 0xB8(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Volume;                                            // 0xBC(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Pitch;                                             // 0xC0(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        NumChannels;                                       // 0xC4(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SampleRate;                                        // 0xC8(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        RawPCMDataSize;                                    // 0xCC(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSubtitleCue>                  Subtitles;                                         // 0xD0(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FLocalizedSubtitle>            LocalizedSubtitles;                                // 0xE0(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UCurveTable*                           Curves;                                            // 0xF0(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveTable*                           InternalCurves;                                    // 0xF8(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_14FF[0x170];                                   // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundWave");
		return Clss;
	}

};

// 0x80 (0x2F0 - 0x270)
// Class Engine.SoundWaveProcedural
class USoundWaveProcedural : public USoundWave
{
public:
	uint8                                        Pad_1500[0x80];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundWaveProcedural");
		return Clss;
	}

};

// 0x58 (0x80 - 0x28)
// Class Engine.SoundClass
class USoundClass : public UObject
{
public:
	struct FSoundClassProperties                 Properties;                                        // 0x28(0x2C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1501[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class USoundClass*>                   ChildClasses;                                      // 0x58(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPassiveSoundMixModifier>      PassiveSoundMixModifiers;                          // 0x68(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class USoundClass*                           ParentClass;                                       // 0x78(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundClass");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.SoundEffectPreset
class USoundEffectPreset : public UObject
{
public:
	uint8                                        Pad_1502[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundEffectPreset");
		return Clss;
	}

};

// 0x0 (0x40 - 0x40)
// Class Engine.SoundEffectSourcePreset
class USoundEffectSourcePreset : public USoundEffectPreset
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundEffectSourcePreset");
		return Clss;
	}

};

// 0x0 (0x40 - 0x40)
// Class Engine.SoundEffectSubmixPreset
class USoundEffectSubmixPreset : public USoundEffectPreset
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundEffectSubmixPreset");
		return Clss;
	}

};

// 0x60 (0x88 - 0x28)
// Class Engine.SoundMix
class USoundMix : public UObject
{
public:
	uint8                                        bApplyEQ : 1;                                      // Mask: 0x1, PropSize: 0x10x28(0x1)(Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_193 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1503[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        EQPriority;                                        // 0x2C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAudioEQEffect                        EQSettings;                                        // 0x30(0x38)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSoundClassAdjuster>           SoundClassEffects;                                 // 0x68(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        InitialDelay;                                      // 0x78(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeInTime;                                        // 0x7C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        Duration;                                          // 0x80(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FadeOutTime;                                       // 0x84(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundMix");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.SoundNode
class USoundNode : public UObject
{
public:
	TArray<class USoundNode*>                    ChildNodes;                                        // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNode");
		return Clss;
	}

};

// 0x0 (0x38 - 0x38)
// Class Engine.SoundNodeAssetReferencer
class USoundNodeAssetReferencer : public USoundNode
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeAssetReferencer");
		return Clss;
	}

};

// 0x30 (0x68 - 0x38)
// Class Engine.SoundNodeWavePlayer
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{
public:
	TSoftObjectPtr<class USoundWave>             SoundWaveAssetPtr;                                 // 0x38(0x20)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundWave*                            SoundWave;                                         // 0x58(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        BitPad_194 : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        bLooping : 1;                                      // Mask: 0x2, PropSize: 0x10x60(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1504[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeWavePlayer");
		return Clss;
	}

};

// 0x130 (0x168 - 0x38)
// Class Engine.SoundNodeAttenuation
class USoundNodeAttenuation : public USoundNode
{
public:
	class USoundAttenuation*                     AttenuationSettings;                               // 0x38(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundAttenuationSettings             AttenuationOverrides;                              // 0x40(0x120)(Edit, NativeAccessSpecifierPublic)
	uint8                                        bOverrideAttenuation : 1;                          // Mask: 0x1, PropSize: 0x10x160(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1505[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeAttenuation");
		return Clss;
	}

};

// 0x8 (0x40 - 0x38)
// Class Engine.SoundNodeBranch
class USoundNodeBranch : public USoundNode
{
public:
	class FName                                  BoolParameterName;                                 // 0x38(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeBranch");
		return Clss;
	}

};

// 0x10 (0x48 - 0x38)
// Class Engine.SoundNodeConcatenator
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray<float>                                InputVolume;                                       // 0x38(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeConcatenator");
		return Clss;
	}

};

// 0x8 (0x40 - 0x38)
// Class Engine.SoundNodeDelay
class USoundNodeDelay : public USoundNode
{
public:
	float                                        DelayMin;                                          // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DelayMax;                                          // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeDelay");
		return Clss;
	}

};

// 0x28 (0x60 - 0x38)
// Class Engine.SoundNodeDialoguePlayer
class USoundNodeDialoguePlayer : public USoundNode
{
public:
	struct FDialogueWaveParameter                DialogueWaveParameter;                             // 0x38(0x20)(Edit, NativeAccessSpecifierPublic)
	uint8                                        bLooping : 1;                                      // Mask: 0x1, PropSize: 0x10x58(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1506[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeDialoguePlayer");
		return Clss;
	}

};

// 0x10 (0x48 - 0x38)
// Class Engine.SoundNodeDistanceCrossFade
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray<struct FDistanceDatum>                CrossFadeInput;                                    // 0x38(0x10)(Edit, ExportObject, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeDistanceCrossFade");
		return Clss;
	}

};

// 0x8 (0x50 - 0x48)
// Class Engine.SoundNodeParamCrossFade
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{
public:
	class FName                                  ParamName;                                         // 0x48(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeParamCrossFade");
		return Clss;
	}

};

// 0x8 (0x40 - 0x38)
// Class Engine.SoundNodeDoppler
class USoundNodeDoppler : public USoundNode
{
public:
	float                                        DopplerIntensity;                                  // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1507[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeDoppler");
		return Clss;
	}

};

// 0x128 (0x160 - 0x38)
// Class Engine.SoundNodeEnveloper
class USoundNodeEnveloper : public USoundNode
{
public:
	float                                        LoopStart;                                         // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        LoopEnd;                                           // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DurationAfterLoop;                                 // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        LoopCount;                                         // 0x44(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLoopIndefinitely : 1;                             // Mask: 0x1, PropSize: 0x10x48(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLoop : 1;                                         // Mask: 0x2, PropSize: 0x10x48(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_195 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1508[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UDistributionFloatConstantCurve*       VolumeInterpCurve;                                 // 0x50(0x8)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDistributionFloatConstantCurve*       PitchInterpCurve;                                  // 0x58(0x8)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                    VolumeCurve;                                       // 0x60(0x78)(Edit, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                    PitchCurve;                                        // 0xD8(0x78)(Edit, NativeAccessSpecifierPublic)
	float                                        PitchMin;                                          // 0x150(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PitchMax;                                          // 0x154(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumeMin;                                         // 0x158(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumeMax;                                         // 0x15C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeEnveloper");
		return Clss;
	}

};

// 0x10 (0x48 - 0x38)
// Class Engine.SoundNodeGroupControl
class USoundNodeGroupControl : public USoundNode
{
public:
	TArray<int32>                                GroupSizes;                                        // 0x38(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeGroupControl");
		return Clss;
	}

};

// 0x8 (0x40 - 0x38)
// Class Engine.SoundNodeLooping
class USoundNodeLooping : public USoundNode
{
public:
	int32                                        LoopCount;                                         // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLoopIndefinitely : 1;                             // Mask: 0x1, PropSize: 0x10x3C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1509[0x3];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeLooping");
		return Clss;
	}

};

// 0x0 (0x38 - 0x38)
// Class Engine.SoundNodeMature
class USoundNodeMature : public USoundNode
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeMature");
		return Clss;
	}

};

// 0x10 (0x48 - 0x38)
// Class Engine.SoundNodeMixer
class USoundNodeMixer : public USoundNode
{
public:
	TArray<float>                                InputVolume;                                       // 0x38(0x10)(Edit, ExportObject, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeMixer");
		return Clss;
	}

};

// 0x10 (0x48 - 0x38)
// Class Engine.SoundNodeModulator
class USoundNodeModulator : public USoundNode
{
public:
	float                                        PitchMin;                                          // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        PitchMax;                                          // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumeMin;                                         // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        VolumeMax;                                         // 0x44(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeModulator");
		return Clss;
	}

};

// 0x40 (0x78 - 0x38)
// Class Engine.SoundNodeModulatorContinuous
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FModulatorContinuousParams            PitchModulationParams;                             // 0x38(0x20)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FModulatorContinuousParams            VolumeModulationParams;                            // 0x58(0x20)(Edit, NoDestructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeModulatorContinuous");
		return Clss;
	}

};

// 0x28 (0x60 - 0x38)
// Class Engine.SoundNodeOscillator
class USoundNodeOscillator : public USoundNode
{
public:
	uint8                                        bModulateVolume : 1;                               // Mask: 0x1, PropSize: 0x10x38(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bModulatePitch : 1;                                // Mask: 0x2, PropSize: 0x10x38(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_196 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_150A[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        AmplitudeMin;                                      // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        AmplitudeMax;                                      // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FrequencyMin;                                      // 0x44(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FrequencyMax;                                      // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OffsetMin;                                         // 0x4C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        OffsetMax;                                         // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CenterMin;                                         // 0x54(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        CenterMax;                                         // 0x58(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_150B[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeOscillator");
		return Clss;
	}

};

// 0x0 (0x38 - 0x38)
// Class Engine.SoundNodeQualityLevel
class USoundNodeQualityLevel : public USoundNode
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeQualityLevel");
		return Clss;
	}

};

// 0x30 (0x68 - 0x38)
// Class Engine.SoundNodeRandom
class USoundNodeRandom : public USoundNode
{
public:
	TArray<float>                                Weights;                                           // 0x38(0x10)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                        PreselectAtLevelLoad;                              // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bRandomizeWithoutReplacement : 1;                  // Mask: 0x1, PropSize: 0x10x4C(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_197 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_150C[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<bool>                                 HasBeenUsed;                                       // 0x50(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                        NumRandomUsed;                                     // 0x60(0x4)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_150D[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeRandom");
		return Clss;
	}

};

// 0x8 (0x40 - 0x38)
// Class Engine.SoundNodeSoundClass
class USoundNodeSoundClass : public USoundNode
{
public:
	class USoundClass*                           SoundClassOverride;                                // 0x38(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeSoundClass");
		return Clss;
	}

};

// 0x8 (0x40 - 0x38)
// Class Engine.SoundNodeSwitch
class USoundNodeSwitch : public USoundNode
{
public:
	class FName                                  IntParameterName;                                  // 0x38(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeSwitch");
		return Clss;
	}

};

// 0x8 (0x40 - 0x38)
// Class Engine.SoundNodeWaveParam
class USoundNodeWaveParam : public USoundNode
{
public:
	class FName                                  WaveParameterName;                                 // 0x38(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundNodeWaveParam");
		return Clss;
	}

};

// 0x30 (0x58 - 0x28)
// Class Engine.SoundSubmix
class USoundSubmix : public UObject
{
public:
	TArray<class USoundSubmix*>                  ChildSubmixes;                                     // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class USoundSubmix*                          ParentSubmix;                                      // 0x38(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundEffectSubmixPreset*>      SubmixEffectChain;                                 // 0x40(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        OutputWetLevel;                                    // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_150E[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SoundSubmix");
		return Clss;
	}

};

// 0x110 (0x138 - 0x28)
// Class Engine.StaticMesh
class UStaticMesh : public UObject
{
public:
	uint8                                        Pad_150F[0x18];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        MinLOD;                                            // 0x40(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1510[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMaterialInterface*>            Materials;                                         // 0x48(0x10)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	TArray<struct FStaticMaterial>               StaticMaterials;                                   // 0x58(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        LightmapUVDensity;                                 // 0x68(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        LightMapResolution;                                // 0x6C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        LightMapCoordinateIndex;                           // 0x70(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        DistanceFieldSelfShadowBias;                       // 0x74(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGenerateMeshDistanceField : 1;                    // Mask: 0x1, PropSize: 0x10x78(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_198 : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1511[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UBodySetup*                            BodySetup;                                         // 0x80(0x8)(Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        LODForCollision;                                   // 0x88(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bStripComplexCollisionForConsole : 1;              // Mask: 0x1, PropSize: 0x10x8C(0x1)(Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasNavigationData : 1;                            // Mask: 0x2, PropSize: 0x10x8C(0x1)(Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_199 : 6;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1512[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        LpvBiasMultiplier;                                 // 0x90(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bAllowCPUAccess;                                   // 0x94(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1513[0x33];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UStaticMeshSocket*>             Sockets;                                           // 0xC8(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1514[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	struct FVector                               PositiveBoundsExtension;                           // 0xE8(0xC)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               NegativeBoundsExtension;                           // 0xF4(0xC)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoxSphereBounds                      ExtendedBounds;                                    // 0x100(0x1C)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                        ElementToIgnoreForTexFactor;                       // 0x11C(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UAssetUserData*>                AssetUserData;                                     // 0x120(0x10)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	class UNavCollision*                         NavCollision;                                      // 0x130(0x8)(Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StaticMesh");
		return Clss;
	}

	int32 GetNumSections(int32 InLOD);
	int32 GetNumLODs();
	struct FBoxSphereBounds GetBounds();
	struct FBox GetBoundingBox();
};

// 0x40 (0x68 - 0x28)
// Class Engine.StaticMeshSocket
class UStaticMeshSocket : public UObject
{
public:
	class FName                                  SocketName;                                        // 0x28(0x8)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                               RelativeLocation;                                  // 0x30(0xC)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                              RelativeRotation;                                  // 0x3C(0xC)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                               RelativeScale;                                     // 0x48(0xC)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1515[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class FString                                Tag;                                               // 0x58(0x10)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StaticMeshSocket");
		return Clss;
	}

};

// 0x18 (0x40 - 0x28)
// Class Engine.StringTable
class UStringTable : public UObject
{
public:
	uint8                                        Pad_1516[0x18];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("StringTable");
		return Clss;
	}

};

// 0x20 (0x48 - 0x28)
// Class Engine.VertexAttributeStream
class UVertexAttributeStream : public UObject
{
public:
	class FName                                  Usage;                                             // 0x28(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EVertexAttributeStreamType        AttributeType;                                     // 0x30(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_1517[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<uint8>                                Data;                                              // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPrivate)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VertexAttributeStream");
		return Clss;
	}

};

// 0x50 (0x78 - 0x28)
// Class Engine.SubDSurface
class USubDSurface : public UObject
{
public:
	TArray<uint32>                               VertexCountPerFace;                                // 0x28(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint32>                               IndicesPerFace;                                    // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UVertexAttributeStream*>        VertexAttributeStreams;                            // 0x48(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1518[0x10];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class UMaterialInterface*>            Materials;                                         // 0x68(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SubDSurface");
		return Clss;
	}

};

// 0x28 (0x50 - 0x28)
// Class Engine.SubsurfaceProfile
class USubsurfaceProfile : public UObject
{
public:
	struct FSubsurfaceProfileStruct              Settings;                                          // 0x28(0x24)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                        Pad_1519[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("SubsurfaceProfile");
		return Clss;
	}

};

// 0x48 (0x70 - 0x28)
// Class Engine.TextPropertyTestObject
class UTextPropertyTestObject : public UObject
{
public:
	class FText                                  DefaultedText;                                     // 0x28(0x18)(NativeAccessSpecifierPublic)
	class FText                                  UndefaultedText;                                   // 0x40(0x18)(NativeAccessSpecifierPublic)
	class FText                                  TransientText;                                     // 0x58(0x18)(NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextPropertyTestObject");
		return Clss;
	}

};

// 0x48 (0x110 - 0xC8)
// Class Engine.Texture2D
class UTexture2D : public UTexture
{
public:
	int32                                        RequestedMips;                                     // 0xC8(0x4)(ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        ResidentMips;                                      // 0xCC(0x4)(ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        StreamingIndex;                                    // 0xD0(0x4)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                        LevelIndex;                                        // 0xD4(0x4)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        FirstResourceMemMip;                               // 0xD8(0x4)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                             ImportedSize;                                      // 0xDC(0x8)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        Pad_151A[0x4];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	double                                       ForceMipLevelsToBeResidentTimestamp;               // 0xE8(0x8)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bTemporarilyDisableStreaming : 1;                  // Mask: 0x1, PropSize: 0x10xF0(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                        bIsStreamable : 1;                                 // Mask: 0x2, PropSize: 0x10xF0(0x1)(Transient, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasStreamingUpdatePending : 1;                    // Mask: 0x4, PropSize: 0x10xF0(0x1)(Transient, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHasCancelationPending : 1;                        // Mask: 0x8, PropSize: 0x10xF0(0x1)(Transient, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceMiplevelsToBeResident : 1;                   // Mask: 0x10, PropSize: 0x10xF0(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreStreamingMipBias : 1;                       // Mask: 0x20, PropSize: 0x10xF0(0x1)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGlobalForceMipLevelsToBeResident : 1;             // Mask: 0x40, PropSize: 0x10xF0(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_19A : 1;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_151B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class ETextureAddress                   AddressX;                                          // 0xF4(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureAddress                   AddressY;                                          // 0xF5(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_151C[0x1A];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Texture2D");
		return Clss;
	}

	int32 Blueprint_GetSizeY();
	int32 Blueprint_GetSizeX();
};

// 0x8 (0x118 - 0x110)
// Class Engine.LightMapTexture2D
class ULightMapTexture2D : public UTexture2D
{
public:
	uint8                                        Pad_151D[0x8];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("LightMapTexture2D");
		return Clss;
	}

};

// 0x8 (0x118 - 0x110)
// Class Engine.ShadowMapTexture2D
class UShadowMapTexture2D : public UTexture2D
{
public:
	enum class EShadowMapFlags                   ShadowmapFlags;                                    // 0x110(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_151E[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ShadowMapTexture2D");
		return Clss;
	}

};

// 0x8 (0x118 - 0x110)
// Class Engine.TextureLightProfile
class UTextureLightProfile : public UTexture2D
{
public:
	float                                        Brightness;                                        // 0x110(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TextureMultiplier;                                 // 0x114(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextureLightProfile");
		return Clss;
	}

};

// 0x18 (0xE0 - 0xC8)
// Class Engine.Texture2DDynamic
class UTexture2DDynamic : public UTexture
{
public:
	uint8                                        Pad_151F[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EPixelFormat                      Format;                                            // 0xD0(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1520[0xF];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("Texture2DDynamic");
		return Clss;
	}

};

// 0x58 (0x120 - 0xC8)
// Class Engine.TextureCube
class UTextureCube : public UTexture
{
public:
	uint8                                        Pad_1521[0x58];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextureCube");
		return Clss;
	}

};

// 0x8 (0xD0 - 0xC8)
// Class Engine.TextureRenderTarget
class UTextureRenderTarget : public UTexture
{
public:
	float                                        TargetGamma;                                       // 0xC8(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1522[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextureRenderTarget");
		return Clss;
	}

};

// 0x28 (0xF8 - 0xD0)
// Class Engine.TextureRenderTarget2D
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int32                                        SizeX;                                             // 0xD0(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SizeY;                                             // 0xD4(0x4)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          ClearColor;                                        // 0xD8(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureAddress                   AddressX;                                          // 0xE8(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETextureAddress                   AddressY;                                          // 0xE9(0x1)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1523[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bForceLinearGamma : 1;                             // Mask: 0x1, PropSize: 0x10xEC(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bHDR : 1;                                          // Mask: 0x2, PropSize: 0x10xEC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bGPUSharedFlag : 1;                                // Mask: 0x4, PropSize: 0x10xEC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bAutoGenerateMips : 1;                             // Mask: 0x8, PropSize: 0x10xEC(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_19B : 4;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1524[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	enum class EPixelFormat                      OverrideFormat;                                    // 0xF0(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1525[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextureRenderTarget2D");
		return Clss;
	}

};

// 0x20 (0x118 - 0xF8)
// Class Engine.CanvasRenderTarget2D
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{
public:
	UMulticastDelegateProperty_                  OnCanvasRenderTargetUpdate;                        // 0xF8(0x10)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UWorld>                 World;                                             // 0x108(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                         bShouldClearRenderTargetOnReceiveUpdate;           // 0x110(0x1)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                        Pad_1526[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("CanvasRenderTarget2D");
		return Clss;
	}

	void UpdateResource();
	void ReceiveUpdate(class UCanvas* Canvas, int32 Width, int32 Height);
	void GetSize(int32* Width, int32* Height);
	class UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(class UObject* WorldContextObject, TSubclassOf<class UCanvasRenderTarget2D> CanvasRenderTarget2DClass, int32 Width, int32 Height);
};

// 0x20 (0xF0 - 0xD0)
// Class Engine.TextureRenderTargetCube
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int32                                        SizeX;                                             // 0xD0(0x4)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                          ClearColor;                                        // 0xD4(0x10)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EPixelFormat                      OverrideFormat;                                    // 0xE4(0x1)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1527[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bHDR : 1;                                          // Mask: 0x1, PropSize: 0x10xE8(0x1)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bForceLinearGamma : 1;                             // Mask: 0x2, PropSize: 0x10xE8(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1528[0x7];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextureRenderTargetCube");
		return Clss;
	}

};

// 0x10 (0x38 - 0x28)
// Class Engine.TextureLODSettings
class UTextureLODSettings : public UObject
{
public:
	TArray<struct FTextureLODGroup>              TextureLODGroups;                                  // 0x28(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TextureLODSettings");
		return Clss;
	}

};

// 0x88 (0xC0 - 0x38)
// Class Engine.DeviceProfile
class UDeviceProfile : public UTextureLODSettings
{
public:
	class FString                                DeviceType;                                        // 0x38(0x10)(Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                BaseProfileName;                                   // 0x48(0x10)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                               Parent;                                            // 0x58(0x8)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1529[0x8];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class FString>                        CVars;                                             // 0x68(0x10)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                        Pad_152A[0x48];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("DeviceProfile");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.ThumbnailInfo
class UThumbnailInfo : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("ThumbnailInfo");
		return Clss;
	}

};

// 0x70 (0x98 - 0x28)
// Class Engine.TimelineTemplate
class UTimelineTemplate : public UObject
{
public:
	float                                        TimelineLength;                                    // 0x28(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class ETimelineLengthMode               LengthMode;                                        // 0x2C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_152B[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	uint8                                        bAutoPlay : 1;                                     // Mask: 0x1, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLoop : 1;                                         // Mask: 0x2, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bReplicated : 1;                                   // Mask: 0x4, PropSize: 0x10x30(0x1)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bValidatedAsWired : 1;                             // Mask: 0x8, PropSize: 0x10x30(0x1)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bIgnoreTimeDilation : 1;                           // Mask: 0x10, PropSize: 0x10x30(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_19C : 3;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_152C[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<struct FTTEventTrack>                 EventTracks;                                       // 0x38(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTTFloatTrack>                 FloatTracks;                                       // 0x48(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTTVectorTrack>                VectorTracks;                                      // 0x58(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTTLinearColorTrack>           LinearColorTracks;                                 // 0x68(0x10)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBPVariableMetaDataEntry>      MetaDataArray;                                     // 0x78(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGuid                                 TimelineGuid;                                      // 0x88(0x10)(DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TimelineTemplate");
		return Clss;
	}

};

// 0x30 (0x58 - 0x28)
// Class Engine.TouchInterface
class UTouchInterface : public UObject
{
public:
	TArray<struct FTouchInputControl>            Controls;                                          // 0x28(0x10)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                        ActiveOpacity;                                     // 0x38(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        InactiveOpacity;                                   // 0x3C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeUntilDeactive;                                 // 0x40(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        TimeUntilReset;                                    // 0x44(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        ActivationDelay;                                   // 0x48(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bPreventRecenter;                                  // 0x4C(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_152D[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        StartupDelay;                                      // 0x50(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_152E[0x4];                                     // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("TouchInterface");
		return Clss;
	}

};

// 0x50 (0xB0 - 0x60)
// Class Engine.UserDefinedEnum
class UUserDefinedEnum : public UEnum
{
public:
	TMap<class FName, class FText>               DisplayNameMap;                                    // 0x60(0x50)(ZeroConstructor, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("UserDefinedEnum");
		return Clss;
	}

};

// 0x20 (0x48 - 0x28)
// Class Engine.VectorField
class UVectorField : public UObject
{
public:
	struct FBox                                  Bounds;                                            // 0x28(0x1C)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                        Intensity;                                         // 0x44(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VectorField");
		return Clss;
	}

};

// 0x40 (0x88 - 0x48)
// Class Engine.VectorFieldAnimated
class UVectorFieldAnimated : public UVectorField
{
public:
	class UTexture2D*                            Texture;                                           // 0x48(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	enum class EVectorFieldConstructionOp        ConstructionOp;                                    // 0x50(0x1)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_152F[0x3];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	int32                                        VolumeSizeX;                                       // 0x54(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        VolumeSizeY;                                       // 0x58(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        VolumeSizeZ;                                       // 0x5C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SubImagesX;                                        // 0x60(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SubImagesY;                                        // 0x64(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        FrameCount;                                        // 0x68(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        FramesPerSecond;                                   // 0x6C(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        bLoop : 1;                                         // Mask: 0x1, PropSize: 0x10x70(0x1)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        BitPad_19D : 7;                                    // Fixing Bit-Field Size  [ Dumper-7 ]
	uint8                                        Pad_1530[0x7];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	class UVectorFieldStatic*                    NoiseField;                                        // 0x78(0x8)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NoiseScale;                                        // 0x80(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                        NoiseMax;                                          // 0x84(0x4)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VectorFieldAnimated");
		return Clss;
	}

};

// 0x88 (0xD0 - 0x48)
// Class Engine.VectorFieldStatic
class UVectorFieldStatic : public UVectorField
{
public:
	int32                                        SizeX;                                             // 0x48(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SizeY;                                             // 0x4C(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                        SizeZ;                                             // 0x50(0x4)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1531[0x7C];                                    // Fixing Size Of Struct [ Dumper-7 ]

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VectorFieldStatic");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.VisualLoggerAutomationTests
class UVisualLoggerAutomationTests : public UObject
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VisualLoggerAutomationTests");
		return Clss;
	}

};

// 0x0 (0x28 - 0x28)
// Class Engine.VisualLoggerDebugSnapshotInterface
class UVisualLoggerDebugSnapshotInterface : public UInterface
{
public:

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("VisualLoggerDebugSnapshotInterface");
		return Clss;
	}

};

// 0x40 (0x68 - 0x28)
// Class Engine.WorldComposition
class UWorldComposition : public UObject
{
public:
	uint8                                        Pad_1532[0x20];                                    // Fixing Size After Last Property  [ Dumper-7 ]
	TArray<class ULevelStreaming*>               TilesStreaming;                                    // 0x48(0x10)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	double                                       TilesStreamingTimeThreshold;                       // 0x58(0x8)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bLoadAllTilesDuringCinematic;                      // 0x60(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                         bRebaseOriginIn3DSpace;                            // 0x61(0x1)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                        Pad_1533[0x2];                                     // Fixing Size After Last Property  [ Dumper-7 ]
	float                                        RebaseOriginDistance;                              // 0x64(0x4)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

	static class UClass* StaticClass()
	{
		static class UClass* Clss = UObject::FindClassFast("WorldComposition");
		return Clss;
	}

};

}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
